Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 07:44:33,689 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 07:44:33,693 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 07:44:33,693 main:382 - The compliance of the JVM is:  7
[INFO] 07:44:33,695 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-28  -failing  org.apache.commons.math3.optimization.linear.SimplexSolverTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_28/target/classes/:/script/jGenProg_Defects4J_Math_28/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 07:44:33,698 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_28/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_28/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 652
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_28/./output_astor/AstorMain-Math-28//bin//default from 652 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_28/./output_astor/AstorMain-Math-28//bin//default, /script/jGenProg_Defects4J_Math_28/target/classes/, /script/jGenProg_Defects4J_Math_28/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.JacobianMatricesTest#testParameterizable
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testWikipedia
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testOnePointParabola
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSine
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testQuadratic
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testEmptySample
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testMixedDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSquareRoot
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsFirstDerivative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testDerivativeShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorOnePair
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRank
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMath226
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.LogitTest#testDerivativeLargeArguments
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:3994, fails: 106, GZoltar suspicious 27998, with positive susp 4389
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 3994
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 854 with susp > 0.1, we consider: 854
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 4717860 milliseconds (4717 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_28/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_28/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_28/target/classes/, /script/jGenProg_Defects4J_Math_28/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 587
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 854
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.14569287935358963]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.14569287935358963]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.14569287935358963]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.14569287935358963]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem$Model, methodName=value(D)D, lineNumber=161, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=82, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=83, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=84, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=86, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=95, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=96, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=97, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=99, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=56, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=57, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=76, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=77, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=78, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=79, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=82, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=target()[D, lineNumber=86, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=90, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=91, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=92, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=93, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=96, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=100, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=102, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=103, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=104, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=105, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=108, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=124, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=125, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=126, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=127, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=129, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=130, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=318, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=321, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.1142908976639189]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.1142908976639189]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=77, susp=0.11215443081840887]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 854,  273
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 273
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 273, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_28/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 4717860
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.optimization.linear.SimplexSolverTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-28
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_28/target/classes/:/script/jGenProg_Defects4J_Math_28/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
08:28:31.014 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
08:28:32.422 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
08:28:33.225 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
08:28:33.230 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
08:28:33.230 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
08:28:33.230 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
08:28:33.744 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

08:28:36.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:36.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:36.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

08:28:38.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:38.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:38.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] uB = getUpperBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

08:28:40.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:40.605 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:40.606 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] uB = getUpperBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

08:28:42.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:28:42.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:28:42.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean hasInfiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:30:56.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:56.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:56.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] ref0 = referenceSimplex[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] vertexI = startConfiguration[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:30:58.701 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:30:58.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:30:58.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] refI = referenceSimplex[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] ref0 = referenceSimplex[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:00.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:00.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:00.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] refJ = referenceSimplex[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] refI = referenceSimplex[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:03.365 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:03.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:03.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: boolean allEquals = true,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] refJ = referenceSimplex[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:05.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:05.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:05.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] confI = startConfiguration[i - 1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: boolean allEquals = true,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:07.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:07.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:07.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] confI = startConfiguration[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] confI = startConfiguration[i - 1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:10.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:10.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:10.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] vertexI = new double[dimension],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] confI = startConfiguration[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:12.241 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:12.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:12.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair vertex = simplex[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] vertexI = new double[dimension],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:14.449 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:14.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:14.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] point = vertex.getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair vertex = simplex[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:16.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:16.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:16.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.optimization.PointValuePair tmp = simplex[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] point = vertex.getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:18.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:18.913 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:18.914 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair[] copy = new org.apache.commons.math3.optimization.PointValuePair[simplex.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.optimization.PointValuePair tmp = simplex[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:21.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:21.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:21.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] steps = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair[] copy = new org.apache.commons.math3.optimization.PointValuePair[simplex.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:23.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:23.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:23.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] lowerBound = getLowerBound(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] steps = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:25.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:25.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:25.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] upperBound = getUpperBound(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] lowerBound = getLowerBound(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:27.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:27.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:27.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double value = bobyqa(lowerBound, upperBound),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] upperBound = getUpperBound(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:29.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:29.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:29.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int n = currentBest.getDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double value = bobyqa(lowerBound, upperBound),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:31.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:31.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:32.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double boundDiff = boundDifference[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int n = currentBest.getDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:34.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:34.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:34.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double deltaOne = upperBound[j] - currentBest.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double boundDiff = boundDifference[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:36.352 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:36.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:36.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double deltaOne = lowerBound[j] - currentBest.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double deltaOne = upperBound[j] - currentBest.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:38.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:38.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:38.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double deltaTwo = -initialTrustRegionRadius,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double deltaOne = lowerBound[j] - currentBest.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:40.628 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:40.629 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:40.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int npt = numberOfInterpolationPoints,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double deltaTwo = -initialTrustRegionRadius,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:42.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:42.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:42.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int np = n + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int npt = numberOfInterpolationPoints,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:45.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:45.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:45.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int nptm = npt - np,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int np = n + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:47.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:47.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:47.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int nh = (n * np) / 2,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int nptm = npt - np,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:49.361 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:49.361 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:49.362 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector work1 = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int nh = (n * np) / 2,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:51.590 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:51.590 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:51.591 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector work2 = new org.apache.commons.math3.linear.ArrayRealVector(npt),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector work1 = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:53.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:53.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:53.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector work3 = new org.apache.commons.math3.linear.ArrayRealVector(npt),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector work2 = new org.apache.commons.math3.linear.ArrayRealVector(npt),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:56.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:56.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:56.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double cauchy = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector work3 = new org.apache.commons.math3.linear.ArrayRealVector(npt),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:31:58.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:31:58.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:31:58.478 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double alpha = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double cauchy = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:00.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:00.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:00.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double dsq = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double alpha = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:02.846 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:02.847 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:02.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double crvmin = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double dsq = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:05.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:05.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:05.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double xoptsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double crvmin = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:07.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:07.291 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:07.292 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double deltaOne = trustRegionCenterOffset.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double xoptsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:09.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:09.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:09.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double fsave = fAtInterpolationPoints.getEntry(0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double deltaOne = trustRegionCenterOffset.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:11.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:11.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:11.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int kbase = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double fsave = fAtInterpolationPoints.getEntry(0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:14.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:14.291 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:14.292 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int ntrits = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int kbase = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:16.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:16.439 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:16.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int itest = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int ntrits = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:18.796 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:18.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:18.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int knew = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int itest = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:21.100 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:21.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:21.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int nfsav = getEvaluations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int knew = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:23.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:23.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:23.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double rho = initialTrustRegionRadius,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int nfsav = getEvaluations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:25.178 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:25.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:25.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double delta = rho,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double rho = initialTrustRegionRadius,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:27.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:27.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:27.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double diffa = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double delta = rho,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:29.076 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:29.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:29.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double diffb = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double diffa = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:31.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:31.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:31.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double diffc = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double diffb = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:33.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:33.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:33.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double f = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double diffc = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:35.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:35.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:35.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double beta = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double f = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:38.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:38.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:38.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double adelt = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double beta = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:40.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:40.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:40.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double denom = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double adelt = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:42.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:42.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:42.416 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double ratio = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double denom = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:44.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:44.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:44.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double dnorm = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double ratio = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:46.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:46.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:46.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double scaden = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double dnorm = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:48.913 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:48.914 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:48.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double biglsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double scaden = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:51.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:51.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:51.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double distsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double biglsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:53.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:53.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:53.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int state = 20,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double distsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:55.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:55.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:55.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int ih = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int state = 20,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:57.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:57.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:57.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double temp = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int ih = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:32:59.274 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:32:59.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:32:59.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector gnew = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double temp = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:01.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:01.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:01.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector xbdi = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector gnew = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:03.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:03.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:03.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector s = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector xbdi = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:05.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:05.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:05.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector hs = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector s = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:07.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:07.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:07.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector hred = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector hs = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:09.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:09.270 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:09.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] dsqCrvmin = trsbox(delta, gnew, xbdi, s, 
hs, hred),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector hred = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:11.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:11.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:11.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double deltaOne = delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] dsqCrvmin = trsbox(delta, gnew, xbdi, s, 
hs, hred),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:13.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:13.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:13.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double deltaTwo = java.lang.Math.sqrt(dsq),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double deltaOne = delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:15.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:15.579 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:15.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double errbig = java.lang.Math.max(deltaOne, diffc),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double deltaTwo = java.lang.Math.sqrt(dsq),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:17.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:17.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:17.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double frhosq = (rho * org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE_OVER_EIGHT) * rho,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double errbig = java.lang.Math.max(deltaOne, diffc),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:19.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:19.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:19.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double bdtol = errbig / rho,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double frhosq = (rho * org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE_OVER_EIGHT) * rho,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:21.910 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:21.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:21.911 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double bdtest = bdtol,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double bdtol = errbig / rho,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:23.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:23.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:23.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double curv = modelSecondDerivativesValues.getEntry((j + (j * j)) / 2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double bdtest = bdtol,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:26.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:26.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:26.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = interpolationPoints.getEntry(k, j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double curv = modelSecondDerivativesValues.getEntry((j + (j * j)) / 2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:28.235 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:28.235 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:28.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double fracsq = xoptsq * org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE_OVER_FOUR,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = interpolationPoints.getEntry(k, j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:30.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:30.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:30.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sumpq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double fracsq = xoptsq * org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE_OVER_FOUR,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:32.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:32.726 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:32.727 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sum = (-org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF) * xoptsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sumpq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:34.969 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:34.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:34.971 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double temp = fracsq - (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * sum),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sum = (-org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF) * xoptsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:37.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:37.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:37.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int ip = npt + i,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double temp = fracsq - (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * sum),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:39.168 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:39.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:39.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sumz = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int ip = npt + i,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:41.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:41.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:41.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sumw = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sumz = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:43.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:43.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:43.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sum = ((fracsq * sumz) - (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * sumw)) * trustRegionCenterOffset.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sumw = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:45.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:45.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:45.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int ip = i + npt,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sum = ((fracsq * sumz) - (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * sumw)) * trustRegionCenterOffset.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:47.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:47.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:47.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double temp = work1.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int ip = i + npt,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:49.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:49.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:49.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] alphaCauchy = altmov(knew, adelt),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double temp = work1.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:51.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:51.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:51.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double suma = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] alphaCauchy = altmov(knew, adelt),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:54.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:54.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:54.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sumb = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double suma = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:56.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:56.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:56.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sum = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sumb = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:33:58.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:33:58.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:33:58.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double bsum = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sum = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:00.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:00.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:00.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double dx = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double bsum = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:02.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:02.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:02.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = trialStepPoint.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double dx = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:04.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:04.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:04.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int jp = npt + j,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = trialStepPoint.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:06.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:06.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:06.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = lagrangeValuesAtNewPoint.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int jp = npt + j,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:08.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:08.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:08.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double delsq = delta * delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = lagrangeValuesAtNewPoint.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:11.072 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:11.072 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:11.073 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double hdiag = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double delsq = delta * delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:13.224 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:13.224 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:13.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = zMatrix.getEntry(k, m),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double hdiag = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:15.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:15.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:15.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = lagrangeValuesAtNewPoint.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = zMatrix.getEntry(k, m),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:17.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:17.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:17.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double den = (beta * hdiag) + (d2 * d2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = lagrangeValuesAtNewPoint.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:19.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:19.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:19.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d3 = interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double den = (beta * hdiag) + (d2 * d2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:21.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:21.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:21.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d4 = distsq / delsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d3 = interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:23.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:23.084 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:23.085 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double temp = java.lang.Math.max(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE, d4 * d4),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d4 = distsq / delsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:25.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:25.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:25.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d5 = lagrangeValuesAtNewPoint.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double temp = java.lang.Math.max(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE, d4 * d4),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:27.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:27.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:27.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d3 = lowerBound[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d5 = lagrangeValuesAtNewPoint.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:29.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:29.451 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:29.452 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d4 = originShift.getEntry(i) + newPoint.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d3 = lowerBound[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:31.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:31.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:31.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = java.lang.Math.max(d3, d4),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d4 = originShift.getEntry(i) + newPoint.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:33.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:33.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:33.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = upperBound[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = java.lang.Math.max(d3, d4),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:36.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:36.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:36.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double fopt = fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = upperBound[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:38.323 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:38.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:38.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double vquad = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double fopt = fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:40.479 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:40.480 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:40.481 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double temp = trialStepPoint.getEntry(i) * trialStepPoint.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double vquad = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:42.501 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:42.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:42.502 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = work2.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double temp = trialStepPoint.getEntry(i) * trialStepPoint.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:44.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:44.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:44.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = d1 * d1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = work2.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:46.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:46.780 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:46.781 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double diff = (f - fopt) - vquad,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = d1 * d1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:49.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:49.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:49.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double hDelta = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double diff = (f - fopt) - vquad,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:51.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:51.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:51.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int ksav = knew,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double hDelta = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:53.139 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:53.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:53.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double densav = denom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int ksav = knew,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:55.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:55.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:55.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = lagrangeValuesAtNewPoint.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double densav = denom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:57.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:57.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:57.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double den = (beta * hdiag) + (d1 * d1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = lagrangeValuesAtNewPoint.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:34:59.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:34:59.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:34:59.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = interpolationPoints.getEntry(k, j) - newPoint.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double den = (beta * hdiag) + (d1 * d1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:01.308 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:01.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:01.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d3 = distsq / delsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = interpolationPoints.getEntry(k, j) - newPoint.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:03.503 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:03.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:03.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double temp = java.lang.Math.max(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE, d3 * d3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d3 = distsq / delsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:05.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:05.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:05.435 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d4 = lagrangeValuesAtNewPoint.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double temp = java.lang.Math.max(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE, d3 * d3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:07.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:07.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:07.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d5 = temp * (d4 * d4),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d4 = lagrangeValuesAtNewPoint.getEntry(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:09.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:09.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:09.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double pqold = modelSecondDerivativesParameters.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d5 = temp * (d4 * d4),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:12.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:12.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:12.100 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double temp = pqold * interpolationPoints.getEntry(knew, i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double pqold = modelSecondDerivativesParameters.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:14.100 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:14.100 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:14.101 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double temp = diff * zMatrix.getEntry(knew, m),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double temp = pqold * interpolationPoints.getEntry(knew, i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:16.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:16.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:16.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double temp = suma * sumb,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double temp = diff * zMatrix.getEntry(knew, m),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:18.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:18.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:18.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = trustRegionCenterOffset.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double temp = suma * sumb,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:20.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:20.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:20.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double gqsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = trustRegionCenterOffset.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:22.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:22.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:22.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double gisq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double gqsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:24.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:24.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:24.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, gradientAtTrustRegionCenter.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double gisq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:25.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:25.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:25.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, sum),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, gradientAtTrustRegionCenter.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:27.767 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:27.767 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:27.768 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = java.lang.Math.max(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, gradientAtTrustRegionCenter.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, sum),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:29.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:29.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:29.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = java.lang.Math.max(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, sum),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = java.lang.Math.max(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, gradientAtTrustRegionCenter.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:31.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:31.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:31.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = gradientAtTrustRegionCenter.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = java.lang.Math.max(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, sum),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:33.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:33.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:33.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.TWO * delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = gradientAtTrustRegionCenter.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:35.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:35.557 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:35.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.TEN * rho,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.TWO * delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:37.684 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:37.685 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:37.686 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.TEN * rho,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:39.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:39.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:39.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double dist = java.lang.Math.sqrt(distsq),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:42.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:42.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:42.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE_OVER_TEN * dist, delta),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double dist = java.lang.Math.sqrt(distsq),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:44.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:44.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:44.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d4 = originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE_OVER_TEN * dist, delta),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:46.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:46.201 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:46.202 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector glag = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d4 = originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:48.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:48.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:48.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector hcol = new org.apache.commons.math3.linear.ArrayRealVector(npt),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector glag = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:50.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:50.246 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:50.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector work2 = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector hcol = new org.apache.commons.math3.linear.ArrayRealVector(npt),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:52.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:52.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:52.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp = zMatrix.getEntry(knew, j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector work2 = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:54.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:54.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:54.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double alpha = hcol.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp = zMatrix.getEntry(knew, j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:56.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:56.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:56.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double ha = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * alpha,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double alpha = hcol.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:35:58.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:35:58.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:35:58.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tmp = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double ha = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * alpha,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:00.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:00.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:00.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double presav = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double tmp = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:02.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:02.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:02.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double step = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double presav = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:04.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:04.574 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:04.575 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int ksav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double step = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:06.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:06.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:06.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int ibdsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int ksav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:08.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:08.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:08.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double stpsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int ibdsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:10.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:10.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:10.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double dderiv = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double stpsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:12.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:12.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:12.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp = interpolationPoints.getEntry(k, i) - trustRegionCenterOffset.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double dderiv = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:14.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:14.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:14.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double subd = adelt / java.lang.Math.sqrt(distsq),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp = interpolationPoints.getEntry(k, i) - trustRegionCenterOffset.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:16.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:16.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:16.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double slbd = -subd,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double subd = adelt / java.lang.Math.sqrt(distsq),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:18.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:18.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:18.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int ilbd = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double slbd = -subd,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:20.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:20.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:20.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int iubd = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int ilbd = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:22.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:22.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:22.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double sumin = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE, subd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int iubd = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:24.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:24.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:24.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int isbd = ilbd,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double sumin = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE, subd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:25.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:25.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:25.927 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double vlag = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int isbd = ilbd,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:27.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:27.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:27.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double diff = dderiv - org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double vlag = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:29.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:29.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:29.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = subd * (dderiv - (subd * diff)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double diff = dderiv - org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:32.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:32.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:32.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * dderiv,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = subd * (dderiv - (subd * diff)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:34.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:34.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:34.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d3 = d2 - (diff * slbd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * dderiv,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:36.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:36.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:36.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d4 = d2 - (diff * subd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d3 = d2 - (diff * slbd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:38.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:38.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:38.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d5 = (d2 * d2) / diff,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d4 = d2 - (diff * subd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:40.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:40.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:40.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp = subd * (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE - subd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d5 = (d2 * d2) / diff,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:42.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:42.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:42.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp = (step * (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE - step)) * distsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp = subd * (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE - subd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:44.148 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:44.148 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:44.149 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double predsq = (vlag * vlag) * ((vlag * vlag) + ((ha * tmp) * tmp)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp = (step * (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE - step)) * distsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:46.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:46.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:46.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp = trustRegionCenterOffset.getEntry(i) + (stpsav * (interpolationPoints.getEntry(ksav, i) - trustRegionCenterOffset.getEntry(i))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double predsq = (vlag * vlag) * ((vlag * vlag) + ((ha * tmp) * tmp)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:48.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:48.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:48.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double bigstp = adelt + adelt,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp = trustRegionCenterOffset.getEntry(i) + (stpsav * (interpolationPoints.getEntry(ksav, i) - trustRegionCenterOffset.getEntry(i))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:50.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:50.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:50.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int iflag = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double bigstp = adelt + adelt,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:52.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:52.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:52.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double csave = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int iflag = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:54.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:54.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:54.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double wfixsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double csave = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:55.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:55.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:55.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double ggfree = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double wfixsq = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:36:58.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:36:58.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:36:58.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double glagValue = glag.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double ggfree = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:00.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:00.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:00.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp1 = (adelt * adelt) - wfixsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double glagValue = glag.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:02.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:02.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:02.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp2 = trustRegionCenterOffset.getEntry(i) - (step * glag.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp1 = (adelt * adelt) - wfixsq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:04.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:04.164 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:04.165 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = work1.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp2 = trustRegionCenterOffset.getEntry(i) - (step * glag.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:06.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:06.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:06.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = glag.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = work1.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:08.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:08.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:08.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double gw = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = glag.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:10.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:10.146 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:10.147 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double min = java.lang.Math.min(upperDifference.getEntry(i), 
trustRegionCenterOffset.getEntry(i) + work1.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double gw = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:12.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:12.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:12.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double curv = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double min = java.lang.Math.min(upperDifference.getEntry(i), 
trustRegionCenterOffset.getEntry(i) + work1.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:14.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:14.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:14.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double scale = (-gw) / curv,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double curv = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:16.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:16.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:16.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp = trustRegionCenterOffset.getEntry(i) + (scale * work1.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double scale = (-gw) / curv,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:17.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:17.993 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:17.994 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * gw) * scale,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp = trustRegionCenterOffset.getEntry(i) + (scale * work1.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:19.911 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:19.912 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:19.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = gw + (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * curv),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * gw) * scale,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:21.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:21.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:21.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int ndim = bMatrix.getRowDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = gw + (org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * curv),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:23.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:23.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:23.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int ndim = bMatrix.getRowDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:25.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:25.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:25.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double recip = 1.0 / rhosq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:27.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:27.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:27.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int ipt = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double recip = 1.0 / rhosq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:29.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:29.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:29.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int jpt = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int ipt = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:31.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:31.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:31.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double fbeg = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int jpt = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:33.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:33.710 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:33.711 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int nfm = getEvaluations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double fbeg = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:35.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:35.674 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:35.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int nfx = nfm - n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int nfm = getEvaluations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:37.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:37.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:37.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int nfmm = nfm - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int nfx = nfm - n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:39.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:39.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:39.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int nfxm = nfx - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int nfmm = nfm - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:41.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:41.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:41.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double stepa = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int nfxm = nfx - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:43.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:43.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:43.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double stepb = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double stepa = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:45.178 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:45.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:45.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int tmp1 = (nfm - np) / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double stepb = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:47.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:47.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:47.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int tmp2 = jpt,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int tmp1 = (nfm - np) / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:49.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:49.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:49.014 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int iptMinus1 = ipt - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int tmp2 = jpt,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:51.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:51.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:51.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int jptMinus1 = jpt - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int iptMinus1 = ipt - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:53.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:53.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:53.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double objectiveValue = computeObjectiveValue(currentBest.toArray()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int jptMinus1 = jpt - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:55.410 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:55.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:55.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double f = (isMinimize) ? objectiveValue : -objectiveValue,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double objectiveValue = computeObjectiveValue(currentBest.toArray()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:57.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:57.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:57.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int numEval = getEvaluations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double f = (isMinimize) ? objectiveValue : -objectiveValue,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:37:59.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:37:59.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:37:59.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double oneOverStepA = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE / stepa,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int numEval = getEvaluations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:01.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:01.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:01.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int ih = ((nfx * (nfx + 1)) / 2) - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double oneOverStepA = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ONE / stepa,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:04.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:04.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:04.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp = (f - fbeg) / stepb,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int ih = ((nfx * (nfx + 1)) / 2) - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:06.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:06.402 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:06.403 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double diff = stepb - stepa,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp = (f - fbeg) / stepb,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:08.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:08.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:08.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int ih = (((ipt * (ipt - 1)) / 2) + jpt) - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double diff = stepb - stepa,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:10.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:10.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:10.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int ih = (((ipt * (ipt - 1)) / 2) + jpt) - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:12.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:12.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:12.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double ds,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:14.827 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:14.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:14.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int iu,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double ds,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:17.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:17.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:17.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double dhd,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int iu,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:19.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:19.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:19.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double dhs,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double dhd,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:21.514 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:21.515 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:21.516 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double cth,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double dhs,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:23.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:23.674 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:23.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double shs,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double cth,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:25.904 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:25.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:25.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sth,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double shs,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:28.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:28.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:28.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double ssq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sth,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:30.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:30.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:30.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double beta = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double ssq,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:32.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:32.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:32.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sdec,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double beta = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:34.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:34.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:34.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double blen,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sdec,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:37.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:37.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:37.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int iact = -1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double blen,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:39.113 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:39.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:39.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int nact = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int iact = -1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:41.338 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:41.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:41.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double angt = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int nact = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:43.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:43.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:43.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double qred,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double angt = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:45.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:45.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:45.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int isav,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double qred,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:47.967 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:47.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:47.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double temp = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int isav,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:50.210 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:50.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:50.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double xsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double temp = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:52.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:52.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:52.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double xsum = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double xsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:54.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:54.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:54.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double angbd = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double xsum = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:56.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:56.535 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:56.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double dredg = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double angbd = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:38:58.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:38:58.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:38:58.505 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sredg = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double dredg = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:00.636 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:00.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:00.637 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int iterc,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sredg = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:02.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:02.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:02.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double resid = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int iterc,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:04.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:04.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:04.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double delsq = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double resid = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:06.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:06.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:06.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double ggsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double delsq = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:08.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:08.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:08.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tempa = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double ggsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:10.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:10.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:10.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tempb = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double tempa = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:12.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:12.172 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:12.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double redmax = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double tempb = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:14.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:14.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:14.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double dredsq = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double redmax = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:15.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:15.989 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:15.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double redsav = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double dredsq = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:17.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:17.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:17.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double gredsq = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double redsav = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:19.910 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:19.910 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:19.911 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double rednew = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double gredsq = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:21.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:21.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:21.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int itcsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double rednew = 
0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:23.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:23.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:23.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double rdprev = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int itcsav = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:25.762 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:25.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:25.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double rdnext = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double rdprev = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:27.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:27.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:27.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double stplen = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double rdnext = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:29.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:29.921 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:29.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double stepsq = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double stplen = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:32.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:32.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:32.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int itermax = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double stepsq = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:34.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:34.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:34.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = s.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int itermax = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:36.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:36.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:36.337 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = trialStepPoint.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = s.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:38.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:38.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:38.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = gnew.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = trialStepPoint.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:40.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:40.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:40.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = stplen * (ggsav - ((org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * stplen) * shs)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = gnew.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:42.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:42.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:43.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = trialStepPoint.getEntry(iact),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = stplen * (ggsav - ((org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.HALF * stplen) * shs)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:45.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:45.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:45.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double d1 = trialStepPoint.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = trialStepPoint.getEntry(iact),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:47.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:47.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:47.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double d2 = s.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double d1 = trialStepPoint.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:49.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:49.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:49.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double min = java.lang.Math.min(trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i), 
upperDifference.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double d2 = s.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:51.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:51.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:51.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.RealVector tmp = interpolationPoints.operate(s).ebeMultiply(modelSecondDerivativesParameters),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double min = java.lang.Math.min(trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i), 
upperDifference.getEntry(i)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:53.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:53.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:53.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int nptm = (npt - n) - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.RealVector tmp = interpolationPoints.operate(s).ebeMultiply(modelSecondDerivativesParameters),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:55.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:55.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:55.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.linear.ArrayRealVector work = new org.apache.commons.math3.linear.ArrayRealVector(npt + n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int nptm = (npt - n) - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:39:57.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:39:57.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:39:57.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double ztest = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.linear.ArrayRealVector work = new org.apache.commons.math3.linear.ArrayRealVector(npt + n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:00.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:00.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:00.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = zMatrix.getEntry(knew, j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double ztest = org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:02.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:02.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:02.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = zMatrix.getEntry(knew, 0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = zMatrix.getEntry(knew, j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:04.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:04.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:04.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d3 = zMatrix.getEntry(knew, j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = zMatrix.getEntry(knew, 0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:06.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:06.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:06.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d4 = java.lang.Math.sqrt((d2 * d2) + (d3 * d3)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d3 = zMatrix.getEntry(knew, j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:08.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:08.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:08.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d5 = zMatrix.getEntry(knew, 0) / d4,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d4 = java.lang.Math.sqrt((d2 * d2) + (d3 * d3)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:10.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:10.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:10.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d6 = zMatrix.getEntry(knew, j) / d4,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d5 = zMatrix.getEntry(knew, 0) / d4,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:12.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:12.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:12.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d7 = (d5 * zMatrix.getEntry(i, 0)) + (d6 * zMatrix.getEntry(i, j)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d6 = zMatrix.getEntry(knew, j) / d4,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:14.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:14.693 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:14.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double alpha = work.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d7 = (d5 * zMatrix.getEntry(i, 0)) + (d6 * zMatrix.getEntry(i, j)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:16.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:16.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:16.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double tau = lagrangeValuesAtNewPoint.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double alpha = work.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:18.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:18.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:18.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double sqrtDenom = java.lang.Math.sqrt(denom),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double tau = lagrangeValuesAtNewPoint.getEntry(knew),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:20.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:20.813 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:20.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d1 = tau / sqrtDenom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double sqrtDenom = java.lang.Math.sqrt(denom),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:22.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:22.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:22.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d2 = zMatrix.getEntry(knew, 0) / sqrtDenom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d1 = tau / sqrtDenom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:24.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:24.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:24.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d3 = ((alpha * lagrangeValuesAtNewPoint.getEntry(jp)) - (tau * work.getEntry(jp))) / denom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = zMatrix.getEntry(knew, 0) / sqrtDenom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:27.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:27.096 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:27.097 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double d4 = (((-beta) * work.getEntry(jp)) - (tau * lagrangeValuesAtNewPoint.getEntry(jp))) / denom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d3 = ((alpha * lagrangeValuesAtNewPoint.getEntry(jp)) - (tau * work.getEntry(jp))) / denom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:29.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:29.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:29.285 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] init = getStartPoint(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d4 = (((-beta) * work.getEntry(jp)) - (tau * lagrangeValuesAtNewPoint.getEntry(jp))) / denom,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:31.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:31.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:31.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int dimension = init.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] init = getStartPoint(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:33.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:33.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:33.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int[] nPointsInterval = new int[]{ dimension + 2, ((dimension + 2) * (dimension + 1)) / 2 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int dimension = init.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:36.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:36.193 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:36.194 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double requiredMinDiff = 2 * initialTrustRegionRadius,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int[] nPointsInterval = new int[]{ dimension + 2, ((dimension + 2) * (dimension + 1)) / 2 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:38.160 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:38.160 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:38.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double minDiff = java.lang.Double.POSITIVE_INFINITY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double requiredMinDiff = 2 * initialTrustRegionRadius,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:40.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:40.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:40.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] ds = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double minDiff = java.lang.Double.POSITIVE_INFINITY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:42.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:42.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:42.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final java.lang.Throwable t = new java.lang.Throwable(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] ds = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:44.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:44.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:44.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final java.lang.StackTraceElement[] elements = t.getStackTrace(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final java.lang.Throwable t = new java.lang.Throwable(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:46.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:46.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:46.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final java.lang.StackTraceElement e = elements[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final java.lang.StackTraceElement[] elements = t.getStackTrace(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:48.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:48.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:48.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int dim = startPoint.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final java.lang.StackTraceElement e = elements[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:50.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:50.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:50.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double v = startPoint[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int dim = startPoint.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:52.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:52.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:52.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double lo = lower[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double v = startPoint[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:54.701 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:54.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:54.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double hi = upper[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double lo = lower[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:56.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:56.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:56.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction fitfun = new org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double hi = upper[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:40:59.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:40:59.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:40:59.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] guess = fitfun.encode(getStartPoint()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction fitfun = new org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:01.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:01.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:01.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double bestValue = fitfun.value(guess),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] guess = fitfun.encode(getStartPoint()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:03.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:03.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:03.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.optimization.PointValuePair optimum = new org.apache.commons.math3.optimization.PointValuePair(getStartPoint(), 
isMinimize ? bestValue : -bestValue),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double bestValue = fitfun.value(guess),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:05.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:05.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:05.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.optimization.PointValuePair lastResult = null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.optimization.PointValuePair optimum = new org.apache.commons.math3.optimization.PointValuePair(getStartPoint(), 
isMinimize ? bestValue : -bestValue),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:07.683 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:07.683 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:07.684 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arz = randn1(dimension, lambda),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.optimization.PointValuePair lastResult = null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:09.683 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:09.684 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:09.685 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arx = org.apache.commons.math3.optimization.direct.CMAESOptimizer.zeros(dimension, lambda),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arz = randn1(dimension, lambda),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:11.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:11.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:11.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] fitness = new double[lambda],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arx = org.apache.commons.math3.optimization.direct.CMAESOptimizer.zeros(dimension, lambda),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:14.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:14.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:14.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arxk = null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] fitness = new double[lambda],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:16.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:16.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:16.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int[] arindex = sortedIndices(fitness),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arxk = null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:18.565 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:18.566 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:18.567 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix xold = xmean,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] arindex = sortedIndices(fitness),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:20.828 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:20.828 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:20.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix bestArx = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arx, org.apache.commons.math3.util.MathArrays.copyOf(arindex, mu)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix xold = xmean,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:23.067 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:23.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:23.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix bestArz = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arz, org.apache.commons.math3.util.MathArrays.copyOf(arindex, mu)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix bestArx = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arx, org.apache.commons.math3.util.MathArrays.copyOf(arindex, mu)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:25.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:25.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:25.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix zmean = bestArz.multiply(weights),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix bestArz = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arz, org.apache.commons.math3.util.MathArrays.copyOf(arindex, mu)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:27.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:27.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:27.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: boolean hsig = updateEvolutionPaths(zmean, xold),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix zmean = bestArz.multiply(weights),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:29.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:29.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:29.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double bestFitness = fitness[arindex[0]],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: boolean hsig = updateEvolutionPaths(zmean, xold),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:31.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:31.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:31.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double worstFitness = fitness[arindex[arindex.length - 1]],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double bestFitness = fitness[arindex[0]],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:33.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:33.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:33.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] sqrtDiagC = org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(diagC).getColumn(0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double worstFitness = fitness[arindex[arindex.length - 1]],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:35.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:35.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:35.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] pcCol = pc.getColumn(0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] sqrtDiagC = org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(diagC).getColumn(0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:37.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:37.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:37.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double historyBest = org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(fitnessHistory),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] pcCol = pc.getColumn(0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:39.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:39.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:39.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double historyWorst = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(fitnessHistory),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double historyBest = org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(fitnessHistory),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:41.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:41.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:41.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.optimization.PointValuePair current = 
new org.apache.commons.math3.optimization.PointValuePair(bestArx.getColumn(0), 
isMinimize ? bestFitness : -bestFitness),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double historyWorst = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(fitnessHistory),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:44.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:44.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:44.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double range = (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] sigmaArray = new double[guess.length][1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:46.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:46.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:46.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix insigma = new org.apache.commons.math3.linear.Array2DRowRealMatrix(sigmaArray, false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double range = (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:48.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:48.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:48.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sumw = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix insigma = new org.apache.commons.math3.linear.Array2DRowRealMatrix(sigmaArray, false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:50.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:50.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:50.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sumwq = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sumw = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:53.127 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:53.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:53.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double w = weights.getEntry(i, 0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sumwq = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:55.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:55.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:55.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: boolean hsig = ((normps / 
java.lang.Math.sqrt(1.0 - java.lang.Math.pow(1.0 - cs, 2.0 * iterations))) / 
chiN) < (1.4 + (2.0 / (dimension + 1.0))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double w = weights.getEntry(i, 0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:57.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:57.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:57.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double oldFac = (hsig) ? 0 : (ccov1Sep * cc) * (2.0 - cc),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: boolean hsig = ((normps / 
java.lang.Math.sqrt(1.0 - java.lang.Math.pow(1.0 - cs, 2.0 * iterations))) / 
chiN) < (1.4 + (2.0 / (dimension + 1.0))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:41:59.215 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:41:59.215 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:41:59.216 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double negccov = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double oldFac = (hsig) ? 0 : (ccov1Sep * cc) * (2.0 - cc),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:01.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:01.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:01.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arpos = bestArx.subtract(org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(xold, 1, mu)).scalarMultiply(
1.0 / sigma),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double negccov = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:03.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:03.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:03.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix roneu = pc.multiply(pc.transpose()).scalarMultiply(
ccov1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arpos = bestArx.subtract(org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(xold, 1, mu)).scalarMultiply(
1.0 / sigma),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:05.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:05.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:05.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double oldFac = (hsig) ? 0 : (ccov1 * cc) * (2.0 - cc),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix roneu = pc.multiply(pc.transpose()).scalarMultiply(
ccov1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:07.492 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:07.493 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:07.493 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double negminresidualvariance = 0.66,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double oldFac = (hsig) ? 0 : (ccov1 * cc) * (2.0 - cc),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:09.661 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:09.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:09.662 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double negalphaold = 0.5,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double negminresidualvariance = 0.66,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:11.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:11.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:11.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int[] arReverseIndex = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(arindex),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double negalphaold = 0.5,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:13.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:13.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:13.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arzneg = 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arz, org.apache.commons.math3.util.MathArrays.copyOf(arReverseIndex, mu)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] arReverseIndex = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(arindex),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:15.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:15.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:15.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arnorms = org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(org.apache.commons.math3.optimization.direct.CMAESOptimizer.sumRows(org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(arzneg))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arzneg = 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arz, org.apache.commons.math3.util.MathArrays.copyOf(arReverseIndex, mu)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:17.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:17.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:17.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int[] idxnorms = sortedIndices(arnorms.getRow(0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arnorms = org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(org.apache.commons.math3.optimization.direct.CMAESOptimizer.sumRows(org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(arzneg))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:19.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:19.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:19.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arnormsSorted = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxnorms),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] idxnorms = sortedIndices(arnorms.getRow(0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:22.008 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:22.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:22.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arnormsSorted = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxnorms),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:24.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:24.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:24.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arnormsReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxReverse),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:26.470 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:26.470 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:26.471 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int[] idxInv = org.apache.commons.math3.optimization.direct.CMAESOptimizer.inverse(idxnorms),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arnormsReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxReverse),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:28.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:28.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:28.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix arnormsInv = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxInv),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] idxInv = org.apache.commons.math3.optimization.direct.CMAESOptimizer.inverse(idxnorms),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:30.668 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:30.668 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:30.669 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double negcovMax = (1.0 - negminresidualvariance) / 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(arnormsInv).multiply(weights).getEntry(0, 0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arnormsInv = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxInv),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:32.773 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:32.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:32.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix artmp = BD.multiply(arzneg),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double negcovMax = (1.0 - negminresidualvariance) / 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(arnormsInv).multiply(weights).getEntry(0, 0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:34.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:34.937 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:34.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.RealMatrix Cneg = artmp.multiply(org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(weights)).multiply(
artmp.transpose()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix artmp = BD.multiply(arzneg),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:37.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:37.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:37.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.001904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix Cneg = artmp.multiply(org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(weights)).multiply(
artmp.transpose()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Use non-deprecated ctor.

08:42:39.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:39.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:39.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.001904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:41.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:41.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:41.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = (org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14) - org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(diagD),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:43.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:43.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:43.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex[] dis = new org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex[doubles.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double tfac = (org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14) - org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(diagD),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:46.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:46.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:46.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int[] indices = new int[doubles.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex[] dis = new org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex[doubles.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:48.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:48.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:48.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: long bits = java.lang.Double.doubleToLongBits(value),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] indices = new int[doubles.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:50.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:50.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:50.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] res = new double[x.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: long bits = java.lang.Double.doubleToLongBits(value),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:52.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:52.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:52.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double diff = boundaries[1][i] - boundaries[0][i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] res = new double[x.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:54.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:54.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:54.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double value,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double diff = boundaries[1][i] - boundaries[0][i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:56.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:56.361 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:56.362 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] repaired = repair(point),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double value,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:42:58.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:42:58.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:42:58.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] repaired = new double[x.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] repaired = repair(point),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:00.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:00.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:00.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double penalty = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] repaired = new double[x.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:03.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:03.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:03.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double diff = java.lang.Math.abs(x[i] - repaired[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double penalty = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:05.515 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:05.515 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:05.516 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[m.getRowDimension()][m.getColumnDimension()],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double diff = java.lang.Math.abs(x[i] - repaired[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:07.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:07.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:07.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double e = m.getEntry(r, c),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[m.getRowDimension()][m.getColumnDimension()],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:10.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:10.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:10.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[m.getRowDimension()][cols.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double e = m.getEntry(r, c),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:12.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:12.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:12.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[1][m.getColumnDimension()],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[m.getRowDimension()][cols.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:14.359 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:14.359 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:14.360 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double sum = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[1][m.getColumnDimension()],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:16.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:16.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:16.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[m.getRowDimension()][m.getRowDimension()],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double sum = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:18.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:18.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:18.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[m.getRowDimension()][1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[m.getRowDimension()][m.getRowDimension()],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:21.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:21.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:21.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[n][m],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[m.getRowDimension()][1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:23.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:23.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:23.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int rd = mat.getRowDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[n][m],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:25.540 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:25.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:25.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int cd = mat.getColumnDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int rd = mat.getRowDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:27.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:27.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:27.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[n * rd][m * cd],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int cd = mat.getColumnDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:29.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:29.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:29.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int size = ((int) (((end - start) / step) + 1)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[n * rd][m * cd],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:32.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:32.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:32.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[size][1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int size = ((int) (((end - start) / step) + 1)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:34.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:34.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:34.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double value = start,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[size][1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:36.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:36.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:36.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double max = -java.lang.Double.MAX_VALUE,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double value = start,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:38.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:38.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:38.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double min = java.lang.Double.MAX_VALUE,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double max = -java.lang.Double.MAX_VALUE,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:40.891 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:40.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:40.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int[] inverse = new int[indices.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double min = java.lang.Double.MAX_VALUE,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:43.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:43.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:43.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int[] reverse = new int[indices.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] inverse = new int[indices.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:45.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:45.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:45.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] randn = new double[size],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] reverse = new int[indices.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:47.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:47.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:47.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[][] d = new double[size][popSize],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] randn = new double[size],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:50.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:50.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:50.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair[] original = getPoints(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[][] d = new double[size][popSize],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:52.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:52.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:52.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair best = original[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair[] original = getPoints(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:54.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:54.598 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:54.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair reflected = evaluateNewSimplex(evaluationFunction, 
original, 1, comparator),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair best = original[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:56.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:56.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:56.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair[] reflectedSimplex = getPoints(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair reflected = evaluateNewSimplex(evaluationFunction, 
original, 1, comparator),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:43:59.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:43:59.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:43:59.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair expanded = evaluateNewSimplex(evaluationFunction, 
original, khi, comparator),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair[] reflectedSimplex = getPoints(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:01.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:01.425 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:01.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] xSmallest = original[0].getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair expanded = evaluateNewSimplex(evaluationFunction, 
original, khi, comparator),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:03.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:03.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:03.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int dim = getDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] xSmallest = original[0].getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:05.947 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:05.948 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:05.949 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] xOriginal = original[i].getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int dim = getDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:08.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:08.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:08.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] xTransformed = new double[dim],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] xOriginal = original[i].getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:10.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:10.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:10.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] mapped = new double[mappers.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] xTransformed = new double[dim],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:12.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:12.554 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:12.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double overshoot,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] mapped = new double[mappers.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:14.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:14.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:14.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int n = getDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double overshoot,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:17.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:17.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:17.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair best = getPoint(0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int n = getDimension(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:18.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:18.935 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:18.936 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair secondBest = getPoint(n - 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair best = getPoint(0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:21.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:21.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:21.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair worst = getPoint(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair secondBest = getPoint(n - 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:22.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:22.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:22.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] xWorst = worst.getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair worst = getPoint(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:25.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:25.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:25.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] centroid = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] xWorst = worst.getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:27.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:27.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:27.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] x = getPoint(i).getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] centroid = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:29.447 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:29.447 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:29.448 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double scaling = 1.0 / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] x = getPoint(i).getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:31.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:31.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:31.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] xR = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double scaling = 1.0 / n,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:33.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:33.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:33.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair reflected = 
new org.apache.commons.math3.optimization.PointValuePair(xR, evaluationFunction.value(xR), false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] xR = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:36.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:36.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:36.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] xE = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair reflected = 
new org.apache.commons.math3.optimization.PointValuePair(xR, evaluationFunction.value(xR), false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:38.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:38.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:38.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair expanded = 
new org.apache.commons.math3.optimization.PointValuePair(xE, evaluationFunction.value(xE), false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] xE = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:40.493 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:40.493 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:40.494 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] xC = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair expanded = 
new org.apache.commons.math3.optimization.PointValuePair(xE, evaluationFunction.value(xE), false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:42.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:42.759 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:42.760 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair outContracted = 
new org.apache.commons.math3.optimization.PointValuePair(xC, evaluationFunction.value(xC), false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] xC = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:44.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:44.993 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:44.994 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair inContracted = 
new org.apache.commons.math3.optimization.PointValuePair(xC, evaluationFunction.value(xC), false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair outContracted = 
new org.apache.commons.math3.optimization.PointValuePair(xC, evaluationFunction.value(xC), false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:47.215 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:47.215 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:47.216 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] xSmallest = getPoint(0).getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair inContracted = 
new org.apache.commons.math3.optimization.PointValuePair(xC, evaluationFunction.value(xC), false),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:49.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:49.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:49.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] x = getPoint(i).getPoint(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] xSmallest = getPoint(0).getPointRef(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:51.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:51.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:51.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.GoalType goal = getGoalType(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] x = getPoint(i).getPoint(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:53.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:53.763 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:53.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] guess = getStartPoint(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.GoalType goal = getGoalType(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:55.975 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:55.975 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:55.976 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int n = guess.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] guess = getStartPoint(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:44:58.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:44:58.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:44:58.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[][] direc = new double[n][n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int n = guess.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:00.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:00.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:00.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.PointValuePair> checker = 
getConvergenceChecker(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[][] direc = new double[n][n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:02.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:02.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:02.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] x = guess,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.PointValuePair> checker = 
getConvergenceChecker(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:04.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:04.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:04.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double fVal = computeObjectiveValue(x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] x = guess,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:06.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:06.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:06.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double[] x1 = x.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double fVal = computeObjectiveValue(x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:09.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:09.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:09.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int iter = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double[] x1 = x.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:11.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:11.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:11.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double fX = fVal,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int iter = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:13.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:13.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:13.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double fX2 = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double fX = fVal,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:15.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:15.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:15.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double delta = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double fX2 = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:17.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:17.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:17.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int bigInd = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double delta = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:19.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:19.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:19.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double alphaMin = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int bigInd = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:21.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:21.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:21.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] d = org.apache.commons.math3.util.MathArrays.copyOf(direc[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double alphaMin = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:23.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:23.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:23.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimum = line.search(x, d),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] d = org.apache.commons.math3.util.MathArrays.copyOf(direc[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:25.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:25.862 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:25.863 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[][] result = newPointAndDirection(x, d, alphaMin),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimum = line.search(x, d),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:28.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:28.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:28.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: boolean stop = (2 * (fX - fVal)) <= 
((relativeThreshold * (org.apache.commons.math3.util.FastMath.abs(fX) + org.apache.commons.math3.util.FastMath.abs(fVal))) + 
absoluteThreshold),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[][] result = newPointAndDirection(x, d, alphaMin),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:30.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:30.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:30.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair previous = new org.apache.commons.math3.optimization.PointValuePair(x1, fX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: boolean stop = (2 * (fX - fVal)) <= 
((relativeThreshold * (org.apache.commons.math3.util.FastMath.abs(fX) + org.apache.commons.math3.util.FastMath.abs(fVal))) + 
absoluteThreshold),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:32.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:32.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:32.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.PointValuePair current = new org.apache.commons.math3.optimization.PointValuePair(x, fVal),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair previous = new org.apache.commons.math3.optimization.PointValuePair(x1, fX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:34.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:34.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:34.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] d = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.PointValuePair current = new org.apache.commons.math3.optimization.PointValuePair(x, fVal),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:36.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:36.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:36.560 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] x2 = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] d = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:38.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:38.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:38.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double t = 2 * ((fX + fX2) - (2 * fVal)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] x2 = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:40.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:40.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:40.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double temp = (fX - fVal) - delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double t = 2 * ((fX + fX2) - (2 * fVal)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:43.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:43.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:43.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int lastInd = n - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double temp = (fX - fVal) - delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:45.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:45.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:45.451 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final int n = p.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int lastInd = n - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:47.762 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:47.763 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:47.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[][] result = new double[2][n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final int n = p.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:49.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:49.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:49.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] nP = result[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[][] result = new double[2][n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:51.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:51.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:51.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] nD = result[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] nP = result[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:53.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:53.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:53.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double[] x = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] nD = result[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:55.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:55.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:55.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double obj = this.computeObjectiveValue(x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] x = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:45:58.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:45:58.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:45:58.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction f = new org.apache.commons.math3.analysis.UnivariateFunction() {
	public double value(double alpha) {
		final double[] x = new double[n];
		for (int i = 0; i < n; i++) {
			x[i] = p[i] + (alpha * d[i]);
		}
		final double obj = PowellOptimizer.this.computeObjectiveValue(x);
		return obj;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double obj = this.computeObjectiveValue(x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:00.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:00.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:00.579 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.analysis.MultivariateFunction evalFunc = 
new org.apache.commons.math3.analysis.MultivariateFunction() {
	public double value(double[] point) {
		return computeObjectiveValue(point);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.analysis.UnivariateFunction f = new org.apache.commons.math3.analysis.UnivariateFunction() {
	public double value(double alpha) {
		final double[] x = new double[n];
		for (int i = 0; i < n; i++) {
			x[i] = p[i] + (alpha * d[i]);
		}
		final double obj = PowellOptimizer.this.computeObjectiveValue(x);
		return obj;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:02.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:02.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:02.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final boolean isMinim = getGoalType() == org.apache.commons.math3.optimization.GoalType.MINIMIZE,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.analysis.MultivariateFunction evalFunc = 
new org.apache.commons.math3.analysis.MultivariateFunction() {
	public double value(double[] point) {
		return computeObjectiveValue(point);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:05.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:05.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:05.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double v1 = o1.getValue(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final boolean isMinim = getGoalType() == org.apache.commons.math3.optimization.GoalType.MINIMIZE,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:07.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:07.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:07.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final double v2 = o2.getValue(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double v1 = o1.getValue(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:09.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:09.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:09.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair> comparator = 
new java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair>() {
	public int compare(final org.apache.commons.math3.optimization.PointValuePair o1, final 
	org.apache.commons.math3.optimization.PointValuePair o2) {
		final double v1 = o1.getValue();
		final double v2 = o2.getValue();
		return isMinim ? java.lang.Double.compare(v1, v2) : java.lang.Double.compare(v2, v1);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double v2 = o2.getValue(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:11.420 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:11.420 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:11.421 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.optimization.PointValuePair[] previous = null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair> comparator = 
new java.util.Comparator<org.apache.commons.math3.optimization.PointValuePair>() {
	public int compare(final org.apache.commons.math3.optimization.PointValuePair o1, final 
	org.apache.commons.math3.optimization.PointValuePair o2) {
		final double v1 = o1.getValue();
		final double v2 = o2.getValue();
		return isMinim ? java.lang.Double.compare(v1, v2) : java.lang.Double.compare(v2, v1);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:13.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:13.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:13.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: int iteration = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.optimization.PointValuePair[] previous = null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:15.789 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:15.789 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:15.790 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: final org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.PointValuePair> checker = getConvergenceChecker(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int iteration = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:17.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:17.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:17.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: boolean converged = true,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.PointValuePair> checker = getConvergenceChecker(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:19.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:19.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:19.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.optimization.PointValuePair prev = previous[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: boolean converged = true,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:22.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:22.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:22.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] vertexI = startConfiguration[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:24.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:24.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:24.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] ref0 = referenceSimplex[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:26.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:26.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:26.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] refJ = referenceSimplex[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:28.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:28.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:28.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double[] vertexI = new double[dimension],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:31.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:31.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:31.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double value = bobyqa(lowerBound, upperBound),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:33.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:33.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:33.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double crvmin = java.lang.Double.NaN,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:35.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:35.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:35.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double deltaOne = delta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:37.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:37.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:37.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: final double d2 = java.lang.Math.min(org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.ZERO, sum),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:39.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:39.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:39.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: double d2 = s.getEntry(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:42.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:42.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:42.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix bestArx = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arx, org.apache.commons.math3.util.MathArrays.copyOf(arindex, mu)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:44.169 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:44.169 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:44.170 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: boolean hsig = ((normps / 
java.lang.Math.sqrt(1.0 - java.lang.Math.pow(1.0 - cs, 2.0 * iterations))) / 
chiN) < (1.4 + (2.0 / (dimension + 1.0))),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:46.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:46.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:46.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: int[] idxnorms = sortedIndices(arnorms.getRow(0)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:48.331 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:48.331 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:48.332 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix arnormsInv = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxInv),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:50.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:50.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:50.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.RealMatrix Cneg = artmp.multiply(org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(weights)).multiply(
artmp.transpose()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: Use non-deprecated ctor.

08:46:52.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:52.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:52.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: double tfac = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD) / 1.0E14,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.001904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

08:46:54.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:46:54.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:46:54.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.001904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: break, commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, ingB: {code: org.apache.commons.math3.optimization.PointValuePair prev = previous[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:08.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:08.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:08.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.topDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.abscissae = new java.util.ArrayList<java.lang.Double>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:10.664 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:10.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:10.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bottomDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.topDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:12.920 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:12.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:12.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] y = value[i].clone(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bottomDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:15.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:15.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:15.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] y = value[i].clone(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:17.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:17.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:17.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: y[j] *= inv,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:19.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:19.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:19.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: y[j] *= inv,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:21.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:21.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:21.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:23.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:23.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:23.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = abscissae.size(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:26.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:26.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:26.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottomDiagonal.add(n - i, y),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = abscissae.size(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:28.337 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:28.337 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:28.338 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] bottom0 = y,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottomDiagonal.add(n - i, y),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:30.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:30.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:30.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] bottom0 = y,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:32.598 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:32.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:32.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:34.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:34.761 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:34.762 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:36.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:36.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:36.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
	x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:39.008 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:39.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:39.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
	x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:41.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:41.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:41.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:43.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:43.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:43.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:45.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:45.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:45.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
		x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:47.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:47.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:47.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
		x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:49.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:49.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:49.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:52.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:52.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:52.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
			x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:54.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:54.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:54.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: checkInterpolation(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
			x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:56.306 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:56.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:56.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction zero = polynomial(0),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: checkInterpolation(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:48:58.477 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:48:58.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:48:58.478 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction zero = polynomial(0),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:00.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:00.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:00.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: polynomials[i] = zero,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:02.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:02.533 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:02.534 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < polynomials.length; ++i) {
	polynomials[i] = zero;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: polynomials[i] = zero,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:04.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:04.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:04.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction coeff = polynomial(1),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < polynomials.length; ++i) {
	polynomials[i] = zero;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:06.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:06.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:06.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] tdi = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction coeff = polynomial(1),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:08.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:08.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:08.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k]))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] tdi = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:10.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:10.980 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:10.981 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < polynomials.length; ++k) {
	polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k]))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:13.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:13.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:13.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < polynomials.length; ++k) {
	polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:15.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:15.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:15.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] tdi = topDiagonal.get(i);
	for (int k = 0; k < polynomials.length; ++k) {
		polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:17.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:17.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:17.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] tdi = topDiagonal.get(i);
	for (int k = 0; k < polynomials.length; ++k) {
		polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:19.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:19.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:19.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] value = new double[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:21.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:21.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:21.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double valueCoeff = 1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] value = new double[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:23.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:23.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:23.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] dividedDifference = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double valueCoeff = 1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:25.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:25.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:25.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: value[k] += dividedDifference[k] * valueCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] dividedDifference = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:28.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:28.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:28.189 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] += dividedDifference[k] * valueCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:30.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:30.193 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:30.194 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double deltaX = x - abscissae.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:32.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:32.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:32.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff *= deltaX,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaX = x - abscissae.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:34.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:34.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:34.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: valueCoeff *= deltaX,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:36.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:36.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:36.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:38.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:38.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:38.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] derivative = new double[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:40.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:40.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:40.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double derivativeCoeff = 0,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] derivative = new double[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:43.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:43.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:43.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: derivative[k] += dividedDifference[k] * derivativeCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double derivativeCoeff = 0,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:45.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:45.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:45.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < derivative.length; ++k) {
	derivative[k] += dividedDifference[k] * derivativeCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: derivative[k] += dividedDifference[k] * derivativeCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:47.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:47.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:47.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: derivativeCoeff = valueCoeff + (derivativeCoeff * deltaX),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < derivative.length; ++k) {
	derivative[k] += dividedDifference[k] * derivativeCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:49.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:49.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:49.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < derivative.length; ++k) {
		derivative[k] += dividedDifference[k] * derivativeCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	derivativeCoeff = valueCoeff + (derivativeCoeff * deltaX);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: derivativeCoeff = valueCoeff + (derivativeCoeff * deltaX),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:51.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:51.551 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:51.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return derivative,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < derivative.length; ++k) {
		derivative[k] += dividedDifference[k] * derivativeCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	derivativeCoeff = valueCoeff + (derivativeCoeff * deltaX);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:53.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:53.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:53.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return derivative(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return derivative,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:55.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:55.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:55.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.UnivariateVectorFunction() {


	public double[] value(double x) {
		return derivative(x);
	}

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return derivative(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:57.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:57.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:57.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathIllegalStateException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.analysis.UnivariateVectorFunction() {


	public double[] value(double x) {
		return derivative(x);
	}

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:49:59.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:49:59.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:49:59.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.MathIllegalStateException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathIllegalStateException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

08:50:01.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:50:01.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:50:01.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.MathIllegalStateException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:23.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:23.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:23.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:25.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:25.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:25.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:27.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:27.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:27.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:29.350 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:29.350 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:29.351 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:31.540 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:31.540 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:31.541 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:33.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:33.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:33.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:35.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:35.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:35.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:37.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:37.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:37.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:39.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:39.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:39.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:41.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:41.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:41.452 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:43.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:43.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:43.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

08:51:45.541 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:45.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:45.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:51:47.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:47.472 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:47.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:51:49.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:49.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:49.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:51:51.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:51.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:51.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:51:53.087 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:53.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:53.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:51:54.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:54.961 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:54.962 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:51:56.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:56.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:56.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:51:58.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:51:58.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:51:58.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:00.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:00.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:00.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:02.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:02.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:02.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:05.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:05.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:05.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:07.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:07.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:07.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:09.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:09.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:09.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:11.087 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:11.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:11.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:13.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:13.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:13.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:15.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:15.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:15.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:16.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:16.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:16.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:18.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:18.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:18.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:20.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:20.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:20.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:22.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:22.803 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:22.804 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[2][2] - ort[0][0]) - ort[1][1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:24.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:24.957 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:24.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[2][2] - ort[0][0]) - ort[1][1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:27.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:27.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:27.095 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:29.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:29.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:29.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:31.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:31.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:31.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:33.544 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:33.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:33.545 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:35.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:35.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:35.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:37.636 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:37.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:37.637 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[1];
	quat[0] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[0][2] + ort[2][0]);
} else {
	s = (ort[1][1] - ort[0][0]) - ort[2][2];
	if (s > (-0.19)) {

		quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[2];
		quat[0] = inv * (ort[2][0] - ort[0][2]);
		quat[1] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[2][1] + ort[1][2]);
	} else {

		s = (ort[2][2] - ort[0][0]) - ort[1][1];
		quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[3];
		quat[0] = inv * (ort[0][1] - ort[1][0]);
		quat[1] = inv * (ort[0][2] + ort[2][0]);
		quat[2] = inv * (ort[2][1] + ort[1][2]);
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:39.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:39.521 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:39.522 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[1];
	quat[0] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[0][2] + ort[2][0]);
} else {
	s = (ort[1][1] - ort[0][0]) - ort[2][2];
	if (s > (-0.19)) {

		quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[2];
		quat[0] = inv * (ort[2][0] - ort[0][2]);
		quat[1] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[2][1] + ort[1][2]);
	} else {

		s = (ort[2][2] - ort[0][0]) - ort[1][1];
		quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[3];
		quat[0] = inv * (ort[0][1] - ort[1][0]);
		quat[1] = inv * (ort[0][2] + ort[2][0]);
		quat[2] = inv * (ort[2][1] + ort[1][2]);
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

08:52:41.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:52:41.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:52:41.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: if (facet != null) {
	return facet;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:53:59.558 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:53:59.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:53:59.559 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterize(node.getMinus(), plusChar[0], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[] minusChar = ((org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[]) (java.lang.reflect.Array.newInstance(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class, 2))),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:01.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:01.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:01.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusOutside = minusChar[1],commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: characterize(node.getMinus(), plusChar[0], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:03.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:03.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:03.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((minusChar[1] != null) && (!minusChar[1].isEmpty())) {


	plusOutside = minusChar[1];
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusOutside = minusChar[1],commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:05.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:05.633 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:05.634 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((plusChar[0] != null) && (!plusChar[0].isEmpty())) {



	@java.lang.SuppressWarnings("unchecked")
	final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[] minusChar = ((org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[]) (java.lang.reflect.Array.newInstance(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class, 2)));
	characterize(node.getMinus(), plusChar[0], minusChar);
	if ((minusChar[1] != null) && (!minusChar[1].isEmpty())) {


		plusOutside = minusChar[1];
	}
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((minusChar[1] != null) && (!minusChar[1].isEmpty())) {


	plusOutside = minusChar[1];
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:07.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:07.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:07.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterize(node.getMinus(), plusChar[1], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((plusChar[0] != null) && (!plusChar[0].isEmpty())) {



	@java.lang.SuppressWarnings("unchecked")
	final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[] minusChar = ((org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[]) (java.lang.reflect.Array.newInstance(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class, 2)));
	characterize(node.getMinus(), plusChar[0], minusChar);
	if ((minusChar[1] != null) && (!minusChar[1].isEmpty())) {


		plusOutside = minusChar[1];
	}
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:09.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:09.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:09.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusInside = minusChar[0],commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: characterize(node.getMinus(), plusChar[1], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:11.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:11.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:11.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((minusChar[0] != null) && (!minusChar[0].isEmpty())) {


	plusInside = minusChar[0];
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusInside = minusChar[0],commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:13.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:13.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:13.903 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((plusChar[1] != null) && (!plusChar[1].isEmpty())) {



	@java.lang.SuppressWarnings("unchecked")
	final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[] minusChar = ((org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[]) (java.lang.reflect.Array.newInstance(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class, 2)));
	characterize(node.getMinus(), plusChar[1], minusChar);
	if ((minusChar[0] != null) && (!minusChar[0].isEmpty())) {


		plusInside = minusChar[0];
	}
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((minusChar[0] != null) && (!minusChar[0].isEmpty())) {


	plusInside = minusChar[0];
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:15.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:15.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:15.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterization[1] = sub,commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final boolean inside = ((java.lang.Boolean) (node.getAttribute())),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:17.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:17.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:17.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterization[1] = characterization[1].reunite(sub),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: characterization[1] = sub,commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:19.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:19.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:19.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (characterization[1] == null) {
	characterization[1] = sub;
} else {
	characterization[1] = characterization[1].reunite(sub);
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: characterization[1] = characterization[1].reunite(sub),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:21.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:21.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:21.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterization[0] = sub,commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (characterization[1] == null) {
	characterization[1] = sub;
} else {
	characterization[1] = characterization[1].reunite(sub);
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:23.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:23.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:23.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterization[0] = characterization[0].reunite(sub),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: characterization[0] = sub,commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:26.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:26.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:26.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (characterization[0] == null) {
	characterization[0] = sub;
} else {
	characterization[0] = characterization[0].reunite(sub);
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: characterization[0] = characterization[0].reunite(sub),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:27.970 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:27.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:27.971 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inside) {
	if (characterization[1] == null) {
		characterization[1] = sub;
	} else {
		characterization[1] = characterization[1].reunite(sub);
	}
} else 
if (characterization[0] == null) {
	characterization[0] = sub;
} else {
	characterization[0] = characterization[0].reunite(sub);
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (characterization[0] == null) {
	characterization[0] = sub;
} else {
	characterization[0] = characterization[0].reunite(sub);
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:30.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:30.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:30.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane = node.getCut().getHyperplane(),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inside) {
	if (characterization[1] == null) {
		characterization[1] = sub;
	} else {
		characterization[1] = characterization[1].reunite(sub);
	}
} else 
if (characterization[0] == null) {
	characterization[0] = sub;
} else {
	characterization[0] = characterization[0].reunite(sub);
},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:31.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:31.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:32.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (sub.side(hyperplane)) {
	case PLUS :
		characterize(node.getPlus(), sub, characterization);
		break;
	case MINUS :
		characterize(node.getMinus(), sub, characterization);
		break;
	case BOTH :
		final org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
		characterize(node.getPlus(), split.getPlus(), characterization);
		characterize(node.getMinus(), split.getMinus(), characterization);
		break;
	default :

		throw new org.apache.commons.math3.exception.MathInternalError();},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane = node.getCut().getHyperplane(),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

08:54:33.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:54:33.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:54:33.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.getCut() == null) {

	final boolean inside = ((java.lang.Boolean) (node.getAttribute()));
	if (inside) {
		if (characterization[1] == null) {
			characterization[1] = sub;
		} else {
			characterization[1] = characterization[1].reunite(sub);
		}
	} else 
	if (characterization[0] == null) {
		characterization[0] = sub;
	} else {
		characterization[0] = characterization[0].reunite(sub);
	}

} else {
	final org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane = node.getCut().getHyperplane();
	switch (sub.side(hyperplane)) {
		case PLUS :
			characterize(node.getPlus(), sub, characterization);
			break;
		case MINUS :
			characterize(node.getMinus(), sub, characterization);
			break;
		case BOTH :
			final org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
			characterize(node.getPlus(), split.getPlus(), characterization);
			characterize(node.getMinus(), split.getMinus(), characterization);
			break;
		default :

			throw new org.apache.commons.math3.exception.MathInternalError();}

},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: switch (sub.side(hyperplane)) {
	case PLUS :
		characterize(node.getPlus(), sub, characterization);
		break;
	case MINUS :
		characterize(node.getMinus(), sub, characterization);
		break;
	case BOTH :
		final org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
		characterize(node.getPlus(), split.getPlus(), characterization);
		characterize(node.getMinus(), split.getMinus(), characterization);
		break;
	default :

		throw new org.apache.commons.math3.exception.MathInternalError();},commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: "final", formatting.
, ingredientB: "final", formatting.

08:56:54.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:54.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:54.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] cov = getCovariances(),commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] sig = new double[cols],commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

08:56:56.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:56.640 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:56.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]),commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] cov = getCovariances(),commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.

08:56:58.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:56:58.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:56:58.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < sig.length; ++i) {
	sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]);
},commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]),commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.

08:57:00.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:00.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:00.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return sig,commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < sig.length; ++i) {
	sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]);
},commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

08:57:03.123 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:03.123 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:03.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]),commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] cov = getCovariances(),commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

08:57:05.076 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:05.076 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:05.077 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]),commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] sig = new double[cols],commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: "final", formatting.
, ingredientB: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.

08:57:07.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:07.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:07.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] cov = getCovariances(),commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return sig,commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

08:57:09.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:09.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:09.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < sig.length; ++i) {
	sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]);
},commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] sig = new double[cols],commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

08:57:10.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:57:10.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:57:10.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return sig,commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: for (int i = 0; i < cols; ++i) {
	for (int j = i; j < cols; ++j) {
		double sum = 0;
		for (int k = 0; k < rows; ++k) {
			sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
		}
		jTj[i][j] = sum;
		jTj[j][i] = sum;
	}
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] sig = new double[cols],commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:105) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: avoid division by zero when dealing with single-point intervals sets
, ingredientB: avoid division by zero when dealing with single-point intervals sets

08:58:25.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:25.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:25.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation()),commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: setBarycenter(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(sum / size)),commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: avoid division by zero when dealing with single-point intervals sets
, ingredientB: avoid division by zero when dealing with single-point intervals sets

08:58:27.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:27.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:27.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (size >= org.apache.commons.math3.util.Precision.SAFE_MIN) {
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(sum / size));
} else {
	setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation());
},commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation()),commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:120) - ingredientA: avoid division by zero when dealing with single-point intervals sets
, ingredientB: avoid division by zero when dealing with single-point intervals sets

08:58:29.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
08:58:29.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
08:58:29.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:127) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(size)) {
	setBarycenter(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN);
} else if (size >= org.apache.commons.math3.util.Precision.SAFE_MIN) {
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(sum / size));
} else {
	setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation());
},commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:133) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (size >= org.apache.commons.math3.util.Precision.SAFE_MIN) {
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(sum / size));
} else {
	setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation());
},commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:97) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:91) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.belowMaxTime(AstorCoreEngine.java:278) - 
 No more time for operating
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 7205.258
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1167
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 9788.927


Node: e1b6217beec4



Date: Mon Nov 25 10:27:43 EST 2019

cd /script/jGenProg_Defects4J_Math_28;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-28 \
	-failing org.apache.commons.math3.optimization.linear.SimplexSolverTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_28/target/classes/:/script/jGenProg_Defects4J_Math_28/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

