Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 23:31:14,939 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 23:31:14,945 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 23:31:14,946 main:382 - The compliance of the JVM is:  7
[INFO] 23:31:14,949 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-20  -failing  org.apache.commons.math3.optimization.direct.CMAESOptimizerTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_20/target/classes/:/script/jGenProg_Defects4J_Math_20/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 23:31:14,954 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_20/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_20/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 674
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_20/./output_astor/AstorMain-Math-20//bin//default from 674 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_20/./output_astor/AstorMain-Math-20//bin//default, /script/jGenProg_Defects4J_Math_20/target/classes/, /script/jGenProg_Defects4J_Math_20/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testSampling
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetCovarianceMatrix
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SqrtTest#testDerivativesHighOrder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4177, fails: 86, GZoltar suspicious 28944, with positive susp 4186
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4177
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 4860500 milliseconds (4860 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_20/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_20/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_20/target/classes/, /script/jGenProg_Defects4J_Math_20/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 617
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.1617491598051576]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.1617491598051576]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.1617491598051576]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.1617491598051576]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem$Model, methodName=value(D)D, lineNumber=150, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=79, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=80, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=81, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=83, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=92, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=93, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=94, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=96, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=54, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=55, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=74, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=75, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=76, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=77, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=80, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=target()[D, lineNumber=84, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=88, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=89, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=90, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=91, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=94, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=98, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=101, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=102, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=103, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=104, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=107, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=127, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=128, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=129, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=130, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=132, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=133, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=316, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=319, susp=0.15249857033260467]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.12688648033134406]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.12688648033134406]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=70, susp=0.12451456127293807]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=72, susp=0.12451456127293807]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=77, susp=0.12451456127293807]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.11242343760332196]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  338
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 338
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 338, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_20/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 4860500
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.optimization.direct.CMAESOptimizerTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-20
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_20/target/classes/:/script/jGenProg_Defects4J_Math_20/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
00:25:52.518 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
00:25:53.931 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
00:25:54.701 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
00:25:54.707 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
00:25:54.707 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
00:25:54.707 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
00:25:55.229 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:25:58.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:58.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:58.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.topDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.abscissae = new java.util.ArrayList<java.lang.Double>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:00.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:00.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:00.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bottomDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.topDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:02.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:02.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:02.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] y = value[i].clone(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bottomDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:05.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:05.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:05.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] y = value[i].clone(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:07.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:07.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:07.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: y[j] *= inv,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:09.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:09.912 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:09.913 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: y[j] *= inv,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:12.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:12.319 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:12.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:14.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:14.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:14.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = abscissae.size(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:17.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:17.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:17.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottomDiagonal.add(n - i, y),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = abscissae.size(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:19.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:19.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:19.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] bottom0 = y,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottomDiagonal.add(n - i, y),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:21.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:21.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:21.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] bottom0 = y,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:23.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:23.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:23.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:25.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:25.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:25.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:26:28.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:28.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:28.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:30.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:30.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:30.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:33.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:33.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:33.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:26:35.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:35.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:35.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:37.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:37.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:37.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:40.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:40.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:40.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:42.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:42.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:42.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:44.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:44.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:44.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:26:47.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:47.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:47.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:49.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:49.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:49.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = abscissae.size(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:51.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:51.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:51.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double inv = 1.0 / (x - abscissae.get(n - (j + 1))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:53.790 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:53.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:53.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:26:56.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:56.106 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:56.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:57.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:57.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:57.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = abscissae.size(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:26:59.895 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:59.895 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:59.896 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:02.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:02.136 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:02.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:27:04.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:04.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:04.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:06.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:06.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:06.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottomDiagonal.add(n - i, y),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:09.200 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:09.201 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:09.202 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:11.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:11.346 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:11.347 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom0 = bottom1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:27:13.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:13.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:13.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:15.479 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:15.480 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:15.481 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottomDiagonal.add(n - i, y),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:17.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:17.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:17.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:19.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:19.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:19.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:27:22.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:22.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:22.472 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:24.762 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:24.763 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:24.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:27.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:27.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:27.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: checkInterpolation(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:29.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:29.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:29.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction zero = polynomial(0),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: checkInterpolation(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:31.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:31.160 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:31.161 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction zero = polynomial(0),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:33.059 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:33.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:33.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: polynomials[i] = zero,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:34.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:34.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:34.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < polynomials.length; ++i) {
	polynomials[i] = zero;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: polynomials[i] = zero,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:36.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:36.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:36.918 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction coeff = polynomial(1),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < polynomials.length; ++i) {
	polynomials[i] = zero;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:39.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:39.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:39.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] tdi = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction coeff = polynomial(1),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:41.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:41.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:41.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k]))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] tdi = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:43.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:43.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:43.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < polynomials.length; ++k) {
	polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k]))),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:46.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:46.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:46.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < polynomials.length; ++k) {
	polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:48.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:48.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:48.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] tdi = topDiagonal.get(i);
	for (int k = 0; k < polynomials.length; ++k) {
		polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:51.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:51.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:51.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] tdi = topDiagonal.get(i);
	for (int k = 0; k < polynomials.length; ++k) {
		polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:53.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:53.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:53.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] value = new double[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:55.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:55.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:55.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double valueCoeff = 1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] value = new double[topDiagonal.get(0).length],commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:57.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:57.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:57.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] dividedDifference = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double valueCoeff = 1,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:27:59.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:59.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:59.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: value[k] += dividedDifference[k] * valueCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] dividedDifference = topDiagonal.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:02.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:02.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:02.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] += dividedDifference[k] * valueCoeff,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:04.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:04.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:04.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double deltaX = x - abscissae.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:07.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:07.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:07.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff *= deltaX,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaX = x - abscissae.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:09.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:09.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:09.696 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: valueCoeff *= deltaX,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:11.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:11.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:11.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:14.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:14.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:14.161 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:16.330 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:16.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:16.331 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: java.util.Arrays.fill(value, x.getField().getZero()),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:18.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:18.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:18.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure valueCoeff = x.getField().getOne(),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.Arrays.fill(value, x.getField().getZero()),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:20.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:20.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:20.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure valueCoeff = x.getField().getOne(),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:22.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:22.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:22.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k < value.length; ++k) {
	value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
},commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:24.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:24.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:24.400 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i)),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < value.length; ++k) {
	value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
},commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:26.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:26.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:26.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i)),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:28.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:28.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:28.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:31.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:31.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:31.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.abscissae = new java.util.ArrayList<java.lang.Double>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:33.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:33.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:33.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.topDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:36.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:36.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:36.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] y = value[i].clone(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:38.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:38.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:38.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 1) {
	double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int j = 0; j < y.length; ++j) {
		y[j] *= inv;
	}
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:40.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:40.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:40.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:42.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:42.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:42.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: topDiagonal.add(bottom0.clone()),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:44.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:44.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:44.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: abscissae.add(x),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:46.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:46.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:46.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:48.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:48.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:48.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i)),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:50.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:50.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:50.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:52.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:52.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:52.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:54.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:54.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:54.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.Arrays.fill(value, x.getField().getZero()),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:28:56.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:56.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:56.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:28:58.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:58.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:58.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:00.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:00.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:00.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:02.583 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:02.583 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:02.584 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:29:04.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:04.557 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:04.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:29:06.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:06.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:06.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:08.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:08.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:08.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-854 Populate "throws" clause.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:10.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:10.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:10.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-854 Populate "throws" clause.
}, sim: 0.022312
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-854 Populate "throws" clause.
, ingredientB: Added Hermite interpolator.

00:29:12.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:12.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:12.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-854 Populate "throws" clause.
}, sim: 0.022312
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-854 Populate "throws" clause.
, ingredientB: Added Hermite interpolator.

00:29:14.564 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:14.564 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:14.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-854 Populate "throws" clause.
}, sim: 0.022312
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-854 Populate "throws" clause.
, ingredientB: Added Hermite interpolator.

00:29:16.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:16.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:16.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-854 Populate "throws" clause.
}, sim: 0.022312
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.abscissae = new java.util.ArrayList<java.lang.Double>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:18.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:18.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:18.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:29:20.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:20.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:20.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added arbitrary differentiation order for Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:29:22.150 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:22.150 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:22.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: valueCoeff = valueCoeff.multiply(deltaX),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:24.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:24.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:24.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i)),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:26.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:26.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:26.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k < value.length; ++k) {
	value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
},commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:28.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:28.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:28.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:29.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:29.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:29.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure valueCoeff = x.getField().getOne(),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:31.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:31.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:31.959 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.Arrays.fill(value, x.getField().getZero()),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:34.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:34.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:34.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:29:35.975 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:35.975 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:35.976 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:29:37.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:37.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:37.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:29:39.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:39.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:39.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

00:29:41.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:41.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:41.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Hermite interpolator.
, ingredientB: MATH-854 Populate "throws" clause.

00:29:43.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:43.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:43.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return value,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-854 Populate "throws" clause.
}, sim: 0.022312
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:29:45.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:45.448 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:45.449 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] h = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:29:47.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:47.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:47.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] mu = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] h = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:29:49.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:49.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:49.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] z = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] mu = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:29:51.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:51.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:51.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] b = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] z = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:29:53.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:53.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:53.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] c = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] z = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:29:55.041 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:55.041 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:55.042 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] c = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] b = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:29:57.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:57.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:57.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] d = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] z = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:29:59.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:59.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:59.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] d = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] c = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:30:00.928 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:00.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:00.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:30:02.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:02.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:02.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] h = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:30:04.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:04.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:04.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] z = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:30:06.846 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:06.847 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:06.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] c = new double[n + 1],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: "final" keyword.

00:30:08.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:08.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:08.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] d = new double[n],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: MATH-854 Populate "throws" clause.

00:30:11.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:11.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:11.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-854 Populate "throws" clause.
}, sim: 0.022312
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added Hermite interpolator.

00:30:13.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:13.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:13.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.abscissae = new java.util.ArrayList<java.lang.Double>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added Hermite interpolator.

00:30:16.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:16.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:16.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bottomDiagonal = new java.util.ArrayList<double[]>(),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added Hermite interpolator.

00:30:18.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:18.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:18.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added Hermite interpolator.

00:30:20.652 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:20.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:20.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bottom1[k] = inv * (bottom0[k] - bottom1[k]),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added Hermite interpolator.

00:30:23.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:23.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:23.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0)),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:30:25.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:25.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:25.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added Hermite interpolator.

00:30:27.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:27.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:27.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaX = x - abscissae.get(i),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added Hermite interpolator.

00:30:29.404 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:29.404 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:29.405 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i));
	valueCoeff = valueCoeff.multiply(deltaX);
},commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added Hermite interpolator.

00:30:31.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:31.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:31.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:30:33.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:33.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:33.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.length - 1,commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:30:35.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:35.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:35.502 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k])),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:30:37.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:37.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:37.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.Arrays.fill(value, x.getField().getZero()),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:30:39.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:39.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:39.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length],commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final" keyword.
, ingredientB: Added arbitrary differentiation order for Hermite interpolator.

00:30:42.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:42.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:42.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] coefficients = new double[4],commit: "final" keyword.
}, sim: -0.169335
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double z2 = z * z, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x),commit: Added arbitrary differentiation order for Hermite interpolator.
}, sim: -0.195160
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:09.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:09.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:09.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(zero, zero.subtract(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:12.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:12.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:12.050 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:14.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:14.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:14.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u = w.orthogonal(),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: origin = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(-originOffset, w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:16.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:16.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:16.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u = w.orthogonal(),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:19.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:19.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:19.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:21.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:21.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:21.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) && (org.apache.commons.math3.util.FastMath.abs(originOffset - plane.originOffset) < 1.0E-10)) || 
((angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10)) && (org.apache.commons.math3.util.FastMath.abs(originOffset + plane.originOffset) < 1.0E-10)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:24.364 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:24.364 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:24.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) && (org.apache.commons.math3.util.FastMath.abs(originOffset - plane.originOffset) < 1.0E-10)) || 
((angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10)) && (org.apache.commons.math3.util.FastMath.abs(originOffset + plane.originOffset) < 1.0E-10)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:26.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:26.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:26.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((angle < 1.0E-10) && (org.apache.commons.math3.util.FastMath.abs(originOffset - plane.originOffset) < 1.0E-10)) || 
((angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10)) && (org.apache.commons.math3.util.FastMath.abs(originOffset + plane.originOffset) < 1.0E-10)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:28.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:28.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:28.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((angle < 1.0E-10) && (org.apache.commons.math3.util.FastMath.abs(originOffset - plane.originOffset) < 1.0E-10)) || 
((angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10)) && (org.apache.commons.math3.util.FastMath.abs(originOffset + plane.originOffset) < 1.0E-10)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:31.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:31.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:31.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:33.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:33.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:33.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.u = rotation.applyTo(u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:35.636 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:35.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:35.637 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.u = rotation.applyTo(u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:37.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:37.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:37.647 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.v = rotation.applyTo(v),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:40.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:40.136 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:40.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.v = rotation.applyTo(v),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.u = rotation.applyTo(u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:42.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:42.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:42.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return plane,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:44.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:44.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:44.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return plane,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.v = rotation.applyTo(v),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:46.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:46.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:46.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.u = u,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:48.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:48.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:48.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plane.v = v,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.u = u,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:51.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:51.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:51.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.v = v,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:53.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:53.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:53.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (direction.getNorm() < 1.0E-10) {
	return null;
},commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.v = v,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:55.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:55.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:55.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (direction.getNorm() < 1.0E-10) {
	return null;
},commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:57.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:57.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:57.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:32:59.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:59.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:59.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (direction.getNorm() < 1.0E-10) {
	return null;
},commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:01.479 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:01.479 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:01.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(point, point.add(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:03.410 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:03.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:03.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(point, point.add(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:05.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:05.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:05.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: origin = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(-originOffset, w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:07.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:07.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:07.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u = w.orthogonal(),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:09.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:09.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:09.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:11.679 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:11.679 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:11.680 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.u = rotation.applyTo(u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:14.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:14.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:14.109 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return plane,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:16.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:16.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:16.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:18.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:18.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:18.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:21.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:21.472 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:21.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:23.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:23.439 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:23.440 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:25.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:25.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:25.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:27.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:27.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:27.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:29.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:29.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:29.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:32.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:32.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:32.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:34.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:34.243 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:34.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: origin = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(-originOffset, w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:36.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:36.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:36.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u = w.orthogonal(),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:39.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:39.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:39.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:41.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:41.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:41.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.u = rotation.applyTo(u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:43.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:43.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:43.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:45.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:45.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:45.400 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(point, point.add(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

00:33:47.369 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:47.369 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:47.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

00:33:49.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:49.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:49.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Populate throws declarations for geometry package.

00:33:51.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:51.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:51.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:53.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:53.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:53.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:55.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:55.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:55.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return boundary.getTree(false),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:33:58.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:58.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:58.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return boundary.getTree(false),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:00.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:00.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:00.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return boundary.getTree(false),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Populate throws declarations for geometry package.

00:34:03.049 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:03.049 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:03.050 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return boundary.getTree(false),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:05.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:05.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:05.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: origin = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(-originOffset, w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:07.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:07.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:07.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (direction.getNorm() < 1.0E-10) {
	return null;
},commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:09.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:09.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:09.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:11.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:11.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:11.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:14.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:14.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:14.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:16.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:16.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:16.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return boundary.getTree(false),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Populate throws declarations for geometry package.

00:34:19.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:19.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:19.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Populate throws declarations for geometry package.

00:34:21.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:21.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:21.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:23.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:23.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:23.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:26.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:26.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:26.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:28.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:28.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:28.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:30.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:30.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:30.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:33.271 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:33.271 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:33.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.u = rotation.applyTo(u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:35.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:35.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:35.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:38.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:38.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:38.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u = w.orthogonal(),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:40.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:40.574 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:40.575 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: origin = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(-originOffset, w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:42.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:42.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:42.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(zero, zero.subtract(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:45.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:45.222 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:45.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:47.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:47.693 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:47.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:49.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:49.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:49.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return boundary.getTree(false),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:52.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:52.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:52.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:54.804 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:54.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:54.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:57.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:57.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:57.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:34:59.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:59.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:59.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:35:01.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:01.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:01.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: origin = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(-originOffset, w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Populate throws declarations for geometry package.

00:35:03.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:03.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:03.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Populate throws declarations for geometry package.

00:35:06.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:06.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:06.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:35:08.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:08.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:08.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:35:10.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:10.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:10.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(zero, zero.subtract(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:12.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:12.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:12.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:14.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:14.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:14.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:16.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:16.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:16.478 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:18.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:18.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:18.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:20.369 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:20.369 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:20.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:22.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:22.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:22.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:24.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:24.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:24.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:27.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:27.356 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:27.357 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:29.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:29.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:29.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:31.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:31.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:31.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:34.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:34.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:34.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:36.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:36.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:36.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:38.163 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:38.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:38.164 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:40.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:40.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:40.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:42.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:42.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:42.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:44.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:44.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:44.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:46.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:46.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:46.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:48.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:48.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:48.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:50.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:50.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:50.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:52.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:52.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:52.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:54.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:54.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:54.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:56.235 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:56.235 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:56.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:35:58.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:58.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:58.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Populate throws declarations for geometry package.

00:36:00.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:00.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:00.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:36:02.365 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:02.365 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:02.366 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:36:04.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:04.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:04.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:06.308 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:06.308 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:06.309 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:08.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:08.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:08.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:10.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:10.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:10.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:12.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:12.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:12.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:14.042 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:14.042 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:14.043 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:16.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:16.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:16.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:19.059 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:19.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:19.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q1 = composed.q1,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:21.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:21.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:21.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q1 = composed.q1,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:23.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:23.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:23.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q2 = composed.q2,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:25.861 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:25.861 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:25.862 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q2 = composed.q2,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = composed.q1,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:27.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:27.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:27.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:30.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:30.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:30.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = composed.q2,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:32.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:32.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:32.268 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:34.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:34.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:34.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:37.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:37.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:37.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:39.603 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:39.603 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:39.604 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:41.722 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:41.722 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:41.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:43.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:43.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:43.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:45.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:45.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:45.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:36:48.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:48.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:48.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:50.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:50.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:50.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:52.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:52.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:52.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:36:55.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:55.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:55.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:57.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:57.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:57.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:36:59.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:59.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:59.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:01.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:01.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:01.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:04.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:04.049 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:04.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:06.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:06.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:06.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:09.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:09.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:09.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:11.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:11.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:11.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:13.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:13.517 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:13.518 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:15.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:15.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:15.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:17.875 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:17.876 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:17.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:20.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:20.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:20.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:22.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:22.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:22.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:24.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:24.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:24.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:26.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:26.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:26.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:28.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:28.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:28.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:30.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:30.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:30.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:32.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:32.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:32.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:34.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:34.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:34.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:36.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:36.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:36.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:38.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:38.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:38.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:40.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:40.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:40.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:42.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:42.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:42.271 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:44.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:44.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:44.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:47.059 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:47.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:47.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:37:49.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:49.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:49.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:51.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:51.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:51.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:53.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:53.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:53.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:55.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:55.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:55.930 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:37:57.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:57.862 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:57.863 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:00.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:00.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:00.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:02.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:02.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:02.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:04.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:04.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:04.186 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:06.099 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:06.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:06.100 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:08.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:08.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:08.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:10.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:10.119 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:10.120 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:12.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:12.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:12.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:14.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:14.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:14.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:16.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:16.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:16.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:18.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:18.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:18.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:20.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:20.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:20.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:22.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:22.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:22.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:24.063 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:24.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:24.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:25.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:25.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:26.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:27.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:27.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:27.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:29.928 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:29.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:29.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:31.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:31.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:31.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:38:33.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:33.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:33.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:35.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:35.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:35.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:37.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:37.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:37.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:39.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:39.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:39.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:41.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:41.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:41.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:43.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:43.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:43.455 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:45.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:45.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:45.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[2][2] - ort[0][0]) - ort[1][1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:47.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:47.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:47.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[2][2] - ort[0][0]) - ort[1][1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:49.652 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:49.652 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:49.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:52.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:52.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:52.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:54.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:54.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:54.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:56.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:56.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:56.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:38:58.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:58.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:58.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:39:00.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:00.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:00.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[1];
	quat[0] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[0][2] + ort[2][0]);
} else {
	s = (ort[1][1] - ort[0][0]) - ort[2][2];
	if (s > (-0.19)) {

		quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[2];
		quat[0] = inv * (ort[2][0] - ort[0][2]);
		quat[1] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[2][1] + ort[1][2]);
	} else {

		s = (ort[2][2] - ort[0][0]) - ort[1][1];
		quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[3];
		quat[0] = inv * (ort[0][1] - ort[1][0]);
		quat[1] = inv * (ort[0][2] + ort[2][0]);
		quat[2] = inv * (ort[2][1] + ort[1][2]);
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:39:02.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:02.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:02.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[1];
	quat[0] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[0][2] + ort[2][0]);
} else {
	s = (ort[1][1] - ort[0][0]) - ort[2][2];
	if (s > (-0.19)) {

		quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[2];
		quat[0] = inv * (ort[2][0] - ort[0][2]);
		quat[1] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[2][1] + ort[1][2]);
	} else {

		s = (ort[2][2] - ort[0][0]) - ort[1][1];
		quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[3];
		quat[0] = inv * (ort[0][1] - ort[1][0]);
		quat[1] = inv * (ort[0][2] + ort[2][0]);
		quat[2] = inv * (ort[2][1] + ort[1][2]);
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:39:04.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:04.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:04.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:39:06.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:06.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:06.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:39:08.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:08.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:08.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:39:10.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:10.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:10.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:39:12.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:12.395 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:12.396 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:39:14.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:14.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:14.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Populate throws declarations for geometry package.

00:39:16.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:16.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:16.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = composed.q3,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:18.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:18.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:18.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = composed.q2,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:20.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:20.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:20.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = composed.q1,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:22.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:22.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:22.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Fixed checkstyle warnings.

00:39:24.533 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:24.534 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:24.535 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:26.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:26.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:26.601 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:28.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:28.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:28.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:39:30.534 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:30.535 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:30.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:32.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:32.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:32.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plane.v = v,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:35.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:35.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:35.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:37.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:37.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:37.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:39:39.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:39.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:39.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:39:42.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:42.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:42.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:39:45.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:45.018 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:45.019 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:39:47.284 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:47.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:47.285 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:49.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:49.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:49.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = composed.q0,commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

00:39:51.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:51.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:51.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

00:39:53.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:53.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:53.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

00:39:56.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:56.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:56.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Fixed checkstyle warnings.

00:39:58.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:58.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:58.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Populate throws declarations for geometry package.

00:40:01.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:01.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:01.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedTransform = 
org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:03.462 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:03.462 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:03.463 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:05.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:05.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:05.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return boundary.getTree(false),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:07.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:08.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:08.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:10.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:10.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:10.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:12.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:12.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:12.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

00:40:14.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:14.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:14.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:17.093 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:17.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:17.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, u),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:19.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:19.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:19.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

00:40:21.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:21.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:21.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:23.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:23.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:23.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(zero, zero.subtract(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Fixed checkstyle warnings.

00:40:25.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:25.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:25.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:40:27.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:27.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:27.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:40:29.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:29.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:29.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:40:32.338 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:32.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:32.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:40:34.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:34.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:34.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:40:36.844 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:36.845 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:36.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:40:39.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:39.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:39.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:40:41.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:41.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:41.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:40:44.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:44.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:44.268 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:40:46.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:46.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:46.696 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:40:49.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:49.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:49.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:40:51.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:51.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:51.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:53.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:53.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:53.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.euclidean.threed.Line(point, point.add(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:56.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:56.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:56.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((angle < 1.0E-10) && (org.apache.commons.math3.util.FastMath.abs(originOffset - plane.originOffset) < 1.0E-10)) || 
((angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10)) && (org.apache.commons.math3.util.FastMath.abs(originOffset + plane.originOffset) < 1.0E-10)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

00:40:58.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:58.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:58.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:41:01.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:01.123 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:01.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:41:03.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:03.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:03.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Populate throws declarations for geometry package.

00:41:05.616 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:05.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:05.617 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> minus = node.getMinus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:42:16.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:16.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:16.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:18.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:18.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:18.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:20.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:20.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:20.979 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:23.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:23.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:23.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:25.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:25.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:25.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:27.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:27.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:27.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxParameters = org.apache.commons.math3.util.FastMath.max(parameters, cache == null ? 0 : cache.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:29.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:29.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:29.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxParameters = org.apache.commons.math3.util.FastMath.max(parameters, cache == null ? 0 : cache.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:31.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:31.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:31.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxParameters = org.apache.commons.math3.util.FastMath.max(parameters, cache == null ? 0 : cache.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:33.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:33.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:33.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:36.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:36.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:36.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:38.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:38.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:38.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:40.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:40.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:40.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:42.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:42.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:42.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:45.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:45.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:45.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:47.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:47.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:47.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:50.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:50.164 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:50.165 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:52.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:52.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:52.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:42:55.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:55.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:55.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:57.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:57.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:57.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:42:59.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:59.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:59.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] newCache = new org.apache.commons.math3.analysis.differentiation.DSCompiler[maxParameters + 1][maxOrder + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:01.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:01.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:01.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:04.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:04.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:04.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:06.667 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:06.668 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:06.669 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:09.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:09.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:09.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:11.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:11.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:11.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:13.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:13.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:13.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:15.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:15.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:15.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:17.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:17.578 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:17.579 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:19.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:19.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:19.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:22.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:22.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:22.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:25.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:25.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:25.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:27.515 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:27.515 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:27.516 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:29.922 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:29.923 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:29.924 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:32.074 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:32.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:32.076 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:34.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:34.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:34.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:36.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:36.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:36.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:38.473 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:38.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:38.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:40.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:40.418 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:40.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:43:42.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:42.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:42.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:44.988 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:44.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:44.989 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:47.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:47.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:47.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:43:50.006 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:50.006 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:50.007 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:43:52.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:52.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:52.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:54.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:54.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:54.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:43:56.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:56.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:56.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:43:58.149 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:58.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:58.150 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:44:00.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:00.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:00.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:44:02.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:02.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:02.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:44:05.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:05.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:05.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:07.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:07.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:07.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int p = diag - o,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:44:09.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:09.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:09.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:12.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:12.418 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:12.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:14.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:14.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:14.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:17.206 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:17.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:17.207 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.parameters = parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:19.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:19.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:19.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.order = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.parameters = parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:22.238 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:22.238 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:22.239 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.sizes = org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(parameters, order, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.order = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:24.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:24.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:24.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.derivativesIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.sizes = org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(parameters, order, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:27.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:27.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:27.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.lowerIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.derivativesIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:29.376 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:29.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:29.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.multIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(parameters, order, 
valueCompiler, derivativeCompiler, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.lowerIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:31.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:31.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:31.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.compIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(parameters, order, 
valueCompiler, derivativeCompiler, 
sizes, derivativesIndirection, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.multIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(parameters, order, 
valueCompiler, derivativeCompiler, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:34.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:34.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:34.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] sizes = new int[parameters + 1][order + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(parameters, order, 
valueCompiler, derivativeCompiler, 
sizes, derivativesIndirection, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:36.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:36.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:36.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(sizes[0], 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] sizes = new int[parameters + 1][order + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:39.298 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:39.298 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:39.299 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(sizes[0], 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:41.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:41.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:41.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: sizes[parameters][0] = 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:43.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:43.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:43.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: sizes[parameters][0] = 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:46.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:46.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:46.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < order; ++i) {
	sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:48.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:48.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:48.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (parameters == 0) {
	java.util.Arrays.fill(sizes[0], 1);
} else {
	java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);
	sizes[parameters][0] = 1;
	for (int i = 0; i < order; ++i) {
		sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < order; ++i) {
	sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:50.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:50.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:50.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return sizes,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters == 0) {
	java.util.Arrays.fill(sizes[0], 1);
} else {
	java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);
	sizes[parameters][0] = 1;
	for (int i = 0; i < order; ++i) {
		sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:53.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:53.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:53.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new int[1][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return sizes,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:55.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:55.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:55.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((parameters == 0) || (order == 0)) {
	return new int[1][parameters];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[1][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:44:57.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:57.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:57.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int vSize = valueCompiler.derivativesIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((parameters == 0) || (order == 0)) {
	return new int[1][parameters];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:00.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:00.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:00.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int dSize = derivativeCompiler.derivativesIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int vSize = valueCompiler.derivativesIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:02.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:02.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:02.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] derivativesIndirection = new int[vSize + dSize][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int dSize = derivativeCompiler.derivativesIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:05.130 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:05.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:05.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.derivativesIndirection[i], 0, 
derivativesIndirection[i], 0, 
parameters - 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] derivativesIndirection = new int[vSize + dSize][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:07.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:07.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:07.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < vSize; ++i) {

	java.lang.System.arraycopy(valueCompiler.derivativesIndirection[i], 0, 
	derivativesIndirection[i], 0, 
	parameters - 1);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.derivativesIndirection[i], 0, 
derivativesIndirection[i], 0, 
parameters - 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:09.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:09.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:09.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0, 
derivativesIndirection[vSize + i], 0, 
parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < vSize; ++i) {

	java.lang.System.arraycopy(valueCompiler.derivativesIndirection[i], 0, 
	derivativesIndirection[i], 0, 
	parameters - 1);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:11.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:11.451 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:11.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivativesIndirection[vSize + i][parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0, 
derivativesIndirection[vSize + i], 0, 
parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:13.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:13.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:13.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dSize; ++i) {


	java.lang.System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0, 
	derivativesIndirection[vSize + i], 0, 
	parameters);


	derivativesIndirection[vSize + i][parameters - 1]++;

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivativesIndirection[vSize + i][parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:15.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:15.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:15.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return derivativesIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dSize; ++i) {


	java.lang.System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0, 
	derivativesIndirection[vSize + i], 0, 
	parameters);


	derivativesIndirection[vSize + i][parameters - 1]++;

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:18.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:18.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:18.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new int[]{ 0 },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return derivativesIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:20.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:20.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:20.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((parameters == 0) || (order <= 1)) {
	return new int[]{ 0 };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[]{ 0 },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:23.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:23.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:23.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int vSize = valueCompiler.lowerIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((parameters == 0) || (order <= 1)) {
	return new int[]{ 0 };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:25.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:25.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:25.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int dSize = derivativeCompiler.lowerIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int vSize = valueCompiler.lowerIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:28.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:28.084 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:28.085 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] lowerIndirection = new int[vSize + dSize],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int dSize = derivativeCompiler.lowerIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:29.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:29.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:29.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] lowerIndirection = new int[vSize + dSize],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:31.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:31.889 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:31.890 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:33.786 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:33.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:33.787 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dSize; ++i) {
	lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:35.904 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:35.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:35.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return lowerIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dSize; ++i) {
	lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:38.410 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:38.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:38.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new int[][][]{ new int[][]{ new int[]{ 1, 0, 0 } } },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return lowerIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:40.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:40.937 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:40.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((parameters == 0) || (order == 0)) {
	return new int[][][]{ new int[][]{ new int[]{ 1, 0, 0 } } };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[][][]{ new int[][]{ new int[]{ 1, 0, 0 } } },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:43.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:43.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:43.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int vSize = valueCompiler.multIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((parameters == 0) || (order == 0)) {
	return new int[][][]{ new int[][]{ new int[]{ 1, 0, 0 } } };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:45.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:45.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:45.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int dSize = derivativeCompiler.multIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int vSize = valueCompiler.multIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:48.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:48.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:48.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][][] multIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int dSize = derivativeCompiler.multIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:50.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:50.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:50.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][][] multIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:52.942 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:52.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:52.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] dRow = derivativeCompiler.multIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:55.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:55.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:55.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.List<int[]> row = new java.util.ArrayList<int[]>(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] dRow = derivativeCompiler.multIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:45:57.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:57.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:57.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] }),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.List<int[]> row = new java.util.ArrayList<int[]>(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:00.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:00.498 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:00.499 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] }),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] }),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:02.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:02.763 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:02.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < dRow.length; ++j) {
	row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });
	row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] }),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:05.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:05.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:05.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size()),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < dRow.length; ++j) {
	row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });
	row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:07.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:07.395 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:07.396 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] termJ = row.get(j),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size()),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:09.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:09.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:09.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] termK = row.get(k),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] termJ = row.get(j),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:11.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:11.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:11.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: termJ[0] += termK[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] termK = row.get(k),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:14.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:14.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:14.331 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: termK[0] = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: termJ[0] += termK[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:16.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:16.756 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:16.757 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

	termJ[0] += termK[0];

	termK[0] = 0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: termK[0] = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:18.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:18.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:18.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = j + 1; k < row.size(); ++k) {
	final int[] termK = row.get(k);
	if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

		termJ[0] += termK[0];

		termK[0] = 0;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

	termJ[0] += termK[0];

	termK[0] = 0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:21.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:21.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:21.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: combined.add(termJ),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = j + 1; k < row.size(); ++k) {
	final int[] termK = row.get(k);
	if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

		termJ[0] += termK[0];

		termK[0] = 0;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:23.415 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:23.415 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:23.416 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (termJ[0] > 0) {
	for (int k = j + 1; k < row.size(); ++k) {
		final int[] termK = row.get(k);
		if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

			termJ[0] += termK[0];

			termK[0] = 0;
		}
	}
	combined.add(termJ);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: combined.add(termJ),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:25.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:25.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:25.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < row.size(); ++j) {
	final int[] termJ = row.get(j);
	if (termJ[0] > 0) {
		for (int k = j + 1; k < row.size(); ++k) {
			final int[] termK = row.get(k);
			if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

				termJ[0] += termK[0];

				termK[0] = 0;
			}
		}
		combined.add(termJ);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (termJ[0] > 0) {
	for (int k = j + 1; k < row.size(); ++k) {
		final int[] termK = row.get(k);
		if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

			termJ[0] += termK[0];

			termK[0] = 0;
		}
	}
	combined.add(termJ);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:27.628 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:27.628 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:27.629 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < row.size(); ++j) {
	final int[] termJ = row.get(j);
	if (termJ[0] > 0) {
		for (int k = j + 1; k < row.size(); ++k) {
			final int[] termK = row.get(k);
			if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

				termJ[0] += termK[0];

				termK[0] = 0;
			}
		}
		combined.add(termJ);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:29.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:29.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:29.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dSize; ++i) {
	final int[][] dRow = derivativeCompiler.multIndirection[i];
	java.util.List<int[]> row = new java.util.ArrayList<int[]>();
	for (int j = 0; j < dRow.length; ++j) {
		row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });
		row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });
	}


	final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size());
	for (int j = 0; j < row.size(); ++j) {
		final int[] termJ = row.get(j);
		if (termJ[0] > 0) {
			for (int k = j + 1; k < row.size(); ++k) {
				final int[] termK = row.get(k);
				if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

					termJ[0] += termK[0];

					termK[0] = 0;
				}
			}
			combined.add(termJ);
		}
	}

	multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:32.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:32.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:32.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return multIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dSize; ++i) {
	final int[][] dRow = derivativeCompiler.multIndirection[i];
	java.util.List<int[]> row = new java.util.ArrayList<int[]>();
	for (int j = 0; j < dRow.length; ++j) {
		row.add(new int[]{ dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });
		row.add(new int[]{ dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });
	}


	final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size());
	for (int j = 0; j < row.size(); ++j) {
		final int[] termJ = row.get(j);
		if (termJ[0] > 0) {
			for (int k = j + 1; k < row.size(); ++k) {
				final int[] termK = row.get(k);
				if ((termJ[1] == termK[1]) && (termJ[2] == termK[2])) {

					termJ[0] += termK[0];

					termK[0] = 0;
				}
			}
			combined.add(termJ);
		}
	}

	multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:33.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:33.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:33.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new int[][][]{ new int[][]{ new int[]{ 1, 0 } } },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return multIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:35.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:35.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:35.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((parameters == 0) || (order == 0)) {
	return new int[][][]{ new int[][]{ new int[]{ 1, 0 } } };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[][][]{ new int[][]{ new int[]{ 1, 0 } } },commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:38.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:38.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:38.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int vSize = valueCompiler.compIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((parameters == 0) || (order == 0)) {
	return new int[][][]{ new int[][]{ new int[]{ 1, 0 } } };
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:40.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:40.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:40.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int dSize = derivativeCompiler.compIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int vSize = valueCompiler.compIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:42.923 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:42.923 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:42.924 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][][] compIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int dSize = derivativeCompiler.compIndirection.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:45.230 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:45.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:45.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][][] compIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:47.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:47.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:47.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int[] derivedTermF = new int[term.length + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:49.614 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:49.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:49.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermF[0] = term[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int[] derivedTermF = new int[term.length + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:51.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:51.613 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:51.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermF[1] = term[1] + 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[0] = term[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:53.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:53.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:53.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int[] orders = new int[parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[1] = term[1] + 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:55.987 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:55.987 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:55.988 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: orders[parameters - 1] = 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int[] orders = new int[parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:46:58.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:58.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:58.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[parameters - 1] = 1,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:00.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:00.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:00.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:02.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:02.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:02.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 2; j < term.length; ++j) {


	derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
	derivativeCompiler.derivativesIndirection, 
	parameters, order, sizes);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:05.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:05.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:05.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 2; j < term.length; ++j) {


	derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
	derivativeCompiler.derivativesIndirection, 
	parameters, order, sizes);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:07.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:07.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:07.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: row.add(derivedTermF),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:10.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:10.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:10.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int[] derivedTermG = new int[term.length],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: row.add(derivedTermF),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:12.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:12.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:12.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermG[0] = term[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int[] derivedTermG = new int[term.length],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:15.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:15.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:15.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermG[1] = term[1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermG[0] = term[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:17.740 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:17.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:17.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermG[1] = term[1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:19.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:19.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:19.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:22.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:22.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:22.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: orders[parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:24.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:24.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:24.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:26.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:26.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:26.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (j == l) {

	java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
	orders[parameters - 1]++;
	derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:29.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:29.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:29.298 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 2; j < term.length; ++j) {


	derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
	derivativeCompiler.derivativesIndirection, 
	parameters, order, sizes);
	if (j == l) {

		java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
		orders[parameters - 1]++;
		derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (j == l) {

	java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
	orders[parameters - 1]++;
	derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:31.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:31.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:31.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 2; j < term.length; ++j) {


	derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
	derivativeCompiler.derivativesIndirection, 
	parameters, order, sizes);
	if (j == l) {

		java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
		orders[parameters - 1]++;
		derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:34.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:34.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:34.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: row.add(derivedTermG),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:36.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:36.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:36.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int l = 2; l < term.length; ++l) {
	int[] derivedTermG = new int[term.length];
	derivedTermG[0] = term[0];
	derivedTermG[1] = term[1];
	for (int j = 2; j < term.length; ++j) {


		derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
		derivativeCompiler.derivativesIndirection, 
		parameters, order, sizes);
		if (j == l) {

			java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
			orders[parameters - 1]++;
			derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
		}
	}
	java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
	row.add(derivedTermG);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: row.add(derivedTermG),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:39.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:39.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:39.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int[] term : derivativeCompiler.compIndirection[i]) {




	int[] derivedTermF = new int[term.length + 1];
	derivedTermF[0] = term[0];
	derivedTermF[1] = term[1] + 1;
	int[] orders = new int[parameters];
	orders[parameters - 1] = 1;
	derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
	for (int j = 2; j < term.length; ++j) {


		derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
		derivativeCompiler.derivativesIndirection, 
		parameters, order, sizes);
	}
	java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length);
	row.add(derivedTermF);


	for (int l = 2; l < term.length; ++l) {
		int[] derivedTermG = new int[term.length];
		derivedTermG[0] = term[0];
		derivedTermG[1] = term[1];
		for (int j = 2; j < term.length; ++j) {


			derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
			derivativeCompiler.derivativesIndirection, 
			parameters, order, sizes);
			if (j == l) {

				java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
				orders[parameters - 1]++;
				derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
			}
		}
		java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
		row.add(derivedTermG);
	}

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int l = 2; l < term.length; ++l) {
	int[] derivedTermG = new int[term.length];
	derivedTermG[0] = term[0];
	derivedTermG[1] = term[1];
	for (int j = 2; j < term.length; ++j) {


		derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
		derivativeCompiler.derivativesIndirection, 
		parameters, order, sizes);
		if (j == l) {

			java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
			orders[parameters - 1]++;
			derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
		}
	}
	java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
	row.add(derivedTermG);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:41.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:41.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:41.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: boolean equals = termJ.length == termK.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int[] term : derivativeCompiler.compIndirection[i]) {




	int[] derivedTermF = new int[term.length + 1];
	derivedTermF[0] = term[0];
	derivedTermF[1] = term[1] + 1;
	int[] orders = new int[parameters];
	orders[parameters - 1] = 1;
	derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
	for (int j = 2; j < term.length; ++j) {


		derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
		derivativeCompiler.derivativesIndirection, 
		parameters, order, sizes);
	}
	java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length);
	row.add(derivedTermF);


	for (int l = 2; l < term.length; ++l) {
		int[] derivedTermG = new int[term.length];
		derivedTermG[0] = term[0];
		derivedTermG[1] = term[1];
		for (int j = 2; j < term.length; ++j) {


			derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
			derivativeCompiler.derivativesIndirection, 
			parameters, order, sizes);
			if (j == l) {

				java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
				orders[parameters - 1]++;
				derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
			}
		}
		java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
		row.add(derivedTermG);
	}

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:43.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:43.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:43.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: equals &= termJ[l] == termK[l],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: boolean equals = termJ.length == termK.length,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:45.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:45.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:45.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int l = 1; equals && (l < termJ.length); ++l) {
	equals &= termJ[l] == termK[l];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: equals &= termJ[l] == termK[l],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:48.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:48.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:48.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (equals) {

	termJ[0] += termK[0];

	termK[0] = 0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int l = 1; equals && (l < termJ.length); ++l) {
	equals &= termJ[l] == termK[l];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:50.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:50.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:50.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = j + 1; k < row.size(); ++k) {
	final int[] termK = row.get(k);
	boolean equals = termJ.length == termK.length;
	for (int l = 1; equals && (l < termJ.length); ++l) {
		equals &= termJ[l] == termK[l];
	}
	if (equals) {

		termJ[0] += termK[0];

		termK[0] = 0;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (equals) {

	termJ[0] += termK[0];

	termK[0] = 0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:52.988 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:52.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:52.989 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (termJ[0] > 0) {
	for (int k = j + 1; k < row.size(); ++k) {
		final int[] termK = row.get(k);
		boolean equals = termJ.length == termK.length;
		for (int l = 1; equals && (l < termJ.length); ++l) {
			equals &= termJ[l] == termK[l];
		}
		if (equals) {

			termJ[0] += termK[0];

			termK[0] = 0;
		}
	}
	combined.add(termJ);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = j + 1; k < row.size(); ++k) {
	final int[] termK = row.get(k);
	boolean equals = termJ.length == termK.length;
	for (int l = 1; equals && (l < termJ.length); ++l) {
		equals &= termJ[l] == termK[l];
	}
	if (equals) {

		termJ[0] += termK[0];

		termK[0] = 0;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:55.454 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:55.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:55.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < row.size(); ++j) {
	final int[] termJ = row.get(j);
	if (termJ[0] > 0) {
		for (int k = j + 1; k < row.size(); ++k) {
			final int[] termK = row.get(k);
			boolean equals = termJ.length == termK.length;
			for (int l = 1; equals && (l < termJ.length); ++l) {
				equals &= termJ[l] == termK[l];
			}
			if (equals) {

				termJ[0] += termK[0];

				termK[0] = 0;
			}
		}
		combined.add(termJ);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (termJ[0] > 0) {
	for (int k = j + 1; k < row.size(); ++k) {
		final int[] termK = row.get(k);
		boolean equals = termJ.length == termK.length;
		for (int l = 1; equals && (l < termJ.length); ++l) {
			equals &= termJ[l] == termK[l];
		}
		if (equals) {

			termJ[0] += termK[0];

			termK[0] = 0;
		}
	}
	combined.add(termJ);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:47:58.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:58.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:58.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < row.size(); ++j) {
	final int[] termJ = row.get(j);
	if (termJ[0] > 0) {
		for (int k = j + 1; k < row.size(); ++k) {
			final int[] termK = row.get(k);
			boolean equals = termJ.length == termK.length;
			for (int l = 1; equals && (l < termJ.length); ++l) {
				equals &= termJ[l] == termK[l];
			}
			if (equals) {

				termJ[0] += termK[0];

				termK[0] = 0;
			}
		}
		combined.add(termJ);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:00.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:00.551 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:00.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dSize; ++i) {
	java.util.List<int[]> row = new java.util.ArrayList<int[]>();
	for (int[] term : derivativeCompiler.compIndirection[i]) {




		int[] derivedTermF = new int[term.length + 1];
		derivedTermF[0] = term[0];
		derivedTermF[1] = term[1] + 1;
		int[] orders = new int[parameters];
		orders[parameters - 1] = 1;
		derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
		for (int j = 2; j < term.length; ++j) {


			derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
			derivativeCompiler.derivativesIndirection, 
			parameters, order, sizes);
		}
		java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length);
		row.add(derivedTermF);


		for (int l = 2; l < term.length; ++l) {
			int[] derivedTermG = new int[term.length];
			derivedTermG[0] = term[0];
			derivedTermG[1] = term[1];
			for (int j = 2; j < term.length; ++j) {


				derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
				derivativeCompiler.derivativesIndirection, 
				parameters, order, sizes);
				if (j == l) {

					java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
					orders[parameters - 1]++;
					derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
				}
			}
			java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
			row.add(derivedTermG);
		}

	}


	final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size());
	for (int j = 0; j < row.size(); ++j) {
		final int[] termJ = row.get(j);
		if (termJ[0] > 0) {
			for (int k = j + 1; k < row.size(); ++k) {
				final int[] termK = row.get(k);
				boolean equals = termJ.length == termK.length;
				for (int l = 1; equals && (l < termJ.length); ++l) {
					equals &= termJ[l] == termK[l];
				}
				if (equals) {

					termJ[0] += termK[0];

					termK[0] = 0;
				}
			}
			combined.add(termJ);
		}
	}

	compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:03.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:03.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:03.087 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dSize; ++i) {
	java.util.List<int[]> row = new java.util.ArrayList<int[]>();
	for (int[] term : derivativeCompiler.compIndirection[i]) {




		int[] derivedTermF = new int[term.length + 1];
		derivedTermF[0] = term[0];
		derivedTermF[1] = term[1] + 1;
		int[] orders = new int[parameters];
		orders[parameters - 1] = 1;
		derivedTermF[term.length] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
		for (int j = 2; j < term.length; ++j) {


			derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
			derivativeCompiler.derivativesIndirection, 
			parameters, order, sizes);
		}
		java.util.Arrays.sort(derivedTermF, 2, derivedTermF.length);
		row.add(derivedTermF);


		for (int l = 2; l < term.length; ++l) {
			int[] derivedTermG = new int[term.length];
			derivedTermG[0] = term[0];
			derivedTermG[1] = term[1];
			for (int j = 2; j < term.length; ++j) {


				derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
				derivativeCompiler.derivativesIndirection, 
				parameters, order, sizes);
				if (j == l) {

					java.lang.System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);
					orders[parameters - 1]++;
					derivedTermG[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders);
				}
			}
			java.util.Arrays.sort(derivedTermG, 2, derivedTermG.length);
			row.add(derivedTermG);
		}

	}


	final java.util.List<int[]> combined = new java.util.ArrayList<int[]>(row.size());
	for (int j = 0; j < row.size(); ++j) {
		final int[] termJ = row.get(j);
		if (termJ[0] > 0) {
			for (int k = j + 1; k < row.size(); ++k) {
				final int[] termK = row.get(k);
				boolean equals = termJ.length == termK.length;
				for (int l = 1; equals && (l < termJ.length); ++l) {
					equals &= termJ[l] == termK[l];
				}
				if (equals) {

					termJ[0] += termK[0];

					termK[0] = 0;
				}
			}
			combined.add(termJ);
		}
	}

	compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:05.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:05.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:05.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(orders.length, getFreeParameters()),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compIndirection,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:08.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:08.106 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:08.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (orders.length != getFreeParameters()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(orders.length, getFreeParameters());
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(orders.length, getFreeParameters()),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:10.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:10.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:10.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (orders.length != getFreeParameters()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(orders.length, getFreeParameters());
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:11.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:11.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:11.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int index = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(parameters, order, sizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:13.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:13.869 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:13.870 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int m = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int index = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:16.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:16.239 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:16.240 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int ordersSum = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int m = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:18.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:18.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:18.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int derivativeOrder = orders[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int ordersSum = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:21.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:21.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:21.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ordersSum += derivativeOrder,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int derivativeOrder = orders[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:23.230 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:23.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:23.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ordersSum += derivativeOrder,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:25.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:25.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:25.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (ordersSum > order) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:27.618 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:27.618 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:27.619 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: index += sizes[i][m--],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (ordersSum > order) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:29.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:29.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:29.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: while ((derivativeOrder--) > 0) {



	index += sizes[i][m--];
} ,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: index += sizes[i][m--],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:32.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:32.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:32.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = parameters - 1; i >= 0; --i) {


	int derivativeOrder = orders[i];


	ordersSum += derivativeOrder;
	if (ordersSum > order) {
		throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true);
	}

	while ((derivativeOrder--) > 0) {



		index += sizes[i][m--];
	} 

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: while ((derivativeOrder--) > 0) {



	index += sizes[i][m--];
} ,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:34.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:34.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:34.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return index,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = parameters - 1; i >= 0; --i) {


	int derivativeOrder = orders[i];


	ordersSum += derivativeOrder;
	if (ordersSum > order) {
		throw new org.apache.commons.math3.exception.NumberIsTooLargeException(ordersSum, order, true);
	}

	while ((derivativeOrder--) > 0) {



		index += sizes[i][m--];
	} 

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:37.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:37.067 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:37.068 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: int[] orders = new int[destP],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return index,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:39.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:39.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:39.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, org.apache.commons.math3.util.FastMath.min(srcP, destP)),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int[] orders = new int[destP],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:41.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:41.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:41.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(destP, destO, destSizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, org.apache.commons.math3.util.FastMath.min(srcP, destP)),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:43.369 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:43.370 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:43.371 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return derivativesIndirection[index],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(destP, destO, destSizes, orders),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:45.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:45.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:45.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return derivativesIndirection[index],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:47.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:47.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:47.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:50.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:50.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:50.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return sizes[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:52.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:52.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:52.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return sizes[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:54.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:54.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:54.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:56.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:56.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:56.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
a2, c2[offset2 + i], 
a3, c3[offset3 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:48:58.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:58.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:58.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
	a2, c2[offset2 + i], 
	a3, c3[offset3 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
a2, c2[offset2 + i], 
a3, c3[offset3 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:01.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:01.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:01.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
a2, c2[offset2 + i], 
a3, c3[offset3 + i], 
a4, c4[offset4 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
	a2, c2[offset2 + i], 
	a3, c3[offset3 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:03.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:03.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:03.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
	a2, c2[offset2 + i], 
	a3, c3[offset3 + i], 
	a4, c4[offset4 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 
org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
a2, c2[offset2 + i], 
a3, c3[offset3 + i], 
a4, c4[offset4 + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:05.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:05.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:05.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = 
	org.apache.commons.math3.util.MathArrays.linearCombination(a1, c1[offset1 + i], 
	a2, c2[offset2 + i], 
	a3, c3[offset3 + i], 
	a4, c4[offset4 + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:07.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:07.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:07.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:09.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:09.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:09.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:11.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:11.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:11.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:13.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:13.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:13.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] mappingI = multIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:15.336 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:15.337 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:15.338 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double r = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = multIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:17.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:17.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:17.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: r += (mappingI[j][0] * 
lhs[lhsOffset + mappingI[j][1]]) * 
rhs[rhsOffset + mappingI[j][2]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double r = 0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:20.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:20.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:20.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < mappingI.length; ++j) {
	r += (mappingI[j][0] * 
	lhs[lhsOffset + mappingI[j][1]]) * 
	rhs[rhsOffset + mappingI[j][2]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: r += (mappingI[j][0] * 
lhs[lhsOffset + mappingI[j][1]]) * 
rhs[rhsOffset + mappingI[j][2]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:22.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:22.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:22.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = r,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	r += (mappingI[j][0] * 
	lhs[lhsOffset + mappingI[j][1]]) * 
	rhs[rhsOffset + mappingI[j][2]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:24.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:24.835 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:24.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < multIndirection.length; ++i) {
	final int[][] mappingI = multIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		r += (mappingI[j][0] * 
		lhs[lhsOffset + mappingI[j][1]]) * 
		rhs[rhsOffset + mappingI[j][2]];
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = r,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:27.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:27.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:27.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] reciprocal = new double[getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < multIndirection.length; ++i) {
	final int[][] mappingI = multIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		r += (mappingI[j][0] * 
		lhs[lhsOffset + mappingI[j][1]]) * 
		rhs[rhsOffset + mappingI[j][2]];
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:29.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:29.729 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:29.730 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: pow(rhs, lhsOffset, -1, reciprocal, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] reciprocal = new double[getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:32.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:32.142 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:32.143 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: pow(rhs, lhsOffset, -1, reciprocal, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:34.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:34.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:34.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double rem = lhs[lhsOffset] % rhs[rhsOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:36.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:36.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:36.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double k = org.apache.commons.math3.util.FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double rem = lhs[lhsOffset] % rhs[rhsOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:39.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:39.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:39.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = rem,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double k = org.apache.commons.math3.util.FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:41.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:41.334 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:41.335 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = lhs[lhsOffset + i] - (k * rhs[rhsOffset + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = rem,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:43.790 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:43.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:43.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] - (k * rhs[rhsOffset + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = lhs[lhsOffset + i] - (k * rhs[rhsOffset + i]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:46.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:46.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:46.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] function = new double[1 + order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i < getSize(); ++i) {
	result[resultOffset + i] = lhs[lhsOffset + i] - (k * rhs[rhsOffset + i]);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:48.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:48.693 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:48.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], p - order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] function = new double[1 + order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:51.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:51.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:51.159 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] = xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], p - order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:53.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:53.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:53.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk *= operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:55.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:55.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:55.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = order; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:57.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:57.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:57.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = order; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:49:59.917 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:59.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:59.918 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coefficient = p,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:01.992 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:01.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:01.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] *= coefficient,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coefficient = p,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:03.909 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:03.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:03.911 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coefficient *= p - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] *= coefficient,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:06.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:06.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:06.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= p - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coefficient *= p - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:08.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:08.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:08.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compose(operand, operandOffset, function, result, resultOffset),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= p - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:10.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:10.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:10.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compose(operand, operandOffset, function, result, resultOffset),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:13.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:13.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:13.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:16.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:16.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:16.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:18.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:18.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:18.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (n == 0) {

	result[resultOffset] = 1.0;
	java.util.Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);
	return;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:21.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:21.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:21.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 0) {

	result[resultOffset] = 1.0;
	java.util.Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);
	return;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:23.661 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:23.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:23.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:26.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:26.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:26.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = maxOrder; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:28.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:28.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:28.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = maxOrder; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:30.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:30.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:30.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:32.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:32.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:32.991 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk *= inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:35.192 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:35.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:35.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:37.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:37.710 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:37.711 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (n > 0) {

	final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n);
	double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder);
	for (int i = maxOrder; i > 0; --i) {
		function[i] = xk;
		xk *= operand[operandOffset];
	}
	function[0] = xk;
} else {

	final double inv = 1.0 / operand[operandOffset];
	double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n);
	for (int i = 0; i <= order; ++i) {
		function[i] = xk;
		xk *= inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:40.042 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:40.042 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:40.043 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coefficient = n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n > 0) {

	final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n);
	double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder);
	for (int i = maxOrder; i > 0; --i) {
		function[i] = xk;
		xk *= operand[operandOffset];
	}
	function[0] = xk;
} else {

	final double inv = 1.0 / operand[operandOffset];
	double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n);
	for (int i = 0; i <= order; ++i) {
		function[i] = xk;
		xk *= inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:42.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:42.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:42.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: coefficient *= n - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coefficient = n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:44.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:44.407 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:44.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coefficient *= n - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:50:46.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:46.645 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:46.646 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:48.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:48.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:48.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:50.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:50.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:50.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:52.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:52.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:52.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:50:55.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:55.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:55.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache != null) {

	for (int i = 0; i < cache.length; ++i) {
		java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:50:57.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:57.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:57.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:51:00.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:00.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:00.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:51:02.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:02.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:02.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:05.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:05.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:05.285 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return newCache[parameters][order],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:07.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:07.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:07.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:10.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:10.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:10.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.parameters = parameters,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:12.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:12.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:12.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.order = order,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:15.274 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:15.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:15.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.sizes = org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(parameters, order, valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:17.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:17.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:17.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.derivativesIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:19.682 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:19.682 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:19.683 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.lowerIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(parameters, order, 
valueCompiler, derivativeCompiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:21.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:21.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:21.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.multIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(parameters, order, 
valueCompiler, derivativeCompiler, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:23.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:23.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:23.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.compIndirection = 
org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(parameters, order, 
valueCompiler, derivativeCompiler, 
sizes, derivativesIndirection, lowerIndirection),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

00:51:25.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:25.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:25.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[][] sizes = new int[parameters + 1][order + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:27.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:27.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:27.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(sizes[0], 1),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:29.927 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:29.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:29.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:32.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:32.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:32.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:34.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:34.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:34.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new int[1][parameters],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:36.709 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:36.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:36.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivativesIndirection[vSize + i][parameters - 1]++,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:39.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:39.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:39.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][][] multIndirection = new int[vSize + dSize][][],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:41.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:41.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:41.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivedTermF[j] = org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(term[j], parameters, 
derivativeCompiler.derivativesIndirection, 
parameters, order, sizes),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:43.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:43.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:43.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] reciprocal = new double[getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:45.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:45.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:45.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= p - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:47.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:47.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:47.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:50.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:50.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:50.033 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n > 0) {

	final int maxOrder = org.apache.commons.math3.util.FastMath.min(order, n);
	double xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], n - maxOrder);
	for (int i = maxOrder; i > 0; --i) {
		function[i] = xk;
		xk *= operand[operandOffset];
	}
	function[0] = xk;
} else {

	final double inv = 1.0 / operand[operandOffset];
	double xk = org.apache.commons.math3.util.FastMath.pow(inv, -n);
	for (int i = 0; i <= order; ++i) {
		function[i] = xk;
		xk *= inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:52.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:52.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:52.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coefficient *= n - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:51:54.858 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:54.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:54.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:51:57.298 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:57.298 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:57.299 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:51:59.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:59.361 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:59.362 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:01.655 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:01.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:01.656 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:03.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:03.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:03.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:05.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:05.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:05.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:07.928 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:07.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:07.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:10.214 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:10.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:10.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:12.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:12.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:12.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:14.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:14.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:14.781 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:17.214 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:17.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:17.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (n == 2) {
	xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]);
} else if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:19.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:19.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:19.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double nReciprocal = 1.0 / n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 2) {
	xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]);
} else if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:21.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:21.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:21.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double xReciprocal = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double nReciprocal = 1.0 / n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:24.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:24.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:24.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk *= xReciprocal * (nReciprocal - i),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double xReciprocal = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:26.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:26.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:26.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= xReciprocal * (nReciprocal - i);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= xReciprocal * (nReciprocal - i),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:28.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:28.425 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:28.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= xReciprocal * (nReciprocal - i);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:52:30.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:30.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:30.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:52:32.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:32.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:32.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:34.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:34.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:34.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:36.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:36.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:36.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:38.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:38.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:38.927 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:41.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:41.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:41.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:52:43.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:43.276 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:43.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:45.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:45.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:45.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:47.365 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:47.365 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:47.366 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:52:49.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:49.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:49.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:52:51.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:51.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:51.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:53.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:53.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:53.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:55.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:55.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:55.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:57.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:57.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:57.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:52:59.645 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:59.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:59.647 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:53:01.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:01.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:01.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:53:03.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:03.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:03.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:53:05.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:05.913 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:05.914 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:53:07.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:07.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:07.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:53:09.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:09.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:09.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:53:11.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:11.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:11.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:53:13.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:13.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:13.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:53:15.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:15.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:15.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:53:17.990 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:17.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:17.991 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

00:53:20.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:20.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:20.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:53:22.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:22.813 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:22.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:53:25.270 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:25.271 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:25.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:53:27.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:27.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:27.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:53:29.645 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:29.645 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:29.646 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:53:31.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:31.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:31.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:53:33.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:33.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:33.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:53:36.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:36.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:36.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

00:53:38.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:38.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:38.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:53:40.492 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:40.492 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:40.493 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:53:42.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:42.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:42.948 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

00:53:45.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:45.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:45.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:53:47.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:47.407 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:47.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:53:49.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:49.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:49.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:53:52.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:52.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:52.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:53:54.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:54.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:54.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:53:56.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:56.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:56.571 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:53:58.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:58.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:58.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:00.828 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:00.828 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:00.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:03.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:03.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:03.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:05.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:05.708 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:05.709 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:08.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:08.142 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:08.143 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:10.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:10.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:10.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:12.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:12.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:12.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:14.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:14.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:14.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:16.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:16.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:16.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:18.709 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:18.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:18.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:20.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:20.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:20.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:22.558 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:22.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:22.559 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:24.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:24.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:24.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:27.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:27.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:27.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:29.803 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:29.803 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:29.804 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:32.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:32.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:32.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:54:34.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:34.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:34.329 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:54:36.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:36.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:36.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:54:39.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:39.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:39.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:54:41.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:41.439 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:41.440 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.log1p(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:43.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:43.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:43.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:46.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:46.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:46.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:48.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:48.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:48.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:51.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:51.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:51.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:54:53.875 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:53.876 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:53.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:54:56.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:56.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:56.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

00:54:58.957 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:58.957 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:58.958 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

00:55:00.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:00.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:00.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.util.Arrays.fill(function, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:03.598 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:03.598 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:03.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= xReciprocal * (nReciprocal - i);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:05.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:05.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:05.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= xReciprocal * (nReciprocal - i),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:08.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:08.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:08.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double xReciprocal = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:10.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:10.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:10.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double nReciprocal = 1.0 / n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:13.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:13.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:13.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 2) {
	xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]);
} else if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:15.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:15.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:15.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:17.404 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:17.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:17.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:19.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:19.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:19.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:21.927 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:21.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:21.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:55:24.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:24.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:24.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:55:26.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:26.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:26.268 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

00:55:28.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:28.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:28.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

00:55:30.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:30.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:30.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:55:32.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:32.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:32.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

00:55:34.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:34.398 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:34.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:55:36.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:36.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:36.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:55:39.501 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:39.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:39.502 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:55:41.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:41.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:41.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

00:55:44.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:44.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:44.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:55:46.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:46.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:46.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

00:55:48.645 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:48.645 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:48.646 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:55:50.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:50.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:50.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:55:52.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:52.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:52.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:55:54.914 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:54.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:54.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:55:56.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:56.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:56.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

00:55:59.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:59.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:59.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:01.515 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:01.515 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:01.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:03.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:03.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:03.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:06.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:06.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:06.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:08.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:08.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:08.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:11.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:11.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:11.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:13.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:13.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:13.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:15.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:15.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:15.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:17.847 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:17.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:17.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:19.900 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:19.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:19.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:21.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:21.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:21.888 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:24.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:24.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:24.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:26.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:26.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:26.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:29.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:29.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:29.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:31.614 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:31.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:31.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:34.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:34.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:34.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:36.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:36.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:36.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:38.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:38.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:38.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:41.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:41.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:41.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:43.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:43.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:43.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:45.694 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:45.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:45.695 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:48.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:48.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:48.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:50.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:50.246 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:50.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:52.667 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:52.667 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:52.668 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:54.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:54.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:54.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:57.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:57.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:57.075 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:56:59.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:59.024 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:59.025 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:01.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:01.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:01.221 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:03.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:03.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:03.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:05.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:05.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:05.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:07.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:07.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:07.371 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:09.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:09.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:09.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:11.570 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:11.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:11.571 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:13.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:13.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:13.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:15.420 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:15.420 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:15.421 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:17.622 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:17.622 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:17.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:20.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:20.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:20.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:22.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:22.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:22.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:25.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:25.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:25.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:27.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:27.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:27.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:29.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:29.435 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:29.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:31.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:31.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:31.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:33.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:33.681 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:33.682 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:35.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:35.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:35.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:37.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:37.521 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:37.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:57:39.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:39.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:39.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:57:41.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:41.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:41.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

00:57:43.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:43.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:43.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:57:45.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:45.983 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:45.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:57:47.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:47.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:47.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:57:49.876 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:49.876 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:49.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:57:52.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:52.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:52.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:57:54.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:54.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:54.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:57:56.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:56.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:56.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:57:59.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:59.102 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:59.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:01.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:01.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:01.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:04.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:04.136 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:04.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:06.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:06.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:06.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:08.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:08.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:08.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:11.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:11.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:11.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:13.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:13.402 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:13.403 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:15.755 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:15.756 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:15.757 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:18.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:18.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:18.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 - x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:20.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:20.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:20.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:22.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:22.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:23.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:25.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:25.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:25.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:27.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:27.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:27.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * p[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:30.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:30.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:30.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:32.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:32.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:32.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:34.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:34.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:34.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:36.356 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:36.356 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:36.357 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:38.732 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:38.732 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:38.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:41.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:41.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:41.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:43.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:43.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:43.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:45.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:45.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:45.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n - 1] = (n - 1) * p[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:47.030 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:47.030 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:47.031 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:48.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:48.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:48.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:50.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:50.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:50.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:53.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:53.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:53.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:55.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:55.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:55.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:58:57.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:57.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:57.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:58:59.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:59.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:59.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:59:02.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:02.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:02.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:59:04.904 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:04.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:04.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:59:07.294 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:07.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:07.296 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:59:09.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:09.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:09.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:59:11.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:11.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:11.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:59:13.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:13.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:13.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:59:14.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:14.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:14.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:59:17.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:17.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:17.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:59:19.590 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:19.590 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:19.591 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:59:21.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:21.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:21.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

00:59:23.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:23.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:23.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:59:25.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:25.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:25.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

00:59:27.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:27.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:27.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:30.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:30.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:30.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:32.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:32.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:32.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

00:59:34.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:34.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:34.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

00:59:37.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:37.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:37.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:39.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:39.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:39.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:41.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:41.845 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:41.847 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:44.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:44.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:44.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:46.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:46.961 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:46.962 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:49.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:49.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:49.478 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:51.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:51.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:51.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:53.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:53.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:53.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:55.925 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:55.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:55.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

00:59:58.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:58.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:58.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:00:01.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:01.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:01.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t2 = t * t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:00:03.679 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:03.679 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:03.680 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order + 2],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:00:06.008 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:06.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:06.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:00:08.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:08.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:08.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:00:10.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:10.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:10.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:00:12.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:12.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:12.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:00:14.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:14.708 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:14.709 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:00:16.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:16.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:16.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:00:19.016 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:19.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:19.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:00:21.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:21.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:21.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:00:23.365 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:23.365 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:23.366 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:00:25.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:25.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:25.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:00:28.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:28.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:28.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:00:30.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:30.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:30.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:00:32.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:32.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:32.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:00:34.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:34.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:34.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:00:36.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:36.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:36.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:00:39.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:39.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:39.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:00:41.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:41.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:41.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:00:43.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:43.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:43.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:00:45.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:45.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:45.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:00:47.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:47.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:47.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:00:49.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:49.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:49.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:00:51.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:51.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:51.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:00:53.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:53.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:53.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:00:56.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:56.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:56.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:00:58.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:58.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:58.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:01:01.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:01.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:01.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:01:03.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:03.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:03.571 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:06.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:06.102 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:06.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:08.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:08.633 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:08.634 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:11.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:11.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:11.177 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[i] = -function[i - 2],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:13.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:13.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:13.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:16.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:16.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:16.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:18.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:18.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:18.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:21.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:21.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:21.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] = xk;
	xk *= (-i) * inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:23.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:23.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:23.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk *= (-i) * inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:26.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:26.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:26.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:28.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:28.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:28.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:31.230 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:31.230 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:31.231 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:33.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:33.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:33.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= xReciprocal * (nReciprocal - i);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:35.683 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:35.683 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:35.684 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 2) {
	xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]);
} else if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:38.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:38.248 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:38.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:40.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:40.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:40.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:42.846 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:42.846 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:42.847 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:01:45.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:45.386 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:45.387 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:01:47.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:47.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:47.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:01:50.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:50.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:50.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:01:53.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:53.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:53.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:55.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:55.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:55.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:01:57.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:57.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:57.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:01:59.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:59.935 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:59.936 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:01.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:01.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:01.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:03.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:03.750 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:03.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:02:05.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:05.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:05.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:07.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:07.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:07.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:02:09.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:09.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:09.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:02:12.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:12.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:12.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:14.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:14.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:14.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:16.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:16.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:16.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:18.533 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:18.533 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:18.534 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:20.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:20.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:20.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:22.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:22.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:22.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:25.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:25.284 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:25.285 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:27.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:27.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:27.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:29.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:29.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:29.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:31.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:31.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:31.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:33.566 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:33.566 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:33.567 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:35.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:35.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:35.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:37.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:37.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:37.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:39.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:39.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:39.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:41.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:41.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:41.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:43.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:43.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:43.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:45.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:45.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:45.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:47.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:47.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:47.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:49.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:49.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:49.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:51.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:51.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:51.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:53.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:53.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:53.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:02:55.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:55.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:55.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:02:57.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:57.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:57.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:03:00.189 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:00.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:00.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:02.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:02.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:02.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:03:04.902 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:04.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:04.903 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:07.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:07.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:07.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:03:09.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:09.395 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:09.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:11.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:11.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:11.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:03:13.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:13.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:13.624 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:15.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:15.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:15.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:17.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:17.957 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:17.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:20.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:20.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:20.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:03:22.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:22.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:22.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:24.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:24.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:24.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:26.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:26.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:26.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:28.336 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:28.336 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:28.337 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:03:30.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:30.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:30.268 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:32.306 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:32.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:32.307 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:34.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:34.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:34.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:36.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:36.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:36.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:38.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:38.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:38.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:40.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:40.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:40.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:03:43.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:43.236 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:43.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:45.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:45.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:45.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:48.215 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:48.215 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:48.216 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:50.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:50.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:50.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:53.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:53.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:53.033 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:03:55.566 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:55.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:55.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:03:58.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:58.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:58.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:00.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:00.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:00.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:02.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:02.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:02.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:04.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:04.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:04.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:06.328 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:06.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:06.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:08.717 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:08.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:08.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:11.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:11.276 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:11.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:13.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:13.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:13.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:15.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:15.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:15.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:18.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:18.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:18.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:20.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:20.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:20.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, tmp2, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:22.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:22.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:22.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:25.168 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:25.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:25.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:27.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:27.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:27.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:29.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:29.921 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:29.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:32.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:32.239 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:32.240 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:34.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:34.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:34.364 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:36.717 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:36.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:36.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:39.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:39.146 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:39.147 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:41.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:41.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:41.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:43.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:43.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:43.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:44.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:44.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:44.959 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:47.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:47.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:47.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:49.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:49.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:49.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:51.977 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:51.977 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:51.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:54.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:54.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:54.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:04:56.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:56.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:56.691 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:04:59.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:59.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:59.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:01.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:01.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:01.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:03.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:03.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:03.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:05.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:05.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:05.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:07.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:07.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:07.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:09.534 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:09.535 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:09.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:11.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:11.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:11.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:13.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:13.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:13.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:15.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:15.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:15.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:17.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:17.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:17.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = 2 * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:19.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:19.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:19.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:21.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:21.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:21.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:23.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:23.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:23.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:25.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:25.517 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:25.518 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < tmp2.length; ++i) {
	result[resultOffset + i] = 2 * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:27.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:27.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:27.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:29.334 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:29.334 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:29.335 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:31.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:31.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:31.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:33.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:33.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:33.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:05:35.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:35.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:35.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:37.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:37.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:37.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:05:39.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:39.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:39.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:41.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:41.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:41.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:05:42.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:42.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:42.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:05:44.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:44.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:44.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:05:46.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:46.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:46.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:49.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:49.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:49.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:51.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:51.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:51.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:54.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:54.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:54.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:56.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:56.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:56.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:05:58.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:05:58.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:05:58.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:01.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:01.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:01.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:03.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:03.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:03.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:06.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:06.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:06.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:08.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:08.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:08.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:10.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:10.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:10.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:12.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:12.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:12.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double f = 1.0 / (1 + x2),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:15.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:15.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:15.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:17.072 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:17.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:17.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:19.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:19.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:19.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = 1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:21.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:21.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:21.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:23.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:23.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:23.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:06:25.969 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:25.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:25.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:06:28.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:28.243 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:28.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:06:30.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:30.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:30.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:06:32.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:32.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:32.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:06:35.412 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:35.412 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:35.413 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:37.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:37.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:37.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:06:39.866 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:39.866 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:39.867 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: subtract(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:06:42.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:42.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:42.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:44.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:44.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:44.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added support for atan2 in DSCompiler.

01:06:47.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:47.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:47.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:06:49.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:49.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:49.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:06:51.902 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:51.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:51.903 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:06:54.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:54.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:54.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:06:57.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:57.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:57.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:06:59.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:06:59.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:06:59.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:01.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:01.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:01.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:03.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:03.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:03.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:06.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:06.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:06.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:08.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:08.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:08.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:10.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:10.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:10.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:13.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:13.190 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:13.191 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:15.655 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:15.656 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:15.657 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:18.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:18.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:18.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] q = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:20.544 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:20.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:20.545 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:22.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:22.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:22.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = coeff * v,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:24.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:24.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:24.930 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:07:27.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:27.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:27.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:07:29.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:29.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:29.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:07:32.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:32.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:32.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:07:34.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:34.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:34.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:36.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:36.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:36.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:07:38.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:38.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:38.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:40.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:40.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:40.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:07:42.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:42.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:42.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added support for atan2 in DSCompiler.

01:07:45.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:45.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:45.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:07:47.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:47.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:47.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

01:07:50.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:50.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:50.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

01:07:52.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:52.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:52.695 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:07:55.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:55.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:55.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:07:57.827 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:07:57.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:07:57.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:00.150 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:00.150 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:00.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:02.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:02.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:02.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:05.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:05.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:05.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:07.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:07.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:07.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	p[0] = p[1];
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:09.226 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:09.226 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:09.227 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = p[1],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:11.473 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:11.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:11.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:13.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:13.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:13.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:15.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:15.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:15.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[n + 1] = n * p[n],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:17.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:17.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:17.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:19.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:19.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:19.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:08:21.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:21.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:21.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:23.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:23.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:23.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:08:26.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:26.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:26.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:08:28.447 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:28.448 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:28.449 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:08:30.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:30.613 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:30.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:08:32.992 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:32.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:32.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:08:35.235 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:35.235 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:35.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:08:37.703 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:37.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:37.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:08:40.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:40.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:40.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.acos(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:08:42.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:42.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:42.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x = operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:08:45.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:45.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:45.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:08:47.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:47.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:47.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	function[1] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]);
	for (int i = 2; i <= order; ++i) {
		function[i] = -function[i - 2];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:08:50.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:50.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:50.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:08:52.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:52.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:52.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / operand[operandOffset],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:08:54.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:54.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:54.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
} else if (k == 2) {
	p[0] = p[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:08:57.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:57.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:57.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (n == 3) {
	xk = org.apache.commons.math3.util.FastMath.cbrt(operand[operandOffset]);
} else {
	xk = org.apache.commons.math3.util.FastMath.pow(operand[operandOffset], 1.0 / n);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:08:59.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:08:59.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:08:59.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:02.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:02.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:02.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:04.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:04.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:04.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:06.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:06.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:06.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:09.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:09.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:09.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:11.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:11.759 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:11.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:13.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:13.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:13.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:16.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:16.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:16.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:09:18.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:18.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:18.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:09:20.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:20.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:20.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: atan(tmp1, 0, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:09:22.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:22.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:22.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset] = 
(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:09:24.336 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:24.336 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:24.337 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i < tmp2.length; ++i) {
	result[resultOffset + i] = (-2) * tmp2[i];
},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:09:26.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:26.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:26.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if ((n & 0x1) == 0) {
	v *= x;
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:28.346 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:28.346 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:28.347 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:30.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:30.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:30.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:32.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:32.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:32.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:34.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:34.336 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:34.337 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coeff = org.apache.commons.math3.util.FastMath.sqrt(f),commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:36.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:36.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:36.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double x2 = x * x,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:38.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:38.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:38.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[0] = -1,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for atan2 in DSCompiler.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:09:40.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:40.444 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:40.445 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] p = new double[order],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:09:42.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:42.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:42.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:09:45.469 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:45.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:45.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:09:47.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:47.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:47.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: product *= operand[operandOffset + mappingIJ[k]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:09:49.900 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:49.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:49.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = 2; k < mappingIJ.length; ++k) {
	product *= operand[operandOffset + mappingIJ[k]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: product *= operand[operandOffset + mappingIJ[k]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:09:52.479 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:52.479 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:52.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: r += product,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 2; k < mappingIJ.length; ++k) {
	product *= operand[operandOffset + mappingIJ[k]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:09:55.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:55.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:55.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: r += product,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:09:57.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:57.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:57.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < compIndirection.length; ++i) {
	final int[][] mappingI = compIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		final int[] mappingIJ = mappingI[j];
		double product = mappingIJ[0] * f[mappingIJ[1]];
		for (int k = 2; k < mappingIJ.length; ++k) {
			product *= operand[operandOffset + mappingIJ[k]];
		}
		r += product;
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:09:59.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:09:59.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:09:59.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < compIndirection.length; ++i) {
	final int[][] mappingI = compIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		final int[] mappingIJ = mappingI[j];
		double product = mappingIJ[0] * f[mappingIJ[1]];
		for (int k = 2; k < mappingIJ.length; ++k) {
			product *= operand[operandOffset + mappingIJ[k]];
		}
		r += product;
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:00.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:00.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:00.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 2; k < mappingIJ.length; ++k) {
	product *= operand[operandOffset + mappingIJ[k]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:02.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:02.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:02.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:05.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:05.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:05.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:07.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:07.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:07.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:10.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:10.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:10.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] orders = getPartialDerivativeOrders(i),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: product *= operand[operandOffset + mappingIJ[k]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:12.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:12.395 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:12.396 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] orders = getPartialDerivativeOrders(i),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:14.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:14.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:14.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] orders = getPartialDerivativeOrders(i),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:10:17.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:17.328 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:17.329 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] orders = getPartialDerivativeOrders(i),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:19.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:19.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:19.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double term = ds[dsOffset + i],commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: product *= operand[operandOffset + mappingIJ[k]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:22.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:22.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:22.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double term = ds[dsOffset + i],commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:10:24.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:24.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:24.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double term = ds[dsOffset + i],commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] orders = getPartialDerivativeOrders(i),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:27.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:27.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:27.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:10:29.571 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:29.571 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:29.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double term = ds[dsOffset + i],commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:31.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:31.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:31.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:33.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:33.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:33.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:36.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:36.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:36.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (orders[k] > 0) {
	term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:10:38.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:38.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:38.335 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (orders[k] > 0) {
	term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:40.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:40.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:40.662 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (orders[k] > 0) {
	term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:42.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:42.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:42.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (orders[k] > 0) {
	term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:45.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:45.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:45.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = 0; k < orders.length; ++k) {
	if (orders[k] > 0) {
		term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
	}
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:10:47.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:47.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:47.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = 0; k < orders.length; ++k) {
	if (orders[k] > 0) {
		term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
	}
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:49.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:49.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:49.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = 0; k < orders.length; ++k) {
	if (orders[k] > 0) {
		term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
	}
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:10:51.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:51.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:51.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = 0; k < orders.length; ++k) {
	if (orders[k] > 0) {
		term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
	}
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (orders[k] > 0) {
	term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:10:54.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:54.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:54.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: value += term,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:10:56.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:56.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:56.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: value += term,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:10:59.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:10:59.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:10:59.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: value += term,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 0; k < orders.length; ++k) {
	if (orders[k] > 0) {
		term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
	}
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:01.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:01.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:01.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: value += term,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:03.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:03.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:03.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:11:05.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:05.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:05.916 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:11:07.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:07.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:07.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 0; k < orders.length; ++k) {
	if (orders[k] > 0) {
		term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
	}
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:11:10.294 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:10.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:10.295 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: value += term,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:12.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:12.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:12.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:11:14.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:14.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:14.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (orders[k] > 0) {
	term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:11:17.180 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:17.180 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:17.181 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: value += term,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:11:19.332 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:19.332 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:19.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added Taylor expansion for DSCompiler.

01:11:21.540 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:21.540 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:21.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:23.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:23.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:23.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 2; k < mappingIJ.length; ++k) {
	product *= operand[operandOffset + mappingIJ[k]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:26.331 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:26.331 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:26.332 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:28.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:28.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:28.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < compIndirection.length; ++i) {
	final int[][] mappingI = compIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		final int[] mappingIJ = mappingI[j];
		double product = mappingIJ[0] * f[mappingIJ[1]];
		for (int k = 2; k < mappingIJ.length; ++k) {
			product *= operand[operandOffset + mappingIJ[k]];
		}
		r += product;
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:30.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:30.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:30.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters != compiler.parameters) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:33.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:33.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:33.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order != compiler.order) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:35.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:35.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:35.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.compiler = compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order != compiler.order) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:38.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:38.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:38.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.data = new double[compiler.getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:40.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:40.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:40.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = new double[compiler.getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:42.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:42.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:42.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order != compiler.order) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:44.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:44.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:44.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:47.248 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:47.248 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:47.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters != compiler.parameters) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:49.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:49.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:49.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(parameters, order),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order != compiler.order) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:11:51.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:51.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:51.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(parameters, order),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters != compiler.parameters) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:11:53.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:53.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:53.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(parameters, order),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:55.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:55.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:55.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.data[0] = value,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:11:58.144 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:11:58.144 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:11:58.145 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.data[0] = value,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:00.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:00.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:00.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.data[0] = value,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = new double[compiler.getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:12:02.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:02.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:02.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(parameters, order, value),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order != compiler.order) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:12:05.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:05.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:05.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(parameters, order, value),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters != compiler.parameters) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:12:07.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:07.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:07.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(parameters, order, value),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(parameters, order),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:12:09.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:09.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:09.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:12:12.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:12.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:12.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(parameters, order, value),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:12:14.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:14.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:14.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters != compiler.parameters) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:12:16.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:16.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:16.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:12:18.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:18.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:18.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(parameters, order, value),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:12:20.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:20.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:20.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters != compiler.parameters) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:12:22.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:22.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:22.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:24.767 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:24.767 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:24.768 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters != compiler.parameters) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:26.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:26.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:26.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:29.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:29.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:29.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data[0] = value,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:31.578 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:31.578 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:31.579 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {

	data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:34.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:34.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:34.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {

	data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = new double[compiler.getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:36.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:36.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:36.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {

	data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:39.135 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:39.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:39.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(ds1.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:41.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:41.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:41.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(ds1.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data[0] = value,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:43.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:43.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:43.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(ds1.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {

	data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:46.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:46.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:46.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order != compiler.order) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:48.703 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:48.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:48.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:51.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:51.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:51.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(ds1.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:53.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:53.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:53.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order != compiler.order) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:55.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:55.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:55.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:12:58.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:12:58.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:12:58.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(ds1.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:00.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:00.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:00.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:02.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:02.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:02.191 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(ds3.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:04.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:04.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:04.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(ds3.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {

	data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:07.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:07.083 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:07.084 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(ds3.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:09.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:09.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:09.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(ds3.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:11.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:11.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:11.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:13.410 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:13.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:13.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(ds1.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:15.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:15.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:15.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:17.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:17.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:17.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds3.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:13:20.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:20.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:20.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:13:22.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:22.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:22.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] orders = getPartialDerivativeOrders(i),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:13:24.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:24.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:24.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:13:27.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:27.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:27.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:13:29.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:29.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:29.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:13:32.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:32.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:32.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:13:34.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:34.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:34.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:13:36.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:36.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:36.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:38.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:38.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:38.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:41.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:41.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:41.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds3.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:43.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:43.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:43.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:46.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:46.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:46.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data[0] = value,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:13:48.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:48.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:48.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(parameters, order, value),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:50.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:50.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:50.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:13:52.828 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:52.828 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:52.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:13:54.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:54.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:54.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (parameters != compiler.parameters) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(parameters, compiler.parameters);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:13:56.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:56.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:56.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < compIndirection.length; ++i) {
	final int[][] mappingI = compIndirection[i];
	double r = 0;
	for (int j = 0; j < mappingI.length; ++j) {
		final int[] mappingIJ = mappingI[j];
		double product = mappingIJ[0] * f[mappingIJ[1]];
		for (int k = 2; k < mappingIJ.length; ++k) {
			product *= operand[operandOffset + mappingIJ[k]];
		}
		r += product;
	}
	result[resultOffset + i] = r;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:13:58.717 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:13:58.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:13:58.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:14:01.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:01.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:01.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: r += product,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:14:03.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:03.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:03.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 2; k < mappingIJ.length; ++k) {
	product *= operand[operandOffset + mappingIJ[k]];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:14:05.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:05.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:05.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: product *= operand[operandOffset + mappingIJ[k]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:14:07.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:07.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:07.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:14:09.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:09.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:09.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:14:12.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:12.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:12.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:14.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:14.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:14.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, 
a3, ds3.data, 0, a4, ds4.data, 0, 
data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds4.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:14:16.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:16.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:16.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, 
a3, ds3.data, 0, a4, ds4.data, 0, 
data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:14:18.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:18.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:18.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, 
a3, ds3.data, 0, a4, ds4.data, 0, 
data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:14:20.313 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:20.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:20.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds4.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:14:22.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:22.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:22.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (derivatives.length != data.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length);
},commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds4.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:14:24.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:24.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:24.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (derivatives.length != data.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length);
},commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:14:27.210 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:27.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:27.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds4.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:14:29.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:29.295 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:29.296 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (derivatives.length != data.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length);
},commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:14:31.493 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:31.493 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:31.494 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:33.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:33.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:33.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, 
a3, ds3.data, 0, a4, ds4.data, 0, 
data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:35.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:35.579 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:35.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.data = ds.data.clone(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds4.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:37.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:37.574 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:37.575 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.data = ds.data.clone(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:39.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:39.780 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:39.781 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.getFreeParameters(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds4.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:41.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:41.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:41.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.getFreeParameters(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:43.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:43.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:43.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.getFreeParameters(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = ds.data.clone(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:45.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:45.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:45.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.getOrder(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, 
a3, ds3.data, 0, a4, ds4.data, 0, 
data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:47.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:47.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:47.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.getOrder(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = ds.data.clone(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:50.118 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:50.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:50.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.getOrder(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getFreeParameters(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:52.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:52.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:52.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, 
a3, ds3.data, 0, a4, ds4.data, 0, 
data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:54.364 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:54.364 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:54.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getFreeParameters(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:56.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:56.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:56.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getOrder(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:14:58.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:14:58.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:14:58.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data[compiler.getPartialDerivativeIndex(orders)],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:00.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:00.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:00.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data[compiler.getPartialDerivativeIndex(orders)],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getOrder(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:02.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:02.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:02.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data[compiler.getPartialDerivativeIndex(orders)],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:15:04.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:04.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:04.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:15:06.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:06.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:06.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:15:08.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:08.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:08.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, 
a3, ds3.data, 0, a4, ds4.data, 0, 
data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:15:10.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:10.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:10.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds4.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:13.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:13.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:13.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(this),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:15.230 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:15.230 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:15.231 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(this),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getOrder(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:17.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:17.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:17.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(this),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data[compiler.getPartialDerivativeIndex(orders)],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:19.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:19.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:19.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[0] += a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:21.402 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:21.402 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:21.403 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[0] += a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:23.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:23.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:23.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[0] += a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(this),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:25.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:25.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:25.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return ds,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = ds.data.clone(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:28.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:28.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:28.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return ds,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data[compiler.getPartialDerivativeIndex(orders)],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:30.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:30.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:30.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return ds,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[0] += a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:32.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:32.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:32.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(a.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = ds.data.clone(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:35.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:35.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:35.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(a.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data[compiler.getPartialDerivativeIndex(orders)],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:37.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:37.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:37.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(a.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[0] += a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:39.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:39.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:39.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(a.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return ds,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:41.403 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:41.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:41.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.add(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getFreeParameters(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:43.330 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:43.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:43.331 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.add(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(this),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:45.337 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:45.337 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:45.338 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.add(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return ds,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:47.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:47.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:47.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.add(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(a.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:49.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:49.395 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:49.396 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getFreeParameters(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:51.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:51.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:51.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[0] += a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:54.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:54.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:54.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(a.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:56.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:56.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:56.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.add(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:15:59.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:15:59.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:15:59.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return multiply(((double) (n))),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.subtract(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:01.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:01.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:01.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] *= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return multiply(((double) (n))),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:03.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:03.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:03.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] *= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] *= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:05.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:05.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:05.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure result = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] *= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:07.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:07.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:07.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.multiply(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure result = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:09.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:09.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:09.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return result,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.multiply(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:11.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:11.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:11.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] /= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return result,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:14.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:14.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:14.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] /= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] /= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:16.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:16.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:16.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.divide(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] /= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:18.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:18.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:18.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[0] = ds.data[0] % a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.divide(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:20.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:20.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:20.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.remainder(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[0] = ds.data[0] % a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:22.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:22.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:22.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.remainder(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:24.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:24.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:24.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] = -data[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:16:26.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:26.961 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:26.962 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = -data[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:28.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:28.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:28.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:30.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:30.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:30.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] /= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:33.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:33.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:33.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] *= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:35.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:35.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:35.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return multiply(((double) (n))),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:37.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:37.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:37.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.subtract(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:39.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:39.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:39.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return this,commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] /= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:42.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:42.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:42.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return this,commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] *= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:44.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:44.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:44.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return this,commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return multiply(((double) (n))),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:46.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:46.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:46.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return this,commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.subtract(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added abs to DerivativeStructure.

01:16:48.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:48.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:48.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return this,commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:51.099 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:51.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:51.100 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return result,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:53.554 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:53.555 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:53.556 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] *= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:16:55.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:55.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:55.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.subtract(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added abs to DerivativeStructure.

01:16:58.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:16:58.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:16:58.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return this,commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:17:00.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:00.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:00.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:17:02.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:02.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:02.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:17:04.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:04.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:04.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = -data[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:17:07.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:07.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:07.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.remainder(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:17:10.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:10.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:10.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] /= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added abs to DerivativeStructure.

01:17:12.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:12.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:12.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:17:15.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:15.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:15.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] *= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:17:17.137 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:17.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:17.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return multiply(((double) (n))),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:17:19.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:19.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:19.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.subtract(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:22.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:22.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:22.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.add(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:24.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:24.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:24.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(a.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:26.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:26.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:26.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return ds,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:28.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:28.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:28.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[0] += a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:30.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:30.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:30.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(this),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:32.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:32.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:32.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data[compiler.getPartialDerivativeIndex(orders)],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:35.163 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:35.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:35.164 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data[0],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:37.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:37.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:37.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getOrder(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:38.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:38.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:38.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getFreeParameters(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:41.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:41.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:41.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = ds.compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:17:43.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:43.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:43.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:17:45.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:45.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:45.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (derivatives.length != data.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length);
},commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:17:47.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:47.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:47.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added Taylor expansion for DSCompiler.

01:17:49.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:49.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:49.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added Taylor expansion for DSCompiler.

01:17:52.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:52.136 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:52.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] orders = getPartialDerivativeOrders(i),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added Taylor expansion for DSCompiler.

01:17:54.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:54.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:54.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added Taylor expansion for DSCompiler.

01:17:56.466 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:56.467 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:56.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:17:58.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:17:58.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:17:58.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] mappingIJ = mappingI[j],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:18:01.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:01.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:01.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(parameters, order, value),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:18:03.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:03.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:03.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added Taylor expansion for DSCompiler.

01:18:06.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:06.094 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:06.095 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:18:08.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:08.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:08.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:18:10.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:10.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:10.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = -data[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:18:13.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:13.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:13.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.remainder(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:18:15.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:15.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:15.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] /= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:18:17.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:17.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:18.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return add(-a),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:18:20.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:20.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:20.199 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (derivatives.length != data.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length);
},commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:18:22.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:22.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:22.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.getOrder(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:18:24.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:24.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:24.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, 
a3, ds3.data, 0, a4, ds4.data, 0, 
data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:18:26.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:26.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:26.705 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:18:28.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:28.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:28.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds4.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:30.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:30.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:30.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds3.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:32.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:32.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:32.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:35.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:35.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:35.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:37.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:37.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:37.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(ds1.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:39.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:39.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:39.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {

	data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:41.887 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:41.887 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:41.888 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: data[org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(index, order).getSize()] = 1.0,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:43.975 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:43.976 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:43.976 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data[0] = value,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:46.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:46.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:46.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = new double[compiler.getSize()],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:48.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:48.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:48.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.compiler = compiler,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:50.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:50.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:50.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(order, compiler.order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:52.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:52.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:52.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < mappingI.length; ++j) {
	final int[] mappingIJ = mappingI[j];
	double product = mappingIJ[0] * f[mappingIJ[1]];
	for (int k = 2; k < mappingIJ.length; ++k) {
		product *= operand[operandOffset + mappingIJ[k]];
	}
	r += product;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:18:54.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:54.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:54.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:56.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:56.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:56.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:18:58.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:18:58.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:18:58.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:19:00.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:00.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:00.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:19:02.685 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:02.685 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:02.686 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:19:05.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:05.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:05.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (derivatives.length != data.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length);
},commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added abs to DerivativeStructure.

01:19:07.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:07.451 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:07.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed parameters name for consistency with getters and DSCompiler.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:19:09.694 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:09.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:09.695 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:19:12.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:12.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:12.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:19:14.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:14.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:14.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(parameters, order, value),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:19:15.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:15.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:15.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:19:18.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:18.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:18.257 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:19:20.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:20.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:20.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:19:22.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:22.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:22.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:19:24.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:24.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:24.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:19:26.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:26.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:26.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp2 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:19:29.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:29.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:29.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added support for atan2 in DSCompiler.

01:19:31.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:31.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:31.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:19:33.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:33.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:33.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:19:36.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:36.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:36.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:38.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:38.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:38.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = -org.apache.commons.math3.util.FastMath.sin(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:19:41.042 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:41.042 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:41.043 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:43.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:43.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:43.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {








	final double[] p = new double[order + 2];
	p[1] = 1;
	final double t2 = t * t;
	for (int n = 1; n <= order; ++n) {


		double v = 0;
		p[n + 1] = n * p[n];
		for (int k = n + 1; k >= 0; k -= 2) {
			v = (v * t2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= t;
		}

		function[n] = v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:45.348 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:45.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:45.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.asin(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:47.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:47.431 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:47.432 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:49.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:49.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:49.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:51.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:51.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:51.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = -data[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:53.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:53.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:53.472 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:55.605 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:55.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:55.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[0] = ds.data[0] % a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:57.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:57.615 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:57.616 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return result,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:19:59.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:19:59.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:19:59.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.add(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:20:01.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:01.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:01.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added Taylor expansion for DSCompiler.

01:20:03.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:03.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:03.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:20:05.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:05.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:05.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double product = mappingIJ[0] * f[mappingIJ[1]],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:20:07.607 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:07.607 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:07.608 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:20:09.804 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:09.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:09.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:20:12.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:12.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:12.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[][] mappingI = compIndirection[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:20:14.294 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:14.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:14.295 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {







	final double[] q = new double[order];
	q[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 + x2);
	double coeff = f;
	function[1] = coeff * q[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		q[n - 1] = (-n) * q[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + q[k];
			if (k > 2) {
				q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
			} else if (k == 2) {
				q[0] = q[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:20:16.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:16.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:16.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.atan(x),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:20:18.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:18.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:18.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = 1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:20:21.067 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:21.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:21.068 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {







	final double[] p = new double[order];
	p[0] = -1;
	final double x2 = x * x;
	final double f = 1.0 / (1 - x2);
	double coeff = org.apache.commons.math3.util.FastMath.sqrt(f);
	function[1] = coeff * p[0];
	for (int n = 2; n <= order; ++n) {


		double v = 0;
		p[n - 1] = (n - 1) * p[n - 2];
		for (int k = n - 1; k >= 0; k -= 2) {
			v = (v * x2) + p[k];
			if (k > 2) {
				p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
			} else if (k == 2) {
				p[0] = p[1];
			}
		}
		if ((n & 0x1) == 0) {
			v *= x;
		}

		coeff *= f;
		function[n] = coeff * v;

	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:20:22.977 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:22.977 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:22.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = t,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:20:25.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:25.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:25.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.cos(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:20:27.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:27.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:27.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: xk = org.apache.commons.math3.util.FastMath.sqrt(operand[operandOffset]),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added support for atan2 in DSCompiler.

01:20:29.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:29.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:29.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (x[xOffset] >= 0) {


	add(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	for (int i = 0; i < tmp2.length; ++i) {
		result[resultOffset + i] = 2 * tmp2[i];
	}

} else {


	subtract(tmp1, 0, x, xOffset, tmp2, 0);
	divide(y, yOffset, tmp2, 0, tmp1, 0);
	atan(tmp1, 0, tmp2, 0);
	result[resultOffset] = 
	(tmp2[0] <= 0 ? -org.apache.commons.math3.util.FastMath.PI : org.apache.commons.math3.util.FastMath.PI) - (2 * tmp2[0]);
	for (int i = 1; i < tmp2.length; ++i) {
		result[resultOffset + i] = (-2) * tmp2[i];
	}

},commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:20:31.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:31.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:31.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	p[n - 1] = (n - 1) * p[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + (((2 * n) - k) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:20:33.134 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:33.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:33.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:20:35.093 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:35.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:35.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:20:37.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:37.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:37.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:20:39.565 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:39.565 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:39.566 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:20:41.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:41.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:41.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:20:44.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:44.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:44.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (derivatives.length != data.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length);
},commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:20:46.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:46.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:46.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:20:48.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:48.467 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:48.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:20:50.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:50.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:50.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (orders[k] > 0) {
	term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:20:52.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:52.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:52.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added abs to DerivativeStructure.

01:20:54.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:54.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:54.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return this,commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added abs to DerivativeStructure.

01:20:56.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:56.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:56.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:20:58.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:20:58.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:20:58.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:21:00.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:00.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:00.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:21:02.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:02.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:02.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:21:04.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:04.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:04.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:21:06.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:06.862 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:06.863 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:21:08.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:08.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:08.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:21:10.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:10.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:10.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: add(tmp1, 0, x, xOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:21:12.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:12.681 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:12.682 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(y, yOffset, y, yOffset, tmp2, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:21:14.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:14.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:14.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:21:16.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:16.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:16.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:21:19.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:19.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:19.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:21:21.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:21.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:21.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return result,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Simplified tangent higher derivatives computation.

01:21:24.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:24.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:24.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * t2) + p[k],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:21:26.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:26.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:26.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Simplified tangent higher derivatives computation.

01:21:28.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:28.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:28.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[1] = 1,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Simplified tangent higher derivatives computation.

01:21:30.786 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:30.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:30.787 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.tan(operand[operandOffset]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed too large memory consumption in DSCompiler.
, ingredientB: Simplified tangent higher derivatives computation.

01:21:32.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:33.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:33.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int diag = 0; diag <= (parameters + order); ++diag) {
	for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
		final int p = diag - o;
		if (newCache[p][o] == null) {
			final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
			final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
			newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
		}
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

01:21:35.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:35.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:35.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int o = org.apache.commons.math3.util.FastMath.max(0, diag - parameters); o <= org.apache.commons.math3.util.FastMath.min(order, diag); ++o) {
	final int p = diag - o;
	if (newCache[p][o] == null) {
		final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
		final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
		newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
	}
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

01:21:37.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:37.463 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:37.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (cache[parameters][order] != null) {

	return cache[parameters][order];
},commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

01:21:39.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:39.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:39.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:41.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:41.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:41.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:43.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:43.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:43.691 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] = -data[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:45.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:45.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:45.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:47.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:47.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:47.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.remainder(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:49.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:49.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:49.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[0] = ds.data[0] % a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:51.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:51.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:51.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.divide(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:53.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:53.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:53.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] /= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:55.988 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:55.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:55.989 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return result,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:21:58.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:21:58.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:21:58.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] *= a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:22:01.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:01.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:01.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(this),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:22:03.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:03.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:03.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data[0] = value,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:22:05.583 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:05.583 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:05.584 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added support for atan2 in DSCompiler.

01:22:07.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:07.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:07.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: divide(y, yOffset, tmp2, 0, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:22:09.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:09.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:09.916 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + q[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:22:11.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:11.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:11.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:22:13.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:13.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:14.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(parameters, order),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:22:16.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:16.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:16.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:22:18.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:18.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:18.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:22:20.149 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:20.150 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:20.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= n - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:22.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:22.083 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:22.084 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coefficient *= n - i,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:24.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:24.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:24.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double coefficient = n,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:26.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:26.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:26.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i <= order; ++i) {
	function[i] = xk;
	xk *= inv;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:28.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:28.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:28.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = maxOrder; i > 0; --i) {
	function[i] = xk;
	xk *= operand[operandOffset];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:30.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:30.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:30.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 1; i <= order; ++i) {
	function[i] *= coefficient;
	coefficient *= p - i;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:32.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:32.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:32.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: pow(rhs, lhsOffset, -1, reciprocal, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:34.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:34.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:34.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: int derivativeOrder = orders[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:37.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:37.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:37.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:39.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:39.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:39.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < order; ++i) {
	sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:42.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:42.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:42.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.compareAndSet(cache, newCache),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:43.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:43.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:43.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < cache.length; ++i) {
	java.lang.System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:45.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:45.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:45.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int maxOrder = org.apache.commons.math3.util.FastMath.max(order, cache == null ? 0 : cache[0].length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:47.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:47.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:47.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a new package dealing with differentials.

01:22:50.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:50.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:50.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added ceil and floor to DerivativeStructure.

01:22:52.412 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:52.412 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:52.413 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.ceil(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added rint and round to DerivativeStructure.
, ingredientB: Added ceil and floor to DerivativeStructure.

01:22:54.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:54.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:54.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.rint(data[0])),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added rint and round to DerivativeStructure.
, ingredientB: Added rint and round to DerivativeStructure.

01:22:56.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:56.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:56.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.util.FastMath.round(data[0]),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.rint(data[0])),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added rint and round to DerivativeStructure.

01:22:58.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:22:58.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:22:58.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(data[0]),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:00.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:00.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:00.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(data[0]),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added rint and round to DerivativeStructure.

01:23:02.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:02.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:02.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(data[0]),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.rint(data[0])),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:04.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:04.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:04.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(data[0]),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added rint and round to DerivativeStructure.

01:23:07.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:07.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:07.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: long m = java.lang.Double.doubleToLongBits(data[0]),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(data[0]),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added rint and round to DerivativeStructure.

01:23:09.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:09.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:09.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(data[0]),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:12.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:12.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:12.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:23:14.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:14.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:14.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long m = java.lang.Double.doubleToLongBits(data[0]),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added rint and round to DerivativeStructure.

01:23:16.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:16.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:16.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(data[0]),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:23:19.016 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:19.016 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:19.017 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:21.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:21.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:21.212 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:23:23.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:23.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:23.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.util.FastMath.getExponent(data[0]),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long m = java.lang.Double.doubleToLongBits(data[0]),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:23:25.922 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:25.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:25.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.util.FastMath.getExponent(data[0]),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:28.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:28.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:28.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.util.FastMath.getExponent(data[0]),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:23:30.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:30.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:30.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long m = java.lang.Double.doubleToLongBits(data[0]),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:23:32.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:32.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:32.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.getExponent(data[0]),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:35.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:35.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:35.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:23:37.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:37.435 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:37.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n);
},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:23:39.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:39.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:39.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n);
},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:42.313 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:42.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:42.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n);
},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:23:44.709 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:44.710 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:44.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: x.compiler.checkCompatibility(y.compiler),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:23:46.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:46.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:46.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: x.compiler.checkCompatibility(y.compiler),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:48.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:48.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:48.799 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: x.compiler.checkCompatibility(y.compiler),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:23:51.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:51.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:51.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: x.compiler.checkCompatibility(y.compiler),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n);
},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:23:53.076 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:53.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:53.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.POSITIVE_INFINITY),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:23:55.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:55.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:55.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.POSITIVE_INFINITY),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n);
},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:23:57.351 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:57.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:57.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.POSITIVE_INFINITY),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:23:59.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:23:59.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:23:59.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.POSITIVE_INFINITY),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: x.compiler.checkCompatibility(y.compiler),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:24:01.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:01.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:01.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.NaN),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:03.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:03.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:03.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.NaN),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: x.compiler.checkCompatibility(y.compiler),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:24:05.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:05.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:05.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.NaN),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:07.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:07.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:07.342 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.NaN),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.POSITIVE_INFINITY),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:09.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:09.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:09.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int expX = x.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.getExponent(data[0]),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:11.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:11.615 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:11.616 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int expX = x.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.POSITIVE_INFINITY),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:24:14.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:14.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:14.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int expX = x.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:16.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:16.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:16.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int expX = x.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.NaN),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:18.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:18.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:18.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int expY = y.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.getExponent(data[0]),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:20.992 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:20.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:20.996 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int expY = y.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.POSITIVE_INFINITY),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:23.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:23.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:23.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int expY = y.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int expX = x.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:24:25.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:25.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:25.799 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int expY = y.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:27.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:27.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:27.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return x.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:29.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:29.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:29.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return x.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
x.compiler.getFreeParameters(), 
java.lang.Double.NaN),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:32.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:32.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:32.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return x.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int expY = y.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:24:34.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:34.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:34.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return x.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:36.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:36.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:36.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return y.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:38.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:38.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:38.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return y.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int expX = x.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:40.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:40.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:40.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return y.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return x.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:24:42.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:42.431 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:42.432 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return y.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:44.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:44.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:44.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int middleExp = (expX + expY) / 2,commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:46.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:46.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:46.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:49.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:49.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:49.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:51.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:51.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:51.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return scaledH.scalb(middleExp),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:53.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:53.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:53.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (expY > (expX + 27)) {

	return y.abs();
} else {


	final int middleExp = (expX + expY) / 2;


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
	scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


	return scaledH.scalb(middleExp);

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return scaledH.scalb(middleExp),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:55.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:55.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:55.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (expX > (expY + 27)) {

	return x.abs();
} else if (expY > (expX + 27)) {

	return y.abs();
} else {


	final int middleExp = (expX + expY) / 2;


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
	scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


	return scaledH.scalb(middleExp);

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (expY > (expX + 27)) {

	return y.abs();
} else {


	final int middleExp = (expX + expY) / 2;


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
	scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


	return scaledH.scalb(middleExp);

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:57.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:57.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:57.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.isNaN(x.data[0]) || java.lang.Double.isNaN(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.NaN);
} else {

	final int expX = x.getExponent();
	final int expY = y.getExponent();
	if (expX > (expY + 27)) {

		return x.abs();
	} else if (expY > (expX + 27)) {

		return y.abs();
	} else {


		final int middleExp = (expX + expY) / 2;


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
		scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


		return scaledH.scalb(middleExp);

	}

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (expX > (expY + 27)) {

	return x.abs();
} else if (expY > (expX + 27)) {

	return y.abs();
} else {


	final int middleExp = (expX + expY) / 2;


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
	scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


	return scaledH.scalb(middleExp);

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:24:59.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:24:59.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:24:59.760 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.isInfinite(x.data[0]) || java.lang.Double.isInfinite(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.POSITIVE_INFINITY);
} else if (java.lang.Double.isNaN(x.data[0]) || java.lang.Double.isNaN(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.NaN);
} else {

	final int expX = x.getExponent();
	final int expY = y.getExponent();
	if (expX > (expY + 27)) {

		return x.abs();
	} else if (expY > (expX + 27)) {

		return y.abs();
	} else {


		final int middleExp = (expX + expY) / 2;


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
		scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


		return scaledH.scalb(middleExp);

	}

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.isNaN(x.data[0]) || java.lang.Double.isNaN(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.NaN);
} else {

	final int expX = x.getExponent();
	final int expY = y.getExponent();
	if (expX > (expY + 27)) {

		return x.abs();
	} else if (expY > (expX + 27)) {

		return y.abs();
	} else {


		final int middleExp = (expX + expY) / 2;


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
		scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


		return scaledH.scalb(middleExp);

	}

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:25:01.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:01.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:01.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.isInfinite(x.data[0]) || java.lang.Double.isInfinite(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.POSITIVE_INFINITY);
} else if (java.lang.Double.isNaN(x.data[0]) || java.lang.Double.isNaN(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.NaN);
} else {

	final int expX = x.getExponent();
	final int expY = y.getExponent();
	if (expX > (expY + 27)) {

		return x.abs();
	} else if (expY > (expX + 27)) {

		return y.abs();
	} else {


		final int middleExp = (expX + expY) / 2;


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
		scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


		return scaledH.scalb(middleExp);

	}

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:25:03.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:03.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:03.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (f.length != (getOrder() + 1)) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1);
},commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:25:05.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:05.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:05.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (f.length != (getOrder() + 1)) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1);
},commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:25:07.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:07.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:07.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:09.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:09.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:09.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return rootN(2),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:11.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:11.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:11.830 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return rootN(3),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(2),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:13.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:13.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:13.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.rootN(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(3),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:15.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:15.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:15.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.rootN(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:17.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:17.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:17.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:19.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:19.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:19.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.class,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:21.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:21.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:21.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.Field<org.apache.commons.math3.analysis.differentiation.DerivativeStructure>() {


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure getZero() {
		return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure getOne() {
		return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);
	}


	public java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.analysis.differentiation.DerivativeStructure>> getRuntimeClass() {
		return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.class;
	}

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.class,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:23.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:23.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:23.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, p, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.Field<org.apache.commons.math3.analysis.differentiation.DerivativeStructure>() {


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure getZero() {
		return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure getOne() {
		return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);
	}


	public java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.analysis.differentiation.DerivativeStructure>> getRuntimeClass() {
		return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.class;
	}

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:25:25.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:25.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:25.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, p, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:25:27.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:27.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:27.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(e.compiler),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added ceil and floor to DerivativeStructure.

01:25:29.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:29.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:29.472 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.ceil(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added ceil and floor to DerivativeStructure.

01:25:31.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:31.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:31.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added rint and round to DerivativeStructure.

01:25:33.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:33.243 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:33.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(data[0]),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:25:35.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:35.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:35.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.getExponent(data[0]),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:25:37.369 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:37.369 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:37.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return x.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:25:39.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:39.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:39.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added getExponent, scalb and hypot to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:25:42.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:42.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:42.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int middleExp = (expX + expY) / 2,commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return y.abs(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:25:44.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:44.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:44.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:25:46.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:46.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:46.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, p, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:25:48.965 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:48.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:48.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.class,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:25:51.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:51.060 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:51.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(3),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:25:53.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:53.533 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:53.534 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (expX > (expY + 27)) {

	return x.abs();
} else if (expY > (expX + 27)) {

	return y.abs();
} else {


	final int middleExp = (expX + expY) / 2;


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
	scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


	return scaledH.scalb(middleExp);

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:25:55.970 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:55.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:55.971 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (f.length != (getOrder() + 1)) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1);
},commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:25:58.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:25:58.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:25:58.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.isInfinite(x.data[0]) || java.lang.Double.isInfinite(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.POSITIVE_INFINITY);
} else if (java.lang.Double.isNaN(x.data[0]) || java.lang.Double.isNaN(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.NaN);
} else {

	final int expX = x.getExponent();
	final int expY = y.getExponent();
	if (expX > (expY + 27)) {

		return x.abs();
	} else if (expY > (expX + 27)) {

		return y.abs();
	} else {


		final int middleExp = (expX + expY) / 2;


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
		scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


		return scaledH.scalb(middleExp);

	}

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:26:00.192 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:00.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:00.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:02.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:02.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:02.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(e.compiler),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:04.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:04.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:04.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:26:06.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:06.398 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:06.399 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:08.858 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:08.858 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:08.859 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:11.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:11.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:11.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(e.compiler),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:13.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:13.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:13.627 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:15.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:15.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:15.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:18.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:18.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:18.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log1p(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:20.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:20.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:20.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log1p(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(e.compiler),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:26:22.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:22.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:22.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log1p(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:24.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:24.463 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:24.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:26:26.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:26.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:26.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:26:28.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:28.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:28.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:26:30.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:30.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:30.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:32.503 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:32.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:32.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:34.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:34.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:34.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:26:36.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:36.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:36.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.sin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:38.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:38.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:38.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.sin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:40.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:40.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:40.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.sin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:26:42.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:42.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:42.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.tan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:44.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:44.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:44.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.tan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:46.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:46.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:46.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.tan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.sin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:48.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:48.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:48.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.acos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:50.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:50.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:50.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.acos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.sin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:52.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:52.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:52.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.acos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.tan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:54.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:54.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:54.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:55.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:55.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:55.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.sin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:57.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:57.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:57.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.acos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:26:59.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:26:59.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:26:59.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.atan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:01.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:01.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:01.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.atan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.tan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:03.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:03.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:03.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.atan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:05.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:05.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:05.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y.compiler.checkCompatibility(x.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:07.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:07.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:07.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y.compiler.checkCompatibility(x.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.acos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:09.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:09.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:09.624 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y.compiler.checkCompatibility(x.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.atan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:11.510 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:11.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:11.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure result = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(y.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:13.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:13.551 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:13.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure result = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(y.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:15.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:15.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:15.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure result = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(y.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y.compiler.checkCompatibility(x.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:17.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:17.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:17.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:19.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:19.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:19.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:21.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:21.243 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:21.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y.compiler.checkCompatibility(x.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:23.149 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:23.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:23.150 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure result = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(y.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:25.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:25.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:25.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:26.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:26.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:26.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:28.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:28.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:28.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:30.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:30.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:30.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:32.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:32.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:32.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:34.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:34.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:34.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:36.703 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:36.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:36.705 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:38.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:38.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:38.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:40.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:40.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:40.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.variables = variables,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:42.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:42.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:42.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.data = data,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:44.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:44.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:44.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.data = data,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.variables = variables,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:46.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:46.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:46.440 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(variables, order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.variables = variables,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:48.447 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:48.447 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:48.448 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(variables, order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = data,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:50.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:50.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:50.342 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.variables = variables,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:27:52.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:52.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:52.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(variables, order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:27:54.149 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:54.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:54.150 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = data,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:56.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:56.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:56.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:27:57.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:57.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:57.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:27:59.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:27:59.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:27:59.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:28:01.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:01.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:01.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.variables = variables,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:28:03.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:03.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:03.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:28:05.546 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:05.546 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:05.547 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:28:07.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:07.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:07.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:28:09.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:09.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:09.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.nbPoints = nbPoints,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.variables = variables,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:28:11.331 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:11.332 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:11.333 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.nbPoints = nbPoints,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:28:13.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:13.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:13.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.nbPoints = nbPoints,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:28:15.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:15.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:15.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.nbPoints = nbPoints,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:28:17.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:17.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:17.186 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NotPositiveException(stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:28:19.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:19.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:19.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NotPositiveException(stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:28:20.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:20.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:20.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NotPositiveException(stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:28:22.847 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:22.847 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:22.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NotPositiveException(stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.nbPoints = nbPoints,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:28:24.828 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:24.828 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:24.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:28:26.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:26.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:26.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log1p(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:28:28.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:28.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:28.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:28:30.470 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:30.470 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:30.471 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added a new package dealing with differentials.

01:28:32.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:32.450 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:32.451 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:28:34.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:34.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:34.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:28:36.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:36.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:36.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:28:38.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:38.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:38.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:28:40.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:40.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:40.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added a new package dealing with differentials.

01:28:42.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:42.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:42.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:28:43.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:43.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:43.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:28:45.994 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:45.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:45.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:28:48.534 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:48.534 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:48.535 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NotPositiveException(stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:28:51.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:51.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:51.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(variables, order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:28:53.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:53.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:53.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.variables = variables,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:28:55.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:55.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:55.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:28:58.350 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:28:58.350 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:28:58.351 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:29:00.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:00.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:00.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:29:02.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:02.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:02.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.sin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:29:05.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:05.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:05.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.tan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:29:07.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:07.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:07.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.acos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:29:09.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:09.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:09.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:29:11.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:11.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:11.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y.compiler.checkCompatibility(x.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:29:13.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:13.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:13.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:16.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:16.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:16.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.stepSize = stepSize,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:18.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:18.201 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:18.202 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return nbPoints,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.stepSize = stepSize,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:20.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:20.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:20.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return stepSize,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return nbPoints,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:22.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:22.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:22.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] top = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return stepSize,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:25.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:25.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:25.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] bottom = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] top = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:27.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:27.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:27.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: bottom[i] = y[i],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] bottom = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:29.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:29.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:29.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: bottom[i] = y[i],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:31.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:31.640 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:31.641 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 1; j <= i; ++j) {
	bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:33.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:33.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:33.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: top[i] = bottom[0],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 1; j <= i; ++j) {
	bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:36.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:36.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:36.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {


	bottom[i] = y[i];
	for (int j = 1; j <= i; ++j) {
		bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
	}


	top[i] = bottom[0];

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: top[i] = bottom[0],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:38.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:38.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:38.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < nbPoints; ++i) {


	bottom[i] = y[i];
	for (int j = 1; j <= i; ++j) {
		bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
	}


	top[i] = bottom[0];

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:29:41.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:41.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:41.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int parameters = t.getFreeParameters(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:43.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:43.474 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:43.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int parameters = t.getFreeParameters(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: bottom[i] = y[i],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:45.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:45.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:45.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int parameters = t.getFreeParameters(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: top[i] = bottom[0],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:29:48.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:48.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:48.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int parameters = t.getFreeParameters(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:50.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:50.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:50.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int parameters = t.getFreeParameters(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < nbPoints; ++i) {


	bottom[i] = y[i];
	for (int j = 1; j <= i; ++j) {
		bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
	}


	top[i] = bottom[0];

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:52.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:52.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:52.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] derivatives = t.getAllDerivatives(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: bottom[i] = y[i],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:55.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:55.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:55.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] derivatives = t.getAllDerivatives(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < nbPoints; ++i) {


	bottom[i] = y[i];
	for (int j = 1; j <= i; ++j) {
		bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
	}


	top[i] = bottom[0];

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:29:57.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:57.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:57.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] derivatives = t.getAllDerivatives(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:29:59.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:29:59.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:29:59.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] derivatives = t.getAllDerivatives(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int parameters = t.getFreeParameters(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:02.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:02.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:02.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure interpolation = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 0.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:04.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:04.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:04.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure interpolation = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 0.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int parameters = t.getFreeParameters(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:30:07.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:07.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:07.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure interpolation = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 0.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:09.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:09.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:09.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure interpolation = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 0.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] derivatives = t.getAllDerivatives(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:12.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:12.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:12.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure monomial = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 1.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:14.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:14.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:14.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure monomial = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 1.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int parameters = t.getFreeParameters(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:16.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:16.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:16.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure monomial = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 1.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure interpolation = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 0.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:30:18.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:18.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:18.396 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure monomial = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 1.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:20.336 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:20.337 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:20.338 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: interpolation = interpolation.add(monomial.multiply(top[i])),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 1; j <= i; ++j) {
	bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:22.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:22.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:22.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: interpolation = interpolation.add(monomial.multiply(top[i])),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] derivatives = t.getAllDerivatives(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:24.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:24.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:24.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: interpolation = interpolation.add(monomial.multiply(top[i])),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure monomial = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 1.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:30:26.970 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:26.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:26.971 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: interpolation = interpolation.add(monomial.multiply(top[i])),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:29.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:29.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:29.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 1; j <= i; ++j) {
	bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:31.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:31.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:31.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure interpolation = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 0.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:34.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:34.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:34.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: interpolation = interpolation.add(monomial.multiply(top[i])),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:30:36.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:36.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:36.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:30:38.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:38.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:38.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:30:40.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:40.579 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:40.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log1p(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:30:42.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:42.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:42.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:30:44.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:44.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:44.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:30:46.849 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:46.849 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:46.850 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:48.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:48.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:48.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:50.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:50.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:50.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NotPositiveException(stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:30:52.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:52.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:52.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a new package dealing with differentials.

01:30:54.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:54.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:54.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:30:56.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:56.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:56.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:30:58.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:30:58.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:30:58.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(variables, order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:00.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:00.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:00.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = data,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:02.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:02.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:02.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.variables = variables,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:04.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:04.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:04.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:06.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:06.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:06.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:09.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:09.276 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:09.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure result = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(y.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:11.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:11.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:11.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y.compiler.checkCompatibility(x.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:13.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:13.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:13.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:16.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:16.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:16.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.cos(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:18.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:18.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:18.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:20.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:20.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:20.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added ceil and floor to DerivativeStructure.

01:31:22.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:22.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:22.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.ceil(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:31:24.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:24.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:24.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:31:26.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:26.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:26.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.atan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:31:28.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:28.517 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:28.518 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 1; j <= i; ++j) {
	bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:31:30.722 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:30.722 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:30.723 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:31:32.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:32.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:32.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.sin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:31:34.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:34.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:34.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:31:37.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:37.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:37.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.exp(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:39.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:39.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:39.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, p, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:41.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:41.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:41.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.Field<org.apache.commons.math3.analysis.differentiation.DerivativeStructure>() {


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure getZero() {
		return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure getOne() {
		return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);
	}


	public java.lang.Class<? extends org.apache.commons.math3.FieldElement<org.apache.commons.math3.analysis.differentiation.DerivativeStructure>> getRuntimeClass() {
		return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.class;
	}

},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:44.210 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:44.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:44.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.analysis.differentiation.DerivativeStructure.class,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:46.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:46.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:46.677 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:48.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:48.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:48.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:50.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:50.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:50.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.rootN(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:52.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:52.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:52.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(3),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:31:54.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:54.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:54.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added signum to DerivativeStructure.

01:31:56.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:56.811 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:56.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:31:58.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:31:58.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:31:58.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (f.length != (getOrder() + 1)) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1);
},commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:32:00.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:00.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:00.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:02.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:02.961 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:02.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: interpolation = interpolation.add(monomial.multiply(top[i])),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:04.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:04.835 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:04.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure monomial = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 1.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:06.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:06.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:06.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] derivatives = t.getAllDerivatives(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:08.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:08.761 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:08.762 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 1; j <= i; ++j) {
	bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:10.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:10.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:10.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (stepSize <= 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(stepSize);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:32:12.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:12.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:12.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:32:14.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:14.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:14.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added Taylor expansion for DSCompiler.

01:32:16.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:16.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:16.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added signum to DerivativeStructure.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:32:18.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:18.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:18.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:32:20.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:20.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:20.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.isInfinite(x.data[0]) || java.lang.Double.isInfinite(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.POSITIVE_INFINITY);
} else if (java.lang.Double.isNaN(x.data[0]) || java.lang.Double.isNaN(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.NaN);
} else {

	final int expX = x.getExponent();
	final int expY = y.getExponent();
	if (expX > (expY + 27)) {

		return x.abs();
	} else if (expY > (expX + 27)) {

		return y.abs();
	} else {


		final int middleExp = (expX + expY) / 2;


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
		scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


		return scaledH.scalb(middleExp);

	}

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:32:22.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:22.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:22.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.isNaN(x.data[0]) || java.lang.Double.isNaN(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.NaN);
} else {

	final int expX = x.getExponent();
	final int expY = y.getExponent();
	if (expX > (expY + 27)) {

		return x.abs();
	} else if (expY > (expX + 27)) {

		return y.abs();
	} else {


		final int middleExp = (expX + expY) / 2;


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
		scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


		return scaledH.scalb(middleExp);

	}

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:32:24.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:24.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:24.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (expY > (expX + 27)) {

	return y.abs();
} else {


	final int middleExp = (expX + expY) / 2;


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
	scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


	return scaledH.scalb(middleExp);

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:32:26.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:26.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:26.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:32:28.168 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:28.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:28.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: x.compiler.checkCompatibility(y.compiler),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added copySign to DerivativeStructure.

01:32:30.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:30.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:30.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added rint and round to DerivativeStructure.

01:32:32.456 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:32.456 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:32.457 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.rint(data[0])),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added ceil and floor to DerivativeStructure.

01:32:34.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:34.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:34.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:32:37.210 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:37.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:37.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:32:39.767 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:39.767 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:39.768 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:32:42.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:42.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:42.364 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log1p(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:32:44.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:44.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:44.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(e.compiler),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added ceil and floor to DerivativeStructure.

01:32:47.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:47.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:47.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log1p(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.ceil(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:49.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:49.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:49.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: monomial = monomial.multiply(deltaX),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:51.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:51.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:51.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	interpolation = interpolation.add(monomial.multiply(top[i]));
	derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives);
	monomial = monomial.multiply(deltaX);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: monomial = monomial.multiply(deltaX),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:54.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:54.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:54.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return interpolation,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < nbPoints; ++i) {
	interpolation = interpolation.add(monomial.multiply(top[i]));
	derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives);
	monomial = monomial.multiply(deltaX);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:56.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:56.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:56.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return function.value(x),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return interpolation,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:32:58.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:32:58.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:32:58.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return function.value(x),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Fail early on wrong derivation order.

01:33:00.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:00.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:00.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:03.085 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:03.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:03.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t0 = t.getValue(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:05.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:05.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:05.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t0 = t.getValue(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return interpolation,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:07.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:07.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:07.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t0 = t.getValue(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:09.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:09.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:09.467 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double t0 = t.getValue(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return function.value(x),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:11.514 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:11.514 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:11.515 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] y = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return function.value(x),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:13.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:13.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:13.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] y = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:15.494 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:15.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:15.495 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] y = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t0 = t.getValue(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:17.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:17.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:17.627 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1)))),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return function.value(x),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:19.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:19.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:19.985 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1)))),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:22.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:22.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:22.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1)))),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] y = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:24.479 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:24.479 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:24.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[i] = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t0 = t.getValue(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:26.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:26.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:26.496 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[i] = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:28.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:28.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:28.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[i] = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1)))),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:30.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:30.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:30.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	y[i] = function.value(xi);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t0 = t.getValue(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:32.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:32.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:32.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	y[i] = function.value(xi);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[i] = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:35.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:35.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:35.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	y[i] = function.value(xi);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:37.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:37.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:37.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	y[i] = function.value(xi);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:38.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:38.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:38.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return evaluate(t, y),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] y = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:40.974 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:40.974 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:40.975 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return evaluate(t, y),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	y[i] = function.value(xi);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:42.994 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:42.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:42.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return evaluate(t, y),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:45.123 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:45.123 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:45.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return evaluate(t, y),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:47.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:47.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:47.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction() {


	public double value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		final double[] y = new double[nbPoints];
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			y[i] = function.value(xi);
		}


		return evaluate(t, y);

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] y = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:48.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:48.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:48.985 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction() {


	public double value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		final double[] y = new double[nbPoints];
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			y[i] = function.value(xi);
		}


		return evaluate(t, y);

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return evaluate(t, y),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:50.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:50.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:50.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction() {


	public double value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		final double[] y = new double[nbPoints];
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			y[i] = function.value(xi);
		}


		return evaluate(t, y);

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:52.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:52.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:52.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction() {


	public double value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		final double[] y = new double[nbPoints];
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			y[i] = function.value(xi);
		}


		return evaluate(t, y);

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:54.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:54.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:54.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1)))),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:33:56.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:56.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:56.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction() {


	public double value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		final double[] y = new double[nbPoints];
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			y[i] = function.value(xi);
		}


		return evaluate(t, y);

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:33:58.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:33:58.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:33:58.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:34:00.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:00.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:00.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:03.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:03.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:03.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1)))),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:05.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:05.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:05.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction() {


	public double value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		final double[] y = new double[nbPoints];
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			y[i] = function.value(xi);
		}


		return evaluate(t, y);

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:34:07.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:07.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:07.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:09.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:09.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:09.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:12.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:12.031 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:12.032 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y = new double[v.length][nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[i] = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:14.332 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:14.332 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:14.333 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y = new double[v.length][nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:34:16.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:16.319 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:16.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y = new double[v.length][nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:18.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:18.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:18.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y = new double[v.length][nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:20.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:20.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:20.396 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (i == 0) {
	y = new double[v.length][nbPoints];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[i] = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:22.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:22.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:22.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (i == 0) {
	y = new double[v.length][nbPoints];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:34:24.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:24.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:24.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (i == 0) {
	y = new double[v.length][nbPoints];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:26.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:26.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:26.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (i == 0) {
	y = new double[v.length][nbPoints];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y = new double[v.length][nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:28.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:28.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:28.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < v.length; ++j) {
	y[j][i] = v[j];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[j][i] = v[j],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:30.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:30.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:30.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	final double[] v = function.value(xi);
	if (i == 0) {
		y = new double[v.length][nbPoints];
	}
	for (int j = 0; j < v.length; ++j) {
		y[j][i] = v[j];
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < v.length; ++j) {
	y[j][i] = v[j];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:32.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:32.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:32.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	final double[] v = function.value(xi);
	if (i == 0) {
		y = new double[v.length][nbPoints];
	}
	for (int j = 0; j < v.length; ++j) {
		y[j][i] = v[j];
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:34.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:34.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:34.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: value[j] = evaluate(t, y[j]),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:36.337 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:36.337 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:36.338 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < value.length; ++j) {
	value[j] = evaluate(t, y[j]);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: value[j] = evaluate(t, y[j]),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:38.404 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:38.404 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:38.405 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction() {


	public double[] value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		double[][] y = null;
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			final double[] v = function.value(xi);
			if (i == 0) {
				y = new double[v.length][nbPoints];
			}
			for (int j = 0; j < v.length; ++j) {
				y[j][i] = v[j];
			}
		}


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length];
		for (int j = 0; j < value.length; ++j) {
			value[j] = evaluate(t, y[j]);
		}

		return value;

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < value.length; ++j) {
	value[j] = evaluate(t, y[j]);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:40.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:40.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:40.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: double[][][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction() {


	public double[] value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		double[][] y = null;
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			final double[] v = function.value(xi);
			if (i == 0) {
				y = new double[v.length][nbPoints];
			}
			for (int j = 0; j < v.length; ++j) {
				y[j][i] = v[j];
			}
		}


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length];
		for (int j = 0; j < value.length; ++j) {
			value[j] = evaluate(t, y[j]);
		}

		return value;

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:42.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:42.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:42.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[][] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[][][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:45.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:45.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:45.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y = new double[v.length][v[0].length][nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[][] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:47.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:47.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:47.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (i == 0) {
	y = new double[v.length][v[0].length][nbPoints];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y = new double[v.length][v[0].length][nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:49.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:49.729 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:49.730 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[j][k][i] = v[j][k],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (i == 0) {
	y = new double[v.length][v[0].length][nbPoints];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:52.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:52.182 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:52.183 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = 0; k < v[j].length; ++k) {
	y[j][k][i] = v[j][k];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[j][k][i] = v[j][k],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:54.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:54.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:54.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < v.length; ++j) {
	for (int k = 0; k < v[j].length; ++k) {
		y[j][k][i] = v[j][k];
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 0; k < v[j].length; ++k) {
	y[j][k][i] = v[j][k];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:56.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:56.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:56.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	final double[][] v = function.value(xi);
	if (i == 0) {
		y = new double[v.length][v[0].length][nbPoints];
	}
	for (int j = 0; j < v.length; ++j) {
		for (int k = 0; k < v[j].length; ++k) {
			y[j][k][i] = v[j][k];
		}
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < v.length; ++j) {
	for (int k = 0; k < v[j].length; ++k) {
		y[j][k][i] = v[j][k];
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:34:58.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:34:58.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:34:58.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length][y[0].length],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	final double[][] v = function.value(xi);
	if (i == 0) {
		y = new double[v.length][v[0].length][nbPoints];
	}
	for (int j = 0; j < v.length; ++j) {
		for (int k = 0; k < v[j].length; ++k) {
			y[j][k][i] = v[j][k];
		}
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:00.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:00.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:00.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: value[j][k] = evaluate(t, y[j][k]),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length][y[0].length],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:02.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:02.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:02.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int k = 0; k < y[j].length; ++k) {
	value[j][k] = evaluate(t, y[j][k]);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: value[j][k] = evaluate(t, y[j][k]),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:04.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:04.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:04.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < value.length; ++j) {
	for (int k = 0; k < y[j].length; ++k) {
		value[j][k] = evaluate(t, y[j][k]);
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 0; k < y[j].length; ++k) {
	value[j][k] = evaluate(t, y[j][k]);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:06.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:06.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:06.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction() {


	public double[][] value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		double[][][] y = null;
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			final double[][] v = function.value(xi);
			if (i == 0) {
				y = new double[v.length][v[0].length][nbPoints];
			}
			for (int j = 0; j < v.length; ++j) {
				for (int k = 0; k < v[j].length; ++k) {
					y[j][k][i] = v[j][k];
				}
			}
		}


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length][y[0].length];
		for (int j = 0; j < value.length; ++j) {
			for (int k = 0; k < y[j].length; ++k) {
				value[j][k] = evaluate(t, y[j][k]);
			}
		}

		return value;

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < value.length; ++j) {
	for (int k = 0; k < y[j].length; ++k) {
		value[j][k] = evaluate(t, y[j][k]);
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:08.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:08.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:08.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction() {


	public double[][] value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		double[][][] y = null;
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			final double[][] v = function.value(xi);
			if (i == 0) {
				y = new double[v.length][v[0].length][nbPoints];
			}
			for (int j = 0; j < v.length; ++j) {
				for (int k = 0; k < v[j].length; ++k) {
					y[j][k][i] = v[j][k];
				}
			}
		}


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length][y[0].length];
		for (int j = 0; j < value.length; ++j) {
			for (int k = 0; k < y[j].length; ++k) {
				value[j][k] = evaluate(t, y[j][k]);
			}
		}

		return value;

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:10.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:10.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:10.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] dsX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[point.length],commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:12.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:12.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:12.622 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: dsX[i] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(point.length, 1, i, point[i]),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] dsX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[point.length],commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:14.722 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:14.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:14.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < point.length; ++i) {
	dsX[i] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(point.length, 1, i, point[i]);
},commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: dsX[i] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(point.length, 1, i, point[i]),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:16.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:16.817 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:16.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure dsY = f.value(dsX),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < point.length; ++i) {
	dsX[i] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(point.length, 1, i, point[i]);
},commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:18.827 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:18.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:18.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[] y = new double[point.length],commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure dsY = f.value(dsX),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:20.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:20.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:20.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final int[] orders = new int[point.length],commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] y = new double[point.length],commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:22.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:22.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:22.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: orders[i] = 1,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int[] orders = new int[point.length],commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:24.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:24.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:24.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[i] = dsY.getPartialDerivative(orders),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[i] = 1,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:26.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:26.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:26.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: orders[i] = 0,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[i] = dsY.getPartialDerivative(orders),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:29.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:29.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:29.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < point.length; ++i) {
	orders[i] = 1;
	y[i] = dsY.getPartialDerivative(orders);
	orders[i] = 0;
},commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[i] = 0,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:31.570 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:31.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:31.571 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return y,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < point.length; ++i) {
	orders[i] = 1;
	y[i] = dsY.getPartialDerivative(orders);
	orders[i] = 0;
},commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:35:33.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:33.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:33.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] dsY = f.value(dsX),commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return y,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:35:36.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:36.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:36.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final double[][] y = new double[dsY.length][point.length],commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] dsY = f.value(dsX),commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:35:38.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:38.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:38.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: orders[j] = 1,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[][] y = new double[dsY.length][point.length],commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:35:40.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:40.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:40.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[i][j] = dsY[i].getPartialDerivative(orders),commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[j] = 1,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:35:42.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:42.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:42.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: orders[j] = 0,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[i][j] = dsY[i].getPartialDerivative(orders),commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:35:44.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:44.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:44.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < point.length; ++j) {
	orders[j] = 1;
	y[i][j] = dsY[i].getPartialDerivative(orders);
	orders[j] = 0;
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[j] = 0,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:35:46.525 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:46.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:46.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < point.length; ++j) {
	orders[j] = 1;
	y[i][j] = dsY[i].getPartialDerivative(orders);
	orders[j] = 0;
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:48.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:48.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:48.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[j][i] = v[j],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:50.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:50.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:50.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[j][i] = v[j],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: monomial = monomial.multiply(deltaX),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:52.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:52.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:52.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[j][i] = v[j],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return interpolation,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:55.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:55.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:55.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[j][i] = v[j],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1)))),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:35:57.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:57.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:57.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[j][i] = v[j],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (i == 0) {
	y = new double[v.length][nbPoints];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:35:59.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:35:59.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:35:59.727 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[j][i] = v[j],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:36:01.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:01.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:01.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: y[j][i] = v[j],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:36:03.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:03.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:03.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:36:05.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:05.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:05.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int j = 0; j < v.length; ++j) {
	y[j][i] = v[j];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:36:07.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:07.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:07.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	final double[] v = function.value(xi);
	if (i == 0) {
		y = new double[v.length][nbPoints];
	}
	for (int j = 0; j < v.length; ++j) {
		y[j][i] = v[j];
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:36:10.178 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:10.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:10.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Fail early on wrong derivation order.

01:36:12.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:12.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:12.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: value[j] = evaluate(t, y[j]),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:36:14.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:14.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:14.159 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < value.length; ++j) {
	value[j] = evaluate(t, y[j]);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:36:16.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:16.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:16.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction() {


	public double[] value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		double[][] y = null;
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			final double[] v = function.value(xi);
			if (i == 0) {
				y = new double[v.length][nbPoints];
			}
			for (int j = 0; j < v.length; ++j) {
				y[j][i] = v[j];
			}
		}


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length];
		for (int j = 0; j < value.length; ++j) {
			value[j] = evaluate(t, y[j]);
		}

		return value;

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:36:18.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:18.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:18.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[][] v = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:36:20.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:20.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:20.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 0; k < v[j].length; ++k) {
	y[j][k][i] = v[j][k];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:36:23.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:23.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:23.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:36:25.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:25.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:25.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[j] = 0,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:36:27.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:27.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:27.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:36:29.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:29.726 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:29.727 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:36:31.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:31.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:31.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log1p(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added ceil and floor to DerivativeStructure.

01:36:33.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:33.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:33.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added Taylor expansion for DSCompiler.

01:36:35.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:35.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:35.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:36:37.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:37.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:37.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n);
},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:36:39.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:39.813 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:39.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.isInfinite(x.data[0]) || java.lang.Double.isInfinite(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.POSITIVE_INFINITY);
} else if (java.lang.Double.isNaN(x.data[0]) || java.lang.Double.isNaN(y.data[0])) {
	return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(x.compiler.getFreeParameters(), 
	x.compiler.getFreeParameters(), 
	java.lang.Double.NaN);
} else {

	final int expX = x.getExponent();
	final int expY = y.getExponent();
	if (expX > (expY + 27)) {

		return x.abs();
	} else if (expY > (expX + 27)) {

		return y.abs();
	} else {


		final int middleExp = (expX + expY) / 2;


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
		scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


		return scaledH.scalb(middleExp);

	}

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a new package dealing with differentials.

01:36:41.902 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:41.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:41.904 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(3),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:36:43.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:43.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:43.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: bottom[i] = y[i],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:36:45.911 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:45.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:45.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: org.apache.commons.math3.analysis.differentiation.DerivativeStructure monomial = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, 1.0),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:36:47.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:47.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:47.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (f.length != (getOrder() + 1)) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1);
},commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:36:49.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:49.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:49.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:36:51.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:51.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:51.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:36:54.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:54.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:54.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: monomial = monomial.multiply(deltaX),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:36:56.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:56.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:56.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < nbPoints; ++i) {
	interpolation = interpolation.add(monomial.multiply(top[i]));
	derivatives[0] = stepSize * ((0.5 * (nbPoints - 1)) - i);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(parameters, order, derivatives);
	monomial = monomial.multiply(deltaX);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:36:58.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:36:58.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:36:58.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return interpolation,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a FiniteDifferencesDifferentiator class.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:37:01.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:01.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:01.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return function.value(x),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:03.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:03.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:03.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double t0 = t.getValue(),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:05.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:05.489 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:05.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] y = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:07.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:07.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:07.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[i] = function.value(xi),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:10.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:10.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:10.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[][] y = null,commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:12.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:12.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:12.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: value[j] = evaluate(t, y[j]),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:37:14.590 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:14.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:14.591 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:17.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:17.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:17.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 0; k < v[j].length; ++k) {
	y[j][k][i] = v[j][k];
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:19.684 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:19.685 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:19.686 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: value[j][k] = evaluate(t, y[j][k]),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:22.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:22.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:22.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < value.length; ++j) {
	for (int k = 0; k < y[j].length; ++k) {
		value[j][k] = evaluate(t, y[j][k]);
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:37:24.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:24.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:24.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction() {


	public double[][] value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		double[][][] y = null;
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			final double[][] v = function.value(xi);
			if (i == 0) {
				y = new double[v.length][v[0].length][nbPoints];
			}
			for (int j = 0; j < v.length; ++j) {
				for (int k = 0; k < v[j].length; ++k) {
					y[j][k][i] = v[j][k];
				}
			}
		}


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length][y[0].length];
		for (int j = 0; j < value.length; ++j) {
			for (int k = 0; k < y[j].length; ++k) {
				value[j][k] = evaluate(t, y[j][k]);
			}
		}

		return value;

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:37:26.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:26.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:26.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (f.length != (getOrder() + 1)) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1);
},commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:37:28.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:28.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:28.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:37:31.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:31.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:31.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(2),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute gradient from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:37:32.949 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:32.949 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:32.950 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:37:35.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:35.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:35.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] dsX = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[point.length],commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:37:37.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:37.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:37.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: dsX[i] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(point.length, 1, i, point[i]),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:37:39.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:39.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:39.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure dsY = f.value(dsX),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:37:41.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:41.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:41.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y[i] = dsY.getPartialDerivative(orders),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:37:43.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:43.535 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:43.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[j] = 0,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fail early on wrong derivation order.

01:37:45.992 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:45.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:45.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:37:48.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:48.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:48.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a new package dealing with differentials.

01:37:50.404 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:50.404 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:50.405 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(2),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a new package dealing with differentials.

01:37:52.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:52.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:52.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(3),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a new package dealing with differentials.

01:37:54.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:54.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:54.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a new package dealing with differentials.

01:37:56.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:56.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:56.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, p, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a new package dealing with differentials.

01:37:58.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:37:58.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:37:58.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.asin(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a new package dealing with differentials.

01:38:00.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:00.989 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:00.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(variables, order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Fail early on wrong derivation order.

01:38:02.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:02.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:02.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:38:04.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:04.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:04.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.expm1(operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:38:07.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:07.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:07.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.util.Arrays.fill(function, 1, 1 + order, org.apache.commons.math3.util.FastMath.exp(operand[operandOffset])),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:38:10.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:10.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:10.183 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double inv = 1.0 / (1.0 + operand[operandOffset]),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:38:12.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:12.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:12.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:38:14.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:14.407 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:14.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added expm1 and log1p to DSCompiler and DerivativeStructure.
, ingredientB: Added expm1 and log1p to DSCompiler and DerivativeStructure.

01:38:16.686 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:16.686 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:16.687 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.expm1(data, 0, result.data, 0),commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / (1.0 + operand[operandOffset]);
	double xk = inv;
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added expm1 and log1p to DSCompiler and DerivativeStructure.
}, sim: 0.644678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Added a new package dealing with differentials.

01:38:19.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:19.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:19.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] /= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:21.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:21.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:21.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double v = 0,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:24.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:24.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:24.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v *= t,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:26.815 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:26.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:26.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fail early on wrong derivation order.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:29.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:29.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:29.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (t.getOrder() >= nbPoints) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
},commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Fail early on wrong derivation order.

01:38:31.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:31.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:31.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Fail early on wrong derivation order.

01:38:34.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:34.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:34.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int order = t.getOrder(),commit: Fail early on wrong derivation order.
}, sim: -0.145162
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

01:38:36.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:36.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:36.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(variables, order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Simplified tangent higher derivatives computation.
, ingredientB: Added a new package dealing with differentials.

01:38:38.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:38.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:38.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 1; n <= order; ++n) {


	double v = 0;
	p[n + 1] = n * p[n];
	for (int k = n + 1; k >= 0; k -= 2) {
		v = (v * t2) + p[k];
		if (k > 2) {
			p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
		} else if (k == 2) {
			p[0] = p[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= t;
	}

	function[n] = v;

},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:40.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:40.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:40.617 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[n] = v,commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:42.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:42.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:42.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if ((n & 0x1) == 0) {
	v *= t;
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:45.235 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:45.235 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:45.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n + 1; k >= 0; k -= 2) {
	v = (v * t2) + p[k];
	if (k > 2) {
		p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]);
	} else if (k == 2) {
		p[0] = p[1];
	}
},commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:47.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:47.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:47.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: p[k - 2] = ((k - 1) * p[k - 1]) + ((k - 3) * p[k - 3]),commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Simplified tangent higher derivatives computation.

01:38:49.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:49.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:49.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] function = new double[1 + order],commit: Simplified tangent higher derivatives computation.
}, sim: 0.114572
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:38:51.130 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:51.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:51.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] *= a;
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:38:53.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:53.629 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:53.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.remainder(data, 0, a.data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Fixed too large memory consumption in DSCompiler.

01:38:56.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:56.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:56.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return cache[parameters][order],commit: Fixed too large memory consumption in DSCompiler.
}, sim: 0.127964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:38:58.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:38:58.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:38:58.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = -data[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:39:00.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:00.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:00.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: java.lang.System.arraycopy(data, 0, ds.data, 0, ds.data.length),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:39:02.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:02.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:02.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(variables, order),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:39:04.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:04.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:04.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.data = data,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:39:06.449 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:06.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:06.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:39:08.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:08.913 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:08.914 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.atan(data, 0, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:39:11.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:11.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:11.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, n, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:39:13.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:13.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:13.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] dsY = f.value(dsX),commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:39:15.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:15.980 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:15.981 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return rootN(2),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:39:18.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:18.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:18.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[j] = 0,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:39:20.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:20.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:20.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a new package dealing with differentials.
, ingredientB: Added a new package dealing with differentials.

01:39:22.679 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:22.679 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:22.680 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = -data[i];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, -1, result.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:24.656 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:24.656 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:24.657 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = -data[i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:26.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:26.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:26.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:28.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:28.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:28.959 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[0] = ds.data[0] % a,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:30.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:30.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:30.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return result,commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:33.354 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:33.354 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:33.355 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.add(data, 0, a.data, 0, ds.data, 0),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:35.664 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:35.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:35.665 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(ds2.compiler),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:38.123 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:38.123 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:38.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 2; i <= order; ++i) {
	function[i] = -function[i - 2];
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:40.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:40.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:40.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i],commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:42.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:42.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:42.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (newCache[p][o] == null) {
	final org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler = (p == 0) ? null : newCache[p - 1][o];
	final org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];
	newCache[p][o] = new org.apache.commons.math3.analysis.differentiation.DSCompiler(p, o, valueCompiler, derivativeCompiler);
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:39:45.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:45.193 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:45.194 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: v = (v * x2) + p[k],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:39:47.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:47.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:47.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:50.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:50.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:50.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((cache != null) && (cache.length > parameters)) && (cache[parameters].length > order)) {
	if (cache[parameters][order] != null) {

		return cache[parameters][order];
	}
},commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:39:52.496 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:52.496 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:52.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:39:54.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:54.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:54.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a wrapper class to compute Jacobian from differentiable function.
, ingredientB: Added a new package dealing with differentials.

01:39:57.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:57.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:57.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < dsY.length; ++i) {
	for (int j = 0; j < point.length; ++j) {
		orders[j] = 1;
		y[i][j] = dsY[i].getPartialDerivative(orders);
		orders[j] = 0;
	}
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final org.apache.commons.math3.analysis.differentiation.DSCompiler[][] cache = org.apache.commons.math3.analysis.differentiation.DSCompiler.compilers.get(),commit: Added a new package dealing with differentials.
}, sim: 0.129607
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:39:59.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:39:59.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:39:59.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < point.length; ++j) {
	orders[j] = 1;
	y[i][j] = dsY[i].getPartialDerivative(orders);
	orders[j] = 0;
},commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:40:01.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:01.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:01.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[j] = 0,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a wrapper class to compute Jacobian from differentiable function.

01:40:04.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:04.398 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:04.399 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: orders[j] = 1,commit: Added a wrapper class to compute Jacobian from differentiable function.
}, sim: 0.141259
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:40:06.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:06.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:06.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < point.length; ++i) {
	orders[i] = 1;
	y[i] = dsY.getPartialDerivative(orders);
	orders[i] = 0;
},commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:40:08.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:08.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:08.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: dsX[i] = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(point.length, 1, i, point[i]),commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:40:11.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:11.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:11.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: y = new double[v.length][v[0].length][nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:40:13.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:13.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:13.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 0; k < y[j].length; ++k) {
	value[j][k] = evaluate(t, y[j][k]);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:40:15.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:15.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:15.948 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (f.length != (getOrder() + 1)) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1);
},commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added a wrapper class to compute gradient from differentiable function.

01:40:18.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:18.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:18.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this.f = f,commit: Added a wrapper class to compute gradient from differentiable function.
}, sim: 0.159372
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added a way to create DerivativeStructure from all derivatives.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:40:21.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:21.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:21.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return data.clone(),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:40:23.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:23.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:23.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: java.lang.System.arraycopy(derivatives, 0, data, 0, data.length),commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Added a way to create DerivativeStructure from all derivatives.

01:40:26.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:26.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:26.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (derivatives.length != data.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(derivatives.length, data.length);
},commit: Added a way to create DerivativeStructure from all derivatives.
}, sim: 0.197874
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:40:28.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:28.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:28.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (index >= parameters) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(index, parameters, false);
},commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Changed parameters name for consistency with getters and DSCompiler.

01:40:30.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:30.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:30.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: this(org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(parameters, order)),commit: Changed parameters name for consistency with getters and DSCompiler.
}, sim: 0.212495
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:40:32.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:32.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:32.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[n - 1] = (-n) * q[n - 2],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:40:35.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:35.222 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:35.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:40:37.740 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:37.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:37.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added compose to the public API of DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:40:39.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:39.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:39.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.compose(data, 0, f, result.data, 0),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:40:41.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:41.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:41.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (f.length != (getOrder() + 1)) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1);
},commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added compose to the public API of DerivativeStructure.

01:40:43.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:43.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:43.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f.length, getOrder() + 1),commit: Added compose to the public API of DerivativeStructure.
}, sim: 0.267647
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:40:45.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:45.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:45.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int j = 0; j < value.length; ++j) {
	for (int k = 0; k < y[j].length; ++k) {
		value[j][k] = evaluate(t, y[j][k]);
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:40:47.834 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:47.834 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:47.835 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < nbPoints; ++i) {
	final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
	final double[][] v = function.value(xi);
	if (i == 0) {
		y = new double[v.length][v[0].length][nbPoints];
	}
	for (int j = 0; j < v.length; ++j) {
		for (int k = 0; k < v[j].length; ++k) {
			y[j][k][i] = v[j][k];
		}
	}
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:40:50.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:50.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:50.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction() {


	public double[] value(final double x) throws org.apache.commons.math3.exception.MathIllegalArgumentException {
		return function.value(x);
	}


	public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(final org.apache.commons.math3.analysis.differentiation.DerivativeStructure t) throws 
	org.apache.commons.math3.exception.MathIllegalArgumentException {


		if (t.getOrder() >= nbPoints) {
			throw new org.apache.commons.math3.exception.NumberIsTooLargeException(t.getOrder(), nbPoints, false);
		}


		final double t0 = t.getValue();
		double[][] y = null;
		for (int i = 0; i < nbPoints; ++i) {
			final double xi = t0 + (stepSize * (i - (0.5 * (nbPoints - 1))));
			final double[] v = function.value(xi);
			if (i == 0) {
				y = new double[v.length][nbPoints];
			}
			for (int j = 0; j < v.length; ++j) {
				y[j][i] = v[j];
			}
		}


		final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[y.length];
		for (int j = 0; j < value.length; ++j) {
			value[j] = evaluate(t, y[j]);
		}

		return value;

	}

},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:40:52.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:52.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:52.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] y = new double[nbPoints],commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added signum to DerivativeStructure.

01:40:54.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:54.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:54.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:40:57.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:57.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:57.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: bottom[i - j] = (bottom[(i - j) + 1] - bottom[i - j]) / (j * stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:40:59.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:40:59.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:40:59.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NotPositiveException(stepSize),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:41:01.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:01.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:01.916 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:41:04.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:04.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:04.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (nbPoints <= 1) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false);
},commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Completed support fo asin, acos and atan in DSCompiler.
, ingredientB: Added a FiniteDifferencesDifferentiator class.

01:41:06.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:06.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:06.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int n = 2; n <= order; ++n) {


	double v = 0;
	q[n - 1] = (-n) * q[n - 2];
	for (int k = n - 1; k >= 0; k -= 2) {
		v = (v * x2) + q[k];
		if (k > 2) {
			q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
		} else if (k == 2) {
			q[0] = q[1];
		}
	}
	if ((n & 0x1) == 0) {
		v *= x;
	}

	coeff *= f;
	function[n] = coeff * v;

},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(stepSize, 1, false),commit: Added a FiniteDifferencesDifferentiator class.
}, sim: 0.299524
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:41:09.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:09.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:09.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = n - 1; k >= 0; k -= 2) {
	v = (v * x2) + q[k];
	if (k > 2) {
		q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
	} else if (k == 2) {
		q[0] = q[1];
	}
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:41:11.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:11.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:11.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (k > 2) {
	q[k - 2] = ((k - 1) * q[k - 1]) + (((k - 1) - (2 * n)) * q[k - 3]);
} else if (k == 2) {
	q[0] = q[1];
},commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:41:13.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:13.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:13.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: q[0] = q[1],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:41:15.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:15.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:15.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[1] = coeff * q[0],commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Completed support fo asin, acos and atan in DSCompiler.

01:41:18.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:18.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:18.189 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: coeff *= f,commit: Completed support fo asin, acos and atan in DSCompiler.
}, sim: 0.341588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:41:20.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:20.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:20.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: result[resultOffset + i] = (-2) * tmp2[i],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:41:22.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:22.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:22.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added abs to DerivativeStructure.

01:41:25.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:25.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:25.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:41:27.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:27.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:27.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: rootN(tmp2, 0, 2, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:41:29.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:29.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:29.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(x, xOffset, x, xOffset, tmp1, 0),commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added abs to DerivativeStructure.

01:41:32.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:32.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:32.087 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added toDegrees and toRadians to DerivativeStructure.
, ingredientB: Added support for atan2 in DSCompiler.

01:41:34.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:34.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:34.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double[] tmp1 = new double[getSize()],commit: Added support for atan2 in DSCompiler.
}, sim: 0.346214
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:41:36.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:36.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:36.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.toRadians(data[i]),commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added toDegrees and toRadians to DerivativeStructure.

01:41:38.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:38.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:38.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = 0; i < ds.data.length; ++i) {
	ds.data[i] = org.apache.commons.math3.util.FastMath.toDegrees(data[i]);
},commit: Added toDegrees and toRadians to DerivativeStructure.
}, sim: 0.362983
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added signum to DerivativeStructure.

01:41:40.947 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:40.947 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:40.949 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.signum(data[0])),commit: Added signum to DerivativeStructure.
}, sim: 0.377652
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:41:43.039 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:43.039 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:43.040 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (expY > (expX + 27)) {

	return y.abs();
} else {


	final int middleExp = (expX + expY) / 2;


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledX = x.scalb(-middleExp);
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledY = y.scalb(-middleExp);


	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure scaledH = 
	scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt();


	return scaledH.scalb(middleExp);

},commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:41:45.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:45.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:45.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final int expY = y.getExponent(),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:41:47.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:47.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:47.400 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(e.compiler),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added copySign to DerivativeStructure.

01:41:49.858 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:49.858 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:49.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:41:51.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:51.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:51.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: x.compiler.checkCompatibility(y.compiler),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:41:53.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:53.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:53.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: ds.data[i] = org.apache.commons.math3.util.FastMath.scalb(data[i], n),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added abs to DerivativeStructure.
, ingredientB: Added getExponent, scalb and hypot to DerivativeStructure.

01:41:55.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:55.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:55.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (java.lang.Double.doubleToLongBits(data[0]) < 0) {

	return negate();
} else {
	return this;
},commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return org.apache.commons.math3.util.FastMath.getExponent(data[0]),commit: Added getExponent, scalb and hypot to DerivativeStructure.
}, sim: 0.400193
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added abs to DerivativeStructure.

01:41:58.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:41:58.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:41:58.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return this,commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added abs to DerivativeStructure.

01:42:00.628 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:00.628 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:00.629 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return negate(),commit: Added abs to DerivativeStructure.
}, sim: 0.429575
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:02.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:02.845 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:02.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added copySign to DerivativeStructure.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:04.934 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:04.935 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:04.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return this;
},commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added copySign to DerivativeStructure.

01:42:07.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:07.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:07.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long s = java.lang.Double.doubleToLongBits(sign),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added copySign to DerivativeStructure.

01:42:09.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:09.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:09.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: long m = java.lang.Double.doubleToLongBits(data[0]),commit: Added copySign to DerivativeStructure.
}, sim: 0.430819
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added rint and round to DerivativeStructure.

01:42:11.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:11.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:11.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.rint(data[0])),commit: Added rint and round to DerivativeStructure.
}, sim: 0.521512
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:13.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:13.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:13.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.checkCompatibility(e.compiler),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:42:15.256 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:15.256 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:15.257 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added Taylor expansion for DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:17.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:17.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:17.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return value,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: return compiler.taylor(data, 0, delta),commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:19.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:19.319 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:19.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int i = getSize() - 1; i >= 0; --i) {
	final int[] orders = getPartialDerivativeOrders(i);
	double term = ds[dsOffset + i];
	for (int k = 0; k < orders.length; ++k) {
		if (orders[k] > 0) {
			term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
		}
	}
	value += term;
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:21.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:21.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:21.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: value += term,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:23.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:23.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:23.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: for (int k = 0; k < orders.length; ++k) {
	if (orders[k] > 0) {
		term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
	}
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:25.346 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:25.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:25.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (orders[k] > 0) {
	term *= org.apache.commons.math3.util.FastMath.pow(delta[k], orders[k]) / org.apache.commons.math3.util.ArithmeticUtils.factorial(orders[k]);
},commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:27.533 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:27.533 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:27.534 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double term = ds[dsOffset + i],commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:42:29.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:29.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:29.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added Taylor expansion for DSCompiler.

01:42:32.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:32.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:32.429 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double value = 0,commit: Added Taylor expansion for DSCompiler.
}, sim: 0.527907
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:42:34.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:34.767 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:34.768 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.log10(data, 0, result.data, 0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added log10 to DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:36.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:36.989 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:36.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: if (order > 0) {
	double inv = 1.0 / operand[operandOffset];
	double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0);
	for (int i = 1; i <= order; ++i) {
		function[i] = xk;
		xk *= (-i) * inv;
	}
},commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:42:39.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:39.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:39.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: double xk = inv / org.apache.commons.math3.util.FastMath.log(10.0),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added log10 to DerivativeStructure and DSCompiler.

01:42:41.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:41.439 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:41.440 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: function[0] = org.apache.commons.math3.util.FastMath.log10(operand[operandOffset]),commit: Added log10 to DerivativeStructure and DSCompiler.
}, sim: 0.537069
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:43.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:43.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:43.918 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.pow(data, 0, e.data, 0, result.data, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added support for x^y in DerivativeStructure and DSCompiler.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:46.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:46.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:46.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: compiler.checkCompatibility(e.compiler),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:48.477 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:48.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:48.478 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: exp(yLogX, 0, result, resultOffset),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:50.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:50.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:50.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: multiply(logX, 0, y, yOffset, yLogX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:52.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:52.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:52.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] yLogX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:55.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:55.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:55.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: log(x, xOffset, logX, 0),commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added ceil and floor to DerivativeStructure.
, ingredientB: Added support for x^y in DerivativeStructure and DSCompiler.

01:42:57.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:42:57.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:42:57.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingA: {code: return new org.apache.commons.math3.analysis.differentiation.DerivativeStructure(compiler.getFreeParameters(), 
compiler.getOrder(), 
org.apache.commons.math3.util.FastMath.floor(data[0])),commit: Added ceil and floor to DerivativeStructure.
}, sim: 0.598097
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double[] function = new double[1 + order], commit: Added hyperbolic trigonometric functions and inverses to DSCompiler.
}, ingB: {code: final double[] logX = new double[getSize()],commit: Added support for x^y in DerivativeStructure and DSCompiler.
}, sim: 0.538767
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

01:43:14.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:14.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:14.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane()), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[] minusChar = ((org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[]) (java.lang.reflect.Array.newInstance(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class, 2))),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane()), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[] plusChar = ((org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[]) (java.lang.reflect.Array.newInstance(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class, 2))),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

01:43:16.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:16.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:16.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane()), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final boolean inside = ((java.lang.Boolean) (node.getAttribute())),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane()), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[] minusChar = ((org.apache.commons.math3.geometry.partitioning.SubHyperplane<S>[]) (java.lang.reflect.Array.newInstance(org.apache.commons.math3.geometry.partitioning.SubHyperplane.class, 2))),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

01:43:18.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:43:18.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:43:18.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane()), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.Hyperplane<S> hyperplane = node.getCut().getHyperplane(),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane()), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final boolean inside = ((java.lang.Boolean) (node.getAttribute())),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: Use the new differentiation framework in optimization package.

01:47:06.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:06.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:06.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this(lambda, null, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return optimizeInternal(maxEval, f, t, w, startPoint),commit: Use the new differentiation framework in optimization package.
}, sim: 0.157297
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:08.965 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:08.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:08.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this(lambda, inputSigma, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this(lambda, null, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:11.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:11.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:11.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA, 
diagonalOnly, checkFeasableCount, random, generateStatistics, 
new org.apache.commons.math3.optimization.SimpleValueChecker()),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this(lambda, null, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:13.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:13.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:13.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA, 
diagonalOnly, checkFeasableCount, random, generateStatistics, 
new org.apache.commons.math3.optimization.SimpleValueChecker()),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this(lambda, inputSigma, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the new differentiation framework in optimization package.
, ingredientB: Use the new differentiation framework in optimization package.

01:47:15.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:15.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:15.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return optimizeInternal(maxEval, f, t, w, startPoint),commit: Use the new differentiation framework in optimization package.
}, sim: 0.157297
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return optimizeInternal(maxEval, f, goalType, startPoint),commit: Use the new differentiation framework in optimization package.
}, sim: 0.157297
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:17.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:17.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:17.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:19.074 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:19.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:19.075 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] uB = getUpperBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:21.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:21.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:21.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] uB = getUpperBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:23.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:23.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:23.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hasFiniteBounds = true,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:25.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:25.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:25.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((!java.lang.Double.isInfinite(lB[i])) || 
(!java.lang.Double.isInfinite(uB[i]))) {
	hasFiniteBounds = true;
	break;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hasFiniteBounds = true,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:27.447 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:27.447 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:27.448 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < lB.length; i++) {
	if ((!java.lang.Double.isInfinite(lB[i])) || 
	(!java.lang.Double.isInfinite(uB[i]))) {
		hasFiniteBounds = true;
		break;
	}
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((!java.lang.Double.isInfinite(lB[i])) || 
(!java.lang.Double.isInfinite(uB[i]))) {
	hasFiniteBounds = true;
	break;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:29.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:29.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:29.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean hasInfiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < lB.length; i++) {
	if ((!java.lang.Double.isInfinite(lB[i])) || 
	(!java.lang.Double.isInfinite(uB[i]))) {
		hasFiniteBounds = true;
		break;
	}
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:31.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:31.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:31.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hasInfiniteBounds = true,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasInfiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:34.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:34.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:34.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(lB[i]) || 
java.lang.Double.isInfinite(uB[i])) {
	hasInfiniteBounds = true;
	break;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hasInfiniteBounds = true,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:36.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:36.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:36.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < lB.length; i++) {
	if (java.lang.Double.isInfinite(lB[i]) || 
	java.lang.Double.isInfinite(uB[i])) {
		hasInfiniteBounds = true;
		break;
	}
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(lB[i]) || 
java.lang.Double.isInfinite(uB[i])) {
	hasInfiniteBounds = true;
	break;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:38.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:38.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:38.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < lB.length; i++) {
	if (java.lang.Double.isInfinite(lB[i]) || 
	java.lang.Double.isInfinite(uB[i])) {
		hasInfiniteBounds = true;
		break;
	}
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:41.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:41.190 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:41.191 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boundaries = new double[2][],commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:43.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:43.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:43.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boundaries[0] = lB,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boundaries = new double[2][],commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:45.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:45.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:45.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boundaries[1] = uB,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boundaries[0] = lB,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:47.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:47.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:47.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (hasInfiniteBounds) {


	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
} else {

	boundaries = new double[2][];
	boundaries[0] = lB;
	boundaries[1] = uB;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boundaries[1] = uB,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:50.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:50.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:50.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boundaries = null,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (hasInfiniteBounds) {


	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
} else {

	boundaries = new double[2][];
	boundaries[0] = lB;
	boundaries[1] = uB;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:52.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:52.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:52.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (hasFiniteBounds) {
	for (int i = 0; i < lB.length; i++) {
		if (java.lang.Double.isInfinite(lB[i]) || 
		java.lang.Double.isInfinite(uB[i])) {
			hasInfiniteBounds = true;
			break;
		}
	}

	if (hasInfiniteBounds) {


		throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
	} else {

		boundaries = new double[2][];
		boundaries[0] = lB;
		boundaries[1] = uB;
	}
} else {

	boundaries = null;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boundaries = null,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed exception type.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:54.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:54.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:54.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(inputSigma.length, init.length),commit: Fixed exception type.
}, sim: -0.013310
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (hasFiniteBounds) {
	for (int i = 0; i < lB.length; i++) {
		if (java.lang.Double.isInfinite(lB[i]) || 
		java.lang.Double.isInfinite(uB[i])) {
			hasInfiniteBounds = true;
			break;
		}
	}

	if (hasInfiniteBounds) {


		throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
	} else {

		boundaries = new double[2][];
		boundaries[0] = lB;
		boundaries[1] = uB;
	}
} else {

	boundaries = null;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:56.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:56.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:56.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:47:58.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:47:58.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:47:58.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:48:00.501 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:00.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:00.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:48:02.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:02.980 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:02.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasInfiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:48:05.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:05.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:05.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (hasInfiniteBounds) {


	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
} else {

	boundaries = new double[2][];
	boundaries[0] = lB;
	boundaries[1] = uB;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:48:07.359 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:07.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:07.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (hasFiniteBounds) {
	for (int i = 0; i < lB.length; i++) {
		if (java.lang.Double.isInfinite(lB[i]) || 
		java.lang.Double.isInfinite(uB[i])) {
			hasInfiniteBounds = true;
			break;
		}
	}

	if (hasInfiniteBounds) {


		throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
	} else {

		boundaries = new double[2][];
		boundaries[0] = lB;
		boundaries[1] = uB;
	}
} else {

	boundaries = null;
},commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: Fixed exception type.

01:48:09.473 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:09.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:09.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(inputSigma.length, init.length),commit: Fixed exception type.
}, sim: -0.013310
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: Use the new differentiation framework in optimization package.

01:48:11.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:11.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:11.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return optimizeInternal(maxEval, f, goalType, startPoint),commit: Use the new differentiation framework in optimization package.
}, sim: 0.157297
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: Use the new differentiation framework in optimization package.

01:48:14.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:14.180 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:14.181 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return optimizeInternal(maxEval, f, t, w, startPoint),commit: Use the new differentiation framework in optimization package.
}, sim: 0.157297
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:48:16.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:16.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:16.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this(lambda, inputSigma, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, 
org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

01:48:18.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:18.535 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:18.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA, 
diagonalOnly, checkFeasableCount, random, generateStatistics, 
new org.apache.commons.math3.optimization.SimpleValueChecker()),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-783 Re-instated the relaxation of line search tolerances, which can lead to a significant performance improvement.
, ingredientB: D4J_Math_20_BUGGY_VERSION

01:48:20.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:48:20.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:48:20.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 3
org.nd4j.linalg.exception.ND4JIllegalStateException: Text passed for inference has no matches in model vocabulary.
org.nd4j.linalg.exception.ND4JIllegalStateException: Text passed for inference has no matches in model vocabulary.
	at org.deeplearning4j.models.paragraphvectors.ParagraphVectors.inferVector(ParagraphVectors.java:212)
	at org.deeplearning4j.models.paragraphvectors.ParagraphVectors.inferVector(ParagraphVectors.java:293)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:124)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:72)
	at java.util.TimSort.gallopRight(TimSort.java:613)
	at java.util.TimSort.mergeAt(TimSort.java:496)
	at java.util.TimSort.mergeCollapse(TimSort.java:439)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 5024.352
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 3
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 8225.854


Node: a1e6d179a14c



Date: Tue Nov 26 01:48:21 EST 2019

cd /script/jGenProg_Defects4J_Math_20;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-20 \
	-failing org.apache.commons.math3.optimization.direct.CMAESOptimizerTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_20/target/classes/:/script/jGenProg_Defects4J_Math_20/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

