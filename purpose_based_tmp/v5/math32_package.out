Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 23:31:13,922 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 23:31:13,926 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 23:31:13,926 main:382 - The compliance of the JVM is:  7
[INFO] 23:31:13,929 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-32  -failing  org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_32/target/classes/:/script/jGenProg_Defects4J_Math_32/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 23:31:13,933 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_32/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_32/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 630
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_32/./output_astor/AstorMain-Math-32//bin//default from 630 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_32/./output_astor/AstorMain-Math-32//bin//default, /script/jGenProg_Defects4J_Math_32/target/classes/, /script/jGenProg_Defects4J_Math_32/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.ArrayRealVectorTest#testDataInOut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeX
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeY
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testNegativeZ
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.FrenchRealVectorFormatTest#testDefaultFormatRealVectorImpl
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.JacobianMatricesTest#testParameterizable
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeX
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeY
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testNegativeZ
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.RealVectorFormatTest#testDefaultFormatRealVectorImpl
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testDerivativeShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorTwoPairs
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorOnePair
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRank
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMath226
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testDefaultFormatVector3D
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeX
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeY
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest#testNegativeZ
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest#testAllButExcluded
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest#testAllButExcluded
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testDefaultFormatVector3D
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeX
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeY
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest#testNegativeZ
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroImaginary
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testFormatNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testDefaultFormatComplex
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testZeroReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeBoth
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.FrenchComplexFormatTest#testNegativeImaginary
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testZeroImaginary
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testFormatNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testDefaultFormatComplex
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testZeroReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testNegativeBoth
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testNegativeReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexFormatTest#testNegativeImaginary
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.LogitTest#testDerivativeLargeArguments
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:3606, fails: 134, GZoltar suspicious 26449, with positive susp 4576
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 3606
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 335 with susp > 0.1, we consider: 335
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 4731180 milliseconds (4731 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_32/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_32/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_32/target/classes/, /script/jGenProg_Defects4J_Math_32/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 576
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 335
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.12958026383720403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.12958026383720403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.12958026383720403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.12958026383720403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.10165112213575457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.10165112213575457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 335,  105
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 105
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 105, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_32/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 4731180
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-32
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_32/target/classes/:/script/jGenProg_Defects4J_Math_32/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
00:25:36.970 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
00:25:38.450 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
00:25:39.253 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
00:25:39.259 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
00:25:39.259 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
00:25:39.259 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
00:25:39.810 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:25:42.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:42.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:42.601 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] += e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry e = it.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:25:45.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:45.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:45.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] -= e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] += e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:25:47.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:47.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:47.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry e = it.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:25:50.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:50.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:50.047 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] += e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:25:52.628 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:52.628 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:52.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] -= e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:25:55.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:55.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:55.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == null) {
	z = r;
} else {
	z = null;
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x0),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:25:57.858 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:57.858 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:57.859 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = m.operate(r),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == null) {
	z = r;
} else {
	z = null;
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:26:00.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:00.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:00.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == null) {
	z = r;
} else {
	z = null;
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:26:02.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:02.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:02.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = m.operate(r),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Redundant check for null; null is not an instanceof any Object

00:26:04.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:04.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:04.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x0),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!(other instanceof org.apache.commons.math3.linear.RealVector)) {
	return false;
},commit: Redundant check for null; null is not an instanceof any Object
}, sim: -0.208075
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Redundant check for null; null is not an instanceof any Object

00:26:06.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:06.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:06.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!(other instanceof org.apache.commons.math3.linear.RealVector)) {
	return false;
},commit: Redundant check for null; null is not an instanceof any Object
}, sim: -0.208075
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:26:08.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:08.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:08.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x0),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry e = it.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Redundant check for null; null is not an instanceof any Object
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:26:10.821 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:10.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:10.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!(other instanceof org.apache.commons.math3.linear.RealVector)) {
	return false;
},commit: Redundant check for null; null is not an instanceof any Object
}, sim: -0.208075
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] -= e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Redundant check for null; null is not an instanceof any Object
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:26:13.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:13.291 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:13.292 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!(other instanceof org.apache.commons.math3.linear.RealVector)) {
	return false;
},commit: Redundant check for null; null is not an instanceof any Object
}, sim: -0.208075
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] += e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Redundant check for null; null is not an instanceof any Object
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:26:15.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:15.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:15.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!(other instanceof org.apache.commons.math3.linear.RealVector)) {
	return false;
},commit: Redundant check for null; null is not an instanceof any Object
}, sim: -0.208075
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry e = it.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:18.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:18.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:18.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:20.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:20.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:20.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (isSymmetric(matrix, false)) {
	transformToTridiagonal(matrix);
	findEigenVectors(transformer.getQ().getData());
} else {
	final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix);
	findEigenVectorsFromSchur(t);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:23.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:23.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:23.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:26.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:26.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:26.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (isSymmetric(matrix, false)) {
	transformToTridiagonal(matrix);
	findEigenVectors(transformer.getQ().getData());
} else {
	final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix);
	findEigenVectorsFromSchur(t);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:28.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:28.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:28.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] z = new double[size][size],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (isSymmetric(matrix, false)) {
	transformToTridiagonal(matrix);
	findEigenVectors(transformer.getQ().getData());
} else {
	final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix);
	findEigenVectorsFromSchur(t);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:29.965 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:29.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:29.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] z = new double[size][size],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:31.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:31.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:31.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z[i][i] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] z = new double[size][size],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:33.891 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:33.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:33.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < size; i++) {
	z[i][i] = 1.0;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] z = new double[size][size],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:36.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:36.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:36.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < size; i++) {
	z[i][i] = 1.0;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z[i][i] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:26:38.732 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:38.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:38.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:26:41.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:41.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:41.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < size; i++) {
	z[i][i] = 1.0;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:43.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:43.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:43.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedD.setEntry(i, i - 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:46.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:46.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:46.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedD.setEntry(i, i - 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:48.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:48.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:48.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
	cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:51.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:51.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:51.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < imagEigenvalues.length; i++) {
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
		cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
	} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
		cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:53.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:53.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:53.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < imagEigenvalues.length; i++) {
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
		cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
	} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
		cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
	cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
	cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:56.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:56.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:56.207 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:26:58.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:58.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:58.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:00.211 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:00.211 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:00.212 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:27:02.134 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:02.135 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:02.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:04.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:04.264 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:04.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z[i][i] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:06.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:06.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:06.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < size; i++) {
	z[i][i] = 1.0;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:27:09.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:09.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:09.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < imagEigenvalues.length; i++) {
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
		cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
	} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
		cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:11.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:11.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:11.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.SchurTransformer schurTransform = new org.apache.commons.math3.linear.SchurTransformer(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:14.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:14.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:14.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matT = schurTransform.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer schurTransform = new org.apache.commons.math3.linear.SchurTransformer(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:16.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:16.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:16.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matT = schurTransform.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:19.298 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:19.298 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:19.299 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matT = schurTransform.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:21.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:21.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:21.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:24.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:24.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:24.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i] = matT[i][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matT = schurTransform.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:26.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:26.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:26.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i] = matT[i][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:29.106 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:29.106 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:29.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = matT[i + 1][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:31.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:31.573 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:31.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = matT[i + 1][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i] = matT[i][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:34.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:34.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:34.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double p = 0.5 * (matT[i][i] - x),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = matT[i + 1][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:36.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:36.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:36.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1]))),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double p = 0.5 * (matT[i][i] - x),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:38.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:38.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:38.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double p = 0.5 * (matT[i][i] - x),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:40.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:40.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:40.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1]))),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:42.160 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:42.160 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:42.161 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues[i] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1]))),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:44.099 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:44.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:44.101 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues[i] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:46.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:46.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:46.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i + 1] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1]))),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:49.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:49.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:49.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: realEigenvalues[i + 1] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues[i] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:51.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:51.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:51.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues[i + 1] = -z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:53.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:53.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:53.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: imagEigenvalues[i + 1] = -z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i + 1] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:55.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:55.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:55.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: i++,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:57.722 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:57.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:57.723 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: i++,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues[i + 1] = -z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:27:59.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:59.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:59.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((i == (realEigenvalues.length - 1)) || 
org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
	realEigenvalues[i] = matT[i][i];
} else {
	final double x = matT[i + 1][i + 1];
	final double p = 0.5 * (matT[i][i] - x);
	final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
	realEigenvalues[i] = x + p;
	imagEigenvalues[i] = z;
	realEigenvalues[i + 1] = x + p;
	imagEigenvalues[i + 1] = -z;
	i++;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues[i] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:01.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:01.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:01.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((i == (realEigenvalues.length - 1)) || 
org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
	realEigenvalues[i] = matT[i][i];
} else {
	final double x = matT[i + 1][i + 1];
	final double p = 0.5 * (matT[i][i] - x);
	final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
	realEigenvalues[i] = x + p;
	imagEigenvalues[i] = z;
	realEigenvalues[i + 1] = x + p;
	imagEigenvalues[i + 1] = -z;
	i++;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: i++,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:04.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:04.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:04.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues[i] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:06.364 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:06.365 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:06.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: i++,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:08.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:08.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:08.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((i == (realEigenvalues.length - 1)) || 
org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
	realEigenvalues[i] = matT[i][i];
} else {
	final double x = matT[i + 1][i + 1];
	final double p = 0.5 * (matT[i][i] - x);
	final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
	realEigenvalues[i] = x + p;
	imagEigenvalues[i] = z;
	realEigenvalues[i + 1] = x + p;
	imagEigenvalues[i + 1] = -z;
	i++;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:10.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:10.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:10.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return schurTransform,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i + 1] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:12.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:12.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:12.295 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return schurTransform,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((i == (realEigenvalues.length - 1)) || 
org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
	realEigenvalues[i] = matT[i][i];
} else {
	final double x = matT[i + 1][i + 1];
	final double p = 0.5 * (matT[i][i] - x);
	final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
	realEigenvalues[i] = x + p;
	imagEigenvalues[i] = z;
	realEigenvalues[i + 1] = x + p;
	imagEigenvalues[i + 1] = -z;
	i++;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:14.640 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:14.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:14.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return schurTransform,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:16.969 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:16.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:16.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.complex.Complex(xr, xi).divide(new org.apache.commons.math3.complex.Complex(yr, yi)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues[i + 1] = x + p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:18.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:18.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:18.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.complex.Complex(xr, xi).divide(new org.apache.commons.math3.complex.Complex(yr, yi)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((i == (realEigenvalues.length - 1)) || 
org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
	realEigenvalues[i] = matT[i][i];
} else {
	final double x = matT[i + 1][i + 1];
	final double p = 0.5 * (matT[i][i] - x);
	final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
	realEigenvalues[i] = x + p;
	imagEigenvalues[i] = z;
	realEigenvalues[i + 1] = x + p;
	imagEigenvalues[i + 1] = -z;
	i++;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:20.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:20.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:20.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.complex.Complex(xr, xi).divide(new org.apache.commons.math3.complex.Complex(yr, yi)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return schurTransform,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:22.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:22.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:22.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matrixT = schur.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues[i + 1] = -z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:24.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:24.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:24.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matrixT = schur.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:27.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:27.448 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:27.449 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matrixT = schur.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.complex.Complex(xr, xi).divide(new org.apache.commons.math3.complex.Complex(yr, yi)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:29.376 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:29.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:29.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: imagEigenvalues[i + 1] = -z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:31.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:31.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:31.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return schurTransform,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:33.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:33.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:33.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matrixT = schur.getT().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:35.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:35.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:35.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = matrixT.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: i++,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:37.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:37.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:37.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = matrixT.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.complex.Complex(xr, xi).divide(new org.apache.commons.math3.complex.Complex(yr, yi)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:39.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:39.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:39.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = matrixT.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:41.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:41.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:41.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double norm = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: i++,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:43.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:43.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:43.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double norm = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = matrixT.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:46.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:46.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:46.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((i == (realEigenvalues.length - 1)) || 
org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
	realEigenvalues[i] = matT[i][i];
} else {
	final double x = matT[i + 1][i + 1];
	final double p = 0.5 * (matT[i][i] - x);
	final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
	realEigenvalues[i] = x + p;
	imagEigenvalues[i] = z;
	realEigenvalues[i + 1] = x + p;
	imagEigenvalues[i + 1] = -z;
	i++;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:48.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:48.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:48.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double norm = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:50.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:50.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:50.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
		norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:53.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:53.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:53.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
		norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:55.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:55.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:55.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(norm, 0.0)) {

	return;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:28:58.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:58.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:58.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(norm, 0.0)) {

	return;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:00.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:00.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:00.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double r = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:02.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:02.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:02.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:05.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:05.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:05.095 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double p = realEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:07.573 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:07.574 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:07.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = imagEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = realEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:10.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:10.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:10.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = idx,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = imagEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:12.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:12.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:12.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][idx] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int l = idx,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:14.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:14.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:14.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double w = matrixT[i][i] - p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][idx] = 1.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:16.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:16.480 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:16.481 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double w = matrixT[i][i] - p,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:18.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:18.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:18.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = r + (matrixT[i][j] * matrixT[j][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:20.804 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:20.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:20.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = l; j <= idx; j++) {
	r = r + (matrixT[i][j] * matrixT[j][idx]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = r + (matrixT[i][j] * matrixT[j][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:23.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:23.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:23.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = w,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = l; j <= idx; j++) {
	r = r + (matrixT[i][j] * matrixT[j][idx]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:25.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:25.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:25.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = r,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = w,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:28.248 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:28.248 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:28.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: l = i,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = r,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:30.479 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:30.479 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:30.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (-r) / w,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: l = i,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:32.398 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:32.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:32.400 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = (-r) / w,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:34.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:34.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:34.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (w != 0.0) {
	matrixT[i][idx] = (-r) / w;
} else {
	matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:36.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:36.370 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:36.371 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double x = matrixT[i][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (w != 0.0) {
	matrixT[i][idx] = (-r) / w;
} else {
	matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:38.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:38.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:38.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double y = matrixT[i + 1][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double x = matrixT[i][i + 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:41.493 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:41.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:41.495 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
(imagEigenvalues[i] * imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double y = matrixT[i + 1][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:43.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:43.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:43.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double t = ((x * s) - (z * r)) / q,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
(imagEigenvalues[i] * imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:45.910 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:45.910 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:45.911 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double t = ((x * s) - (z * r)) / q,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:48.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:48.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:48.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx] = ((-r) - (w * t)) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:50.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:50.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:50.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx] = ((-s) - (y * t)) / z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = ((-r) - (w * t)) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:52.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:52.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:52.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
	matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
} else {
	matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = ((-s) - (y * t)) / z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:54.622 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:54.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:54.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
	if (w != 0.0) {
		matrixT[i][idx] = (-r) / w;
	} else {
		matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
	}
} else {

	double x = matrixT[i][i + 1];
	double y = matrixT[i + 1][i];
	q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
	(imagEigenvalues[i] * imagEigenvalues[i]);
	double t = ((x * s) - (z * r)) / q;
	matrixT[i][idx] = t;
	if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
		matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
	} else {
		matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
	matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
} else {
	matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:56.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:56.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:56.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
	if (w != 0.0) {
		matrixT[i][idx] = (-r) / w;
	} else {
		matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
	}
} else {

	double x = matrixT[i][i + 1];
	double y = matrixT[i + 1][i];
	q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
	(imagEigenvalues[i] * imagEigenvalues[i]);
	double t = ((x * s) - (z * r)) / q;
	matrixT[i][idx] = t;
	if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
		matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
	} else {
		matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:29:59.062 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:59.063 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:59.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[j][idx] = matrixT[j][idx] / t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:01.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:01.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:01.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j <= idx; j++) {
	matrixT[j][idx] = matrixT[j][idx] / t;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[j][idx] = matrixT[j][idx] / t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:03.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:03.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:03.221 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
	for (int j = i; j <= idx; j++) {
		matrixT[j][idx] = matrixT[j][idx] / t;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j <= idx; j++) {
	matrixT[j][idx] = matrixT[j][idx] / t;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:05.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:05.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:05.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
	z = w;
	s = r;
} else {
	l = i;
	if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
		if (w != 0.0) {
			matrixT[i][idx] = (-r) / w;
		} else {
			matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
		}
	} else {

		double x = matrixT[i][i + 1];
		double y = matrixT[i + 1][i];
		q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
		(imagEigenvalues[i] * imagEigenvalues[i]);
		double t = ((x * s) - (z * r)) / q;
		matrixT[i][idx] = t;
		if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
			matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
		} else {
			matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
		}
	}


	double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
	if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
		for (int j = i; j <= idx; j++) {
			matrixT[j][idx] = matrixT[j][idx] / t;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
	for (int j = i; j <= idx; j++) {
		matrixT[j][idx] = matrixT[j][idx] / t;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:07.113 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:07.113 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:07.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = idx - 1; i >= 0; i--) {
	double w = matrixT[i][i] - p;
	r = 0.0;
	for (int j = l; j <= idx; j++) {
		r = r + (matrixT[i][j] * matrixT[j][idx]);
	}
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
		z = w;
		s = r;
	} else {
		l = i;
		if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
			if (w != 0.0) {
				matrixT[i][idx] = (-r) / w;
			} else {
				matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
			}
		} else {

			double x = matrixT[i][i + 1];
			double y = matrixT[i + 1][i];
			q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
			(imagEigenvalues[i] * imagEigenvalues[i]);
			double t = ((x * s) - (z * r)) / q;
			matrixT[i][idx] = t;
			if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
				matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
			} else {
				matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
			}
		}


		double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
		if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
			for (int j = i; j <= idx; j++) {
				matrixT[j][idx] = matrixT[j][idx] / t;
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
	z = w;
	s = r;
} else {
	l = i;
	if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
		if (w != 0.0) {
			matrixT[i][idx] = (-r) / w;
		} else {
			matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
		}
	} else {

		double x = matrixT[i][i + 1];
		double y = matrixT[i + 1][i];
		q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
		(imagEigenvalues[i] * imagEigenvalues[i]);
		double t = ((x * s) - (z * r)) / q;
		matrixT[i][idx] = t;
		if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
			matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
		} else {
			matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
		}
	}


	double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
	if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
		for (int j = i; j <= idx; j++) {
			matrixT[j][idx] = matrixT[j][idx] / t;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:09.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:09.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:09.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = idx - 1,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = idx - 1; i >= 0; i--) {
	double w = matrixT[i][i] - p;
	r = 0.0;
	for (int j = l; j <= idx; j++) {
		r = r + (matrixT[i][j] * matrixT[j][idx]);
	}
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
		z = w;
		s = r;
	} else {
		l = i;
		if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
			if (w != 0.0) {
				matrixT[i][idx] = (-r) / w;
			} else {
				matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
			}
		} else {

			double x = matrixT[i][i + 1];
			double y = matrixT[i + 1][i];
			q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
			(imagEigenvalues[i] * imagEigenvalues[i]);
			double t = ((x * s) - (z * r)) / q;
			matrixT[i][idx] = t;
			if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
				matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
			} else {
				matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
			}
		}


		double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
		if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
			for (int j = i; j <= idx; j++) {
				matrixT[j][idx] = matrixT[j][idx] / t;
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:11.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:11.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:11.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int l = idx - 1,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:13.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:13.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:13.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:15.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:15.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:15.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
matrixT[idx - 1][idx - 1] - p, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:17.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:17.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:17.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = result.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
matrixT[idx - 1][idx - 1] - p, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:19.947 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:19.948 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:19.949 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx] = result.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = result.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:22.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:22.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:22.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
	matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
	matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
} else {
	final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
	matrixT[idx - 1][idx - 1] - p, q);
	matrixT[idx - 1][idx - 1] = result.getReal();
	matrixT[idx - 1][idx] = result.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx] = result.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:24.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:24.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:24.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][idx - 1] = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
	matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
	matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
} else {
	final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
	matrixT[idx - 1][idx - 1] - p, q);
	matrixT[idx - 1][idx - 1] = result.getReal();
	matrixT[idx - 1][idx] = result.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:26.974 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:26.975 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:26.976 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double ra = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][idx - 1] = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:29.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:29.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:29.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double sa = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double ra = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:31.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:31.578 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:31.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double sa = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:33.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:33.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:33.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sa = sa + (matrixT[i][j] * matrixT[j][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:35.583 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:35.583 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:35.584 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = l; j <= idx; j++) {
	ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
	sa = sa + (matrixT[i][j] * matrixT[j][idx]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: sa = sa + (matrixT[i][j] * matrixT[j][idx]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:38.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:38.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:38.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = ra,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = l; j <= idx; j++) {
	ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
	sa = sa + (matrixT[i][j] * matrixT[j][idx]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:40.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:40.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:40.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = sa,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = ra,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:42.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:42.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:42.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = sa,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:44.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:44.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:44.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = c.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:46.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:46.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:46.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = c.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx - 1] = c.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:48.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:48.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:48.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = c.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:50.313 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:50.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:50.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double vi = ((realEigenvalues[i] - p) * 2.0) * q,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:52.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:52.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:52.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double vi = ((realEigenvalues[i] - p) * 2.0) * q,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:54.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:54.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:54.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
	vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
	((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
	org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z)),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:56.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:56.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:56.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
((x * s) - (z * sa)) - (q * ra), vr, vi),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
	vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
	((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
	org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:30:58.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:58.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:58.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
(q * matrixT[i][idx])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
((x * s) - (z * sa)) - (q * ra), vr, vi),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:00.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:00.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:00.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
(q * matrixT[i][idx - 1])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
(q * matrixT[i][idx])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:02.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:02.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:02.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
(-s) - (y * matrixT[i][idx]), z, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
(q * matrixT[i][idx - 1])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:05.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:05.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:05.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx - 1] = c2.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
(-s) - (y * matrixT[i][idx]), z, q),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:07.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:07.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:07.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i + 1][idx] = c2.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx - 1] = c2.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:09.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:09.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:09.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
	matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
	(q * matrixT[i][idx])) / x;
	matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
	(q * matrixT[i][idx - 1])) / x;
} else {
	final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
	(-s) - (y * matrixT[i][idx]), z, q);
	matrixT[i + 1][idx - 1] = c2.getReal();
	matrixT[i + 1][idx] = c2.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = c2.getImaginary(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:11.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:11.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:11.691 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
	final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
	matrixT[i][idx - 1] = c.getReal();
	matrixT[i][idx] = c.getImaginary();
} else {

	double x = matrixT[i][i + 1];
	double y = matrixT[i + 1][i];
	double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
	(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
	final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
	if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
		vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
		((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
		org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
	}
	final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
	((x * s) - (z * sa)) - (q * ra), vr, vi);
	matrixT[i][idx - 1] = c.getReal();
	matrixT[i][idx] = c.getImaginary();

	if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
		matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
		(q * matrixT[i][idx])) / x;
		matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
		(q * matrixT[i][idx - 1])) / x;
	} else {
		final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
		(-s) - (y * matrixT[i][idx]), z, q);
		matrixT[i + 1][idx - 1] = c2.getReal();
		matrixT[i + 1][idx] = c2.getImaginary();
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
	matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
	(q * matrixT[i][idx])) / x;
	matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
	(q * matrixT[i][idx - 1])) / x;
} else {
	final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
	(-s) - (y * matrixT[i][idx]), z, q);
	matrixT[i + 1][idx - 1] = c2.getReal();
	matrixT[i + 1][idx] = c2.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:14.049 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:14.049 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:14.050 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx])),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
	final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
	matrixT[i][idx - 1] = c.getReal();
	matrixT[i][idx] = c.getImaginary();
} else {

	double x = matrixT[i][i + 1];
	double y = matrixT[i + 1][i];
	double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
	(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
	final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
	if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
		vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
		((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
		org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
	}
	final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
	((x * s) - (z * sa)) - (q * ra), vr, vi);
	matrixT[i][idx - 1] = c.getReal();
	matrixT[i][idx] = c.getImaginary();

	if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
		matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
		(q * matrixT[i][idx])) / x;
		matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
		(q * matrixT[i][idx - 1])) / x;
	} else {
		final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
		(-s) - (y * matrixT[i][idx]), z, q);
		matrixT[i + 1][idx - 1] = c2.getReal();
		matrixT[i + 1][idx] = c2.getImaginary();
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:16.470 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:16.470 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:16.471 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[j][idx - 1] = matrixT[j][idx - 1] / t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx])),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:18.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:18.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:18.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j <= idx; j++) {
	matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
	matrixT[j][idx] = matrixT[j][idx] / t;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[j][idx - 1] = matrixT[j][idx - 1] / t,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:20.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:20.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:20.985 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
	for (int j = i; j <= idx; j++) {
		matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
		matrixT[j][idx] = matrixT[j][idx] / t;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j <= idx; j++) {
	matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
	matrixT[j][idx] = matrixT[j][idx] / t;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:23.041 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:23.041 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:23.042 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
	z = w;
	r = ra;
	s = sa;
} else {
	l = i;
	if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
		final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
		matrixT[i][idx - 1] = c.getReal();
		matrixT[i][idx] = c.getImaginary();
	} else {

		double x = matrixT[i][i + 1];
		double y = matrixT[i + 1][i];
		double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
		(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
		final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
		if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
			vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
			((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
			org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
		}
		final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
		((x * s) - (z * sa)) - (q * ra), vr, vi);
		matrixT[i][idx - 1] = c.getReal();
		matrixT[i][idx] = c.getImaginary();

		if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
			matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
			(q * matrixT[i][idx])) / x;
			matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
			(q * matrixT[i][idx - 1])) / x;
		} else {
			final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
			(-s) - (y * matrixT[i][idx]), z, q);
			matrixT[i + 1][idx - 1] = c2.getReal();
			matrixT[i + 1][idx] = c2.getImaginary();
		}
	}


	double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
	org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
	if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
		for (int j = i; j <= idx; j++) {
			matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
			matrixT[j][idx] = matrixT[j][idx] / t;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
	for (int j = i; j <= idx; j++) {
		matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
		matrixT[j][idx] = matrixT[j][idx] / t;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:24.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:24.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:24.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = idx - 2; i >= 0; i--) {
	double ra = 0.0;
	double sa = 0.0;
	for (int j = l; j <= idx; j++) {
		ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
		sa = sa + (matrixT[i][j] * matrixT[j][idx]);
	}
	double w = matrixT[i][i] - p;

	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
		z = w;
		r = ra;
		s = sa;
	} else {
		l = i;
		if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
			final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
			matrixT[i][idx - 1] = c.getReal();
			matrixT[i][idx] = c.getImaginary();
		} else {

			double x = matrixT[i][i + 1];
			double y = matrixT[i + 1][i];
			double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
			(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
			final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
			if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
				vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
				((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
				org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
			}
			final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
			((x * s) - (z * sa)) - (q * ra), vr, vi);
			matrixT[i][idx - 1] = c.getReal();
			matrixT[i][idx] = c.getImaginary();

			if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
				matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
				(q * matrixT[i][idx])) / x;
				matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
				(q * matrixT[i][idx - 1])) / x;
			} else {
				final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
				(-s) - (y * matrixT[i][idx]), z, q);
				matrixT[i + 1][idx - 1] = c2.getReal();
				matrixT[i + 1][idx] = c2.getImaginary();
			}
		}


		double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
		org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
		if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
			for (int j = i; j <= idx; j++) {
				matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
				matrixT[j][idx] = matrixT[j][idx] / t;
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
	z = w;
	r = ra;
	s = sa;
} else {
	l = i;
	if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
		final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
		matrixT[i][idx - 1] = c.getReal();
		matrixT[i][idx] = c.getImaginary();
	} else {

		double x = matrixT[i][i + 1];
		double y = matrixT[i + 1][i];
		double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
		(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
		final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
		if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
			vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
			((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
			org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
		}
		final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
		((x * s) - (z * sa)) - (q * ra), vr, vi);
		matrixT[i][idx - 1] = c.getReal();
		matrixT[i][idx] = c.getImaginary();

		if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
			matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
			(q * matrixT[i][idx])) / x;
			matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
			(q * matrixT[i][idx - 1])) / x;
		} else {
			final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
			(-s) - (y * matrixT[i][idx]), z, q);
			matrixT[i + 1][idx - 1] = c2.getReal();
			matrixT[i + 1][idx] = c2.getImaginary();
		}
	}


	double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
	org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
	if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
		for (int j = i; j <= idx; j++) {
			matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
			matrixT[j][idx] = matrixT[j][idx] / t;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:26.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:26.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:26.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = idx - 2; i >= 0; i--) {
	double ra = 0.0;
	double sa = 0.0;
	for (int j = l; j <= idx; j++) {
		ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
		sa = sa + (matrixT[i][j] * matrixT[j][idx]);
	}
	double w = matrixT[i][i] - p;

	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
		z = w;
		r = ra;
		s = sa;
	} else {
		l = i;
		if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
			final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
			matrixT[i][idx - 1] = c.getReal();
			matrixT[i][idx] = c.getImaginary();
		} else {

			double x = matrixT[i][i + 1];
			double y = matrixT[i + 1][i];
			double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
			(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
			final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
			if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
				vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
				((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
				org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
			}
			final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
			((x * s) - (z * sa)) - (q * ra), vr, vi);
			matrixT[i][idx - 1] = c.getReal();
			matrixT[i][idx] = c.getImaginary();

			if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
				matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
				(q * matrixT[i][idx])) / x;
				matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
				(q * matrixT[i][idx - 1])) / x;
			} else {
				final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
				(-s) - (y * matrixT[i][idx]), z, q);
				matrixT[i + 1][idx - 1] = c2.getReal();
				matrixT[i + 1][idx] = c2.getImaginary();
			}
		}


		double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
		org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
		if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
			for (int j = i; j <= idx; j++) {
				matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
				matrixT[j][idx] = matrixT[j][idx] / t;
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:28.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:28.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:28.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(q, 0.0)) {

	int l = idx;
	matrixT[idx][idx] = 1.0;
	for (int i = idx - 1; i >= 0; i--) {
		double w = matrixT[i][i] - p;
		r = 0.0;
		for (int j = l; j <= idx; j++) {
			r = r + (matrixT[i][j] * matrixT[j][idx]);
		}
		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			s = r;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				if (w != 0.0) {
					matrixT[i][idx] = (-r) / w;
				} else {
					matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
				}
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i]);
				double t = ((x * s) - (z * r)) / q;
				matrixT[i][idx] = t;
				if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
					matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
				} else {
					matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
				}
			}


			double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
} else if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:31.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:31.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:31.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int idx = n - 1; idx >= 0; idx--) {
	double p = realEigenvalues[idx];
	double q = imagEigenvalues[idx];

	if (org.apache.commons.math3.util.Precision.equals(q, 0.0)) {

		int l = idx;
		matrixT[idx][idx] = 1.0;
		for (int i = idx - 1; i >= 0; i--) {
			double w = matrixT[i][i] - p;
			r = 0.0;
			for (int j = l; j <= idx; j++) {
				r = r + (matrixT[i][j] * matrixT[j][idx]);
			}
			if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
				z = w;
				s = r;
			} else {
				l = i;
				if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
					if (w != 0.0) {
						matrixT[i][idx] = (-r) / w;
					} else {
						matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
					}
				} else {

					double x = matrixT[i][i + 1];
					double y = matrixT[i + 1][i];
					q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
					(imagEigenvalues[i] * imagEigenvalues[i]);
					double t = ((x * s) - (z * r)) / q;
					matrixT[i][idx] = t;
					if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
						matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
					} else {
						matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
					}
				}


				double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
				if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
					for (int j = i; j <= idx; j++) {
						matrixT[j][idx] = matrixT[j][idx] / t;
					}
				}
			}
		}
	} else if (q < 0.0) {

		int l = idx - 1;


		if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
			matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
			matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
		} else {
			final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
			matrixT[idx - 1][idx - 1] - p, q);
			matrixT[idx - 1][idx - 1] = result.getReal();
			matrixT[idx - 1][idx] = result.getImaginary();
		}

		matrixT[idx][idx - 1] = 0.0;
		matrixT[idx][idx] = 1.0;

		for (int i = idx - 2; i >= 0; i--) {
			double ra = 0.0;
			double sa = 0.0;
			for (int j = l; j <= idx; j++) {
				ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
				sa = sa + (matrixT[i][j] * matrixT[j][idx]);
			}
			double w = matrixT[i][i] - p;

			if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
				z = w;
				r = ra;
				s = sa;
			} else {
				l = i;
				if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
					final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
					matrixT[i][idx - 1] = c.getReal();
					matrixT[i][idx] = c.getImaginary();
				} else {

					double x = matrixT[i][i + 1];
					double y = matrixT[i + 1][i];
					double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
					(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
					final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
					if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
						vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
						((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
						org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
					}
					final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
					((x * s) - (z * sa)) - (q * ra), vr, vi);
					matrixT[i][idx - 1] = c.getReal();
					matrixT[i][idx] = c.getImaginary();

					if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
						matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
						(q * matrixT[i][idx])) / x;
						matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
						(q * matrixT[i][idx - 1])) / x;
					} else {
						final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
						(-s) - (y * matrixT[i][idx]), z, q);
						matrixT[i + 1][idx - 1] = c2.getReal();
						matrixT[i + 1][idx] = c2.getImaginary();
					}
				}


				double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
				org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
				if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
					for (int j = i; j <= idx; j++) {
						matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
						matrixT[j][idx] = matrixT[j][idx] / t;
					}
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(q, 0.0)) {

	int l = idx;
	matrixT[idx][idx] = 1.0;
	for (int i = idx - 1; i >= 0; i--) {
		double w = matrixT[i][i] - p;
		r = 0.0;
		for (int j = l; j <= idx; j++) {
			r = r + (matrixT[i][j] * matrixT[j][idx]);
		}
		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			s = r;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				if (w != 0.0) {
					matrixT[i][idx] = (-r) / w;
				} else {
					matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
				}
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i]);
				double t = ((x * s) - (z * r)) / q;
				matrixT[i][idx] = t;
				if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
					matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
				} else {
					matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
				}
			}


			double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
} else if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:33.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:33.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:33.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][j] = matrixT[i][j],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int idx = n - 1; idx >= 0; idx--) {
	double p = realEigenvalues[idx];
	double q = imagEigenvalues[idx];

	if (org.apache.commons.math3.util.Precision.equals(q, 0.0)) {

		int l = idx;
		matrixT[idx][idx] = 1.0;
		for (int i = idx - 1; i >= 0; i--) {
			double w = matrixT[i][i] - p;
			r = 0.0;
			for (int j = l; j <= idx; j++) {
				r = r + (matrixT[i][j] * matrixT[j][idx]);
			}
			if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
				z = w;
				s = r;
			} else {
				l = i;
				if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
					if (w != 0.0) {
						matrixT[i][idx] = (-r) / w;
					} else {
						matrixT[i][idx] = (-r) / (org.apache.commons.math3.util.Precision.EPSILON * norm);
					}
				} else {

					double x = matrixT[i][i + 1];
					double y = matrixT[i + 1][i];
					q = ((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
					(imagEigenvalues[i] * imagEigenvalues[i]);
					double t = ((x * s) - (z * r)) / q;
					matrixT[i][idx] = t;
					if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
						matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
					} else {
						matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
					}
				}


				double t = org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]);
				if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
					for (int j = i; j <= idx; j++) {
						matrixT[j][idx] = matrixT[j][idx] / t;
					}
				}
			}
		}
	} else if (q < 0.0) {

		int l = idx - 1;


		if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
			matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
			matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
		} else {
			final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
			matrixT[idx - 1][idx - 1] - p, q);
			matrixT[idx - 1][idx - 1] = result.getReal();
			matrixT[idx - 1][idx] = result.getImaginary();
		}

		matrixT[idx][idx - 1] = 0.0;
		matrixT[idx][idx] = 1.0;

		for (int i = idx - 2; i >= 0; i--) {
			double ra = 0.0;
			double sa = 0.0;
			for (int j = l; j <= idx; j++) {
				ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
				sa = sa + (matrixT[i][j] * matrixT[j][idx]);
			}
			double w = matrixT[i][i] - p;

			if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
				z = w;
				r = ra;
				s = sa;
			} else {
				l = i;
				if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
					final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
					matrixT[i][idx - 1] = c.getReal();
					matrixT[i][idx] = c.getImaginary();
				} else {

					double x = matrixT[i][i + 1];
					double y = matrixT[i + 1][i];
					double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
					(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
					final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
					if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
						vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
						((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
						org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
					}
					final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
					((x * s) - (z * sa)) - (q * ra), vr, vi);
					matrixT[i][idx - 1] = c.getReal();
					matrixT[i][idx] = c.getImaginary();

					if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
						matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
						(q * matrixT[i][idx])) / x;
						matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
						(q * matrixT[i][idx - 1])) / x;
					} else {
						final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
						(-s) - (y * matrixT[i][idx]), z, q);
						matrixT[i + 1][idx - 1] = c2.getReal();
						matrixT[i + 1][idx] = c2.getImaginary();
					}
				}


				double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
				org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
				if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
					for (int j = i; j <= idx; j++) {
						matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
						matrixT[j][idx] = matrixT[j][idx] / t;
					}
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:35.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:35.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:35.953 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < n; j++) {
	matrixP[i][j] = matrixT[i][j];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][j] = matrixT[i][j],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:38.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:38.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:38.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((i < 0) | (i > (n - 1))) {
	for (int j = i; j < n; j++) {
		matrixP[i][j] = matrixT[i][j];
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < n; j++) {
	matrixP[i][j] = matrixT[i][j];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:40.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:40.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:40.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	if ((i < 0) | (i > (n - 1))) {
		for (int j = i; j < n; j++) {
			matrixP[i][j] = matrixT[i][j];
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((i < 0) | (i > (n - 1))) {
	for (int j = i; j < n; j++) {
		matrixP[i][j] = matrixT[i][j];
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:42.786 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:42.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:42.787 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	if ((i < 0) | (i > (n - 1))) {
		for (int j = i; j < n; j++) {
			matrixP[i][j] = matrixT[i][j];
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:44.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:44.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:44.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = z + (matrixP[i][k] * matrixT[k][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = 0.0,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:46.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:46.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:46.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
	z = z + (matrixP[i][k] * matrixT[k][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = z + (matrixP[i][k] * matrixT[k][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:48.645 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:48.645 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:48.646 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][j] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
	z = z + (matrixP[i][k] * matrixT[k][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:50.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:50.761 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:50.762 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = 0.0;
	for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
		z = z + (matrixP[i][k] * matrixT[k][j]);
	}
	matrixP[i][j] = z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][j] = z,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:53.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:53.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:53.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = n - 1; j >= 0; j--) {
	for (int i = 0; i <= (n - 1); i++) {
		z = 0.0;
		for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
			z = z + (matrixP[i][k] * matrixT[k][j]);
		}
		matrixP[i][j] = z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= (n - 1); i++) {
	z = 0.0;
	for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
		z = z + (matrixP[i][k] * matrixT[k][j]);
	}
	matrixP[i][j] = z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:55.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:55.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:55.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: tmp[j] = matrixP[j][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = n - 1; j >= 0; j--) {
	for (int i = 0; i <= (n - 1); i++) {
		z = 0.0;
		for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
			z = z + (matrixP[i][k] * matrixT[k][j]);
		}
		matrixP[i][j] = z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:31:58.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:58.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:58.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 0; j < n; j++) {
	tmp[j] = matrixP[j][i];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: tmp[j] = matrixP[j][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:00.369 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:00.370 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:00.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		tmp[j] = matrixP[j][i];
	}
	eigenvectors[i] = new org.apache.commons.math3.linear.ArrayRealVector(tmp);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < n; j++) {
	tmp[j] = matrixP[j][i];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:02.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:02.789 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:02.790 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:05.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:05.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:05.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer schurTransform = new org.apache.commons.math3.linear.SchurTransformer(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:06.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:06.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:06.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:08.849 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:08.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:08.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double p = 0.5 * (matT[i][i] - x),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:10.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:10.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:10.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:13.016 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:13.016 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:13.017 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < n; j++) {
	norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: norm = norm + org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use getter instead of direct array reference
, ingredientB: Use the proper method to get the array length

00:32:15.558 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:15.559 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:15.560 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use getter instead of direct array reference
, ingredientB: Use getter instead of direct array reference

00:32:18.118 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:18.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:18.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use getter instead of direct array reference
, ingredientB: Use the proper method to get the array length

00:32:20.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:20.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:20.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use getter instead of direct array reference
, ingredientB: Use getter instead of direct array reference

00:32:23.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:23.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:23.128 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: Use getter instead of direct array reference

00:32:25.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:25.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:25.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: Use getter instead of direct array reference

00:32:27.987 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:27.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:27.989 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: Use the proper method to get the array length

00:32:30.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:30.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:30.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: Use getter instead of direct array reference

00:32:32.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:32.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:32.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:32:34.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:34.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:34.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: Use getter instead of direct array reference

00:32:37.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:37.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:37.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:32:39.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:39.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:39.199 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: Use getter instead of direct array reference

00:32:41.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:41.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:41.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:44.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:44.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:44.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:46.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:46.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:46.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer schurTransform = new org.apache.commons.math3.linear.SchurTransformer(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:48.834 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:48.834 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:48.835 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:51.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:51.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:51.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double p = 0.5 * (matT[i][i] - x),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:53.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:53.603 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:53.604 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < realEigenvalues.length; i++) {
	if ((i == (realEigenvalues.length - 1)) || 
	org.apache.commons.math3.util.Precision.equals(matT[i + 1][i], 0.0, epsilon)) {
		realEigenvalues[i] = matT[i][i];
	} else {
		final double x = matT[i + 1][i + 1];
		final double p = 0.5 * (matT[i][i] - x);
		final double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs((p * p) + (matT[i + 1][i] * matT[i][i + 1])));
		realEigenvalues[i] = x + p;
		imagEigenvalues[i] = z;
		realEigenvalues[i + 1] = x + p;
		imagEigenvalues[i + 1] = -z;
		i++;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:55.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:55.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:55.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = imagEigenvalues[idx],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:57.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:57.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:57.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = result.getReal(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:32:59.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:59.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:59.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (q < 0.0) {

	int l = idx - 1;


	if (org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) > org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx])) {
		matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
		matrixT[idx - 1][idx] = (-(matrixT[idx][idx] - p)) / matrixT[idx][idx - 1];
	} else {
		final org.apache.commons.math3.complex.Complex result = cdiv(0.0, -matrixT[idx - 1][idx], 
		matrixT[idx - 1][idx - 1] - p, q);
		matrixT[idx - 1][idx - 1] = result.getReal();
		matrixT[idx - 1][idx] = result.getImaginary();
	}

	matrixT[idx][idx - 1] = 0.0;
	matrixT[idx][idx] = 1.0;

	for (int i = idx - 2; i >= 0; i--) {
		double ra = 0.0;
		double sa = 0.0;
		for (int j = l; j <= idx; j++) {
			ra = ra + (matrixT[i][j] * matrixT[j][idx - 1]);
			sa = sa + (matrixT[i][j] * matrixT[j][idx]);
		}
		double w = matrixT[i][i] - p;

		if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0.0) {
			z = w;
			r = ra;
			s = sa;
		} else {
			l = i;
			if (org.apache.commons.math3.util.Precision.equals(imagEigenvalues[i], 0.0)) {
				final org.apache.commons.math3.complex.Complex c = cdiv(-ra, -sa, w, q);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();
			} else {

				double x = matrixT[i][i + 1];
				double y = matrixT[i + 1][i];
				double vr = (((realEigenvalues[i] - p) * (realEigenvalues[i] - p)) + 
				(imagEigenvalues[i] * imagEigenvalues[i])) - (q * q);
				final double vi = ((realEigenvalues[i] - p) * 2.0) * q;
				if (org.apache.commons.math3.util.Precision.equals(vr, 0.0) && org.apache.commons.math3.util.Precision.equals(vi, 0.0)) {
					vr = (org.apache.commons.math3.util.Precision.EPSILON * norm) * 
					((((org.apache.commons.math3.util.FastMath.abs(w) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(x)) + 
					org.apache.commons.math3.util.FastMath.abs(y)) + org.apache.commons.math3.util.FastMath.abs(z));
				}
				final org.apache.commons.math3.complex.Complex c = cdiv(((x * r) - (z * ra)) + (q * sa), 
				((x * s) - (z * sa)) - (q * ra), vr, vi);
				matrixT[i][idx - 1] = c.getReal();
				matrixT[i][idx] = c.getImaginary();

				if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
					matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
					(q * matrixT[i][idx])) / x;
					matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
					(q * matrixT[i][idx - 1])) / x;
				} else {
					final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
					(-s) - (y * matrixT[i][idx]), z, q);
					matrixT[i + 1][idx - 1] = c2.getReal();
					matrixT[i + 1][idx] = c2.getImaginary();
				}
			}


			double t = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx - 1]), 
			org.apache.commons.math3.util.FastMath.abs(matrixT[i][idx]));
			if (((org.apache.commons.math3.util.Precision.EPSILON * t) * t) > 1) {
				for (int j = i; j <= idx; j++) {
					matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
					matrixT[j][idx] = matrixT[j][idx] / t;
				}
			}
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:01.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:01.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:01.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = z + (matrixP[i][k] * matrixT[k][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:04.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:04.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:04.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = n - 1; j >= 0; j--) {
	for (int i = 0; i <= (n - 1); i++) {
		z = 0.0;
		for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
			z = z + (matrixP[i][k] * matrixT[k][j]);
		}
		matrixP[i][j] = z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:06.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:06.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:06.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < n; j++) {
	tmp[j] = matrixP[j][i];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:08.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:08.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:08.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		tmp[j] = matrixP[j][i];
	}
	eigenvectors[i] = new org.apache.commons.math3.linear.ArrayRealVector(tmp);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:11.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:11.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:11.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:13.679 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:13.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:13.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:15.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:15.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:15.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:18.224 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:18.224 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:18.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:20.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:20.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:20.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < imagEigenvalues.length; i++) {
	if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) > 0) {
		cachedD.setEntry(i, i + 1, imagEigenvalues[i]);
	} else if (org.apache.commons.math3.util.Precision.compareTo(imagEigenvalues[i], 0.0, epsilon) < 0) {
		cachedD.setEntry(i, i - 1, imagEigenvalues[i]);
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:33:22.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:22.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:22.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (maxAbsoluteValue != 0.0) {
	for (int i = 0; i < n; i++) {
		if (org.apache.commons.math3.util.FastMath.abs(realEigenvalues[i]) < (org.apache.commons.math3.util.Precision.EPSILON * maxAbsoluteValue)) {
			realEigenvalues[i] = 0;
		}
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:33:25.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:25.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:25.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Use getter instead of direct array reference

00:33:27.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:27.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:27.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Use getter instead of direct array reference

00:33:29.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:29.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:29.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:32.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:32.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:32.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:34.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:34.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:34.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: tmp[j] = matrixP[j][i],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:33:36.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:36.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:36.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		tmp[j] = matrixP[j][i];
	}
	eigenvectors[i] = new org.apache.commons.math3.linear.ArrayRealVector(tmp);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:38.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:38.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:38.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:40.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:40.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:40.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = householderVectors.length,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: transform(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:42.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:42.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:42.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int high = n - 1,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = householderVectors.length,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:44.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:44.869 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:44.870 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] pa = new double[n][n],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int high = n - 1,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:46.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:46.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:46.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: pa[i][j] = (i == j) ? 1 : 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] pa = new double[n][n],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:48.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:48.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:48.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 0; j < n; j++) {
	pa[i][j] = (i == j) ? 1 : 0;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: pa[i][j] = (i == j) ? 1 : 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:50.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:50.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:50.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		pa[i][j] = (i == j) ? 1 : 0;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < n; j++) {
	pa[i][j] = (i == j) ? 1 : 0;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:52.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:52.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:52.646 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort[i] = householderVectors[i][m - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		pa[i][j] = (i == j) ? 1 : 0;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:55.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:55.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:55.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 1; i <= high; i++) {
	ort[i] = householderVectors[i][m - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[i] = householderVectors[i][m - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:57.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:57.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:57.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double g = 0.0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m + 1; i <= high; i++) {
	ort[i] = householderVectors[i][m - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:33:59.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:59.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:59.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: g += ort[i] * pa[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double g = 0.0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:01.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:01.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:01.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m; i <= high; i++) {
	g += ort[i] * pa[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: g += ort[i] * pa[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:04.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:04.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:04.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: g = (g / ort[m]) / householderVectors[m][m - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	g += ort[i] * pa[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:06.412 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:06.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:06.413 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: pa[i][j] += g * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: g = (g / ort[m]) / householderVectors[m][m - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:08.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:08.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:08.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m; i <= high; i++) {
	pa[i][j] += g * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: pa[i][j] += g * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:11.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:11.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:11.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = m; j <= high; j++) {
	double g = 0.0;

	for (int i = m; i <= high; i++) {
		g += ort[i] * pa[i][j];
	}


	g = (g / ort[m]) / householderVectors[m][m - 1];

	for (int i = m; i <= high; i++) {
		pa[i][j] += g * ort[i];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	pa[i][j] += g * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:13.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:13.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:13.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (householderVectors[m][m - 1] != 0.0) {
	for (int i = m + 1; i <= high; i++) {
		ort[i] = householderVectors[i][m - 1];
	}

	for (int j = m; j <= high; j++) {
		double g = 0.0;

		for (int i = m; i <= high; i++) {
			g += ort[i] * pa[i][j];
		}


		g = (g / ort[m]) / householderVectors[m][m - 1];

		for (int i = m; i <= high; i++) {
			pa[i][j] += g * ort[i];
		}
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = m; j <= high; j++) {
	double g = 0.0;

	for (int i = m; i <= high; i++) {
		g += ort[i] * pa[i][j];
	}


	g = (g / ort[m]) / householderVectors[m][m - 1];

	for (int i = m; i <= high; i++) {
		pa[i][j] += g * ort[i];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:16.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:16.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:16.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = high - 1; m >= 1; m--) {
	if (householderVectors[m][m - 1] != 0.0) {
		for (int i = m + 1; i <= high; i++) {
			ort[i] = householderVectors[i][m - 1];
		}

		for (int j = m; j <= high; j++) {
			double g = 0.0;

			for (int i = m; i <= high; i++) {
				g += ort[i] * pa[i][j];
			}


			g = (g / ort[m]) / householderVectors[m][m - 1];

			for (int i = m; i <= high; i++) {
				pa[i][j] += g * ort[i];
			}
		}
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (householderVectors[m][m - 1] != 0.0) {
	for (int i = m + 1; i <= high; i++) {
		ort[i] = householderVectors[i][m - 1];
	}

	for (int j = m; j <= high; j++) {
		double g = 0.0;

		for (int i = m; i <= high; i++) {
			g += ort[i] * pa[i][j];
		}


		g = (g / ort[m]) / householderVectors[m][m - 1];

		for (int i = m; i <= high; i++) {
			pa[i][j] += g * ort[i];
		}
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:18.331 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:18.331 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:18.332 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int m = high - 1; m >= 1; m--) {
	if (householderVectors[m][m - 1] != 0.0) {
		for (int i = m + 1; i <= high; i++) {
			ort[i] = householderVectors[i][m - 1];
		}

		for (int j = m; j <= high; j++) {
			double g = 0.0;

			for (int i = m; i <= high; i++) {
				g += ort[i] * pa[i][j];
			}


			g = (g / ort[m]) / householderVectors[m][m - 1];

			for (int i = m; i <= high; i++) {
				pa[i][j] += g * ort[i];
			}
		}
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:20.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:20.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:20.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedP == null) {
	final int n = householderVectors.length;
	final int high = n - 1;
	final double[][] pa = new double[n][n];

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			pa[i][j] = (i == j) ? 1 : 0;
		}
	}

	for (int m = high - 1; m >= 1; m--) {
		if (householderVectors[m][m - 1] != 0.0) {
			for (int i = m + 1; i <= high; i++) {
				ort[i] = householderVectors[i][m - 1];
			}

			for (int j = m; j <= high; j++) {
				double g = 0.0;

				for (int i = m; i <= high; i++) {
					g += ort[i] * pa[i][j];
				}


				g = (g / ort[m]) / householderVectors[m][m - 1];

				for (int i = m; i <= high; i++) {
					pa[i][j] += g * ort[i];
				}
			}
		}
	}

	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:23.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:23.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:23.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedPt = getP().transpose(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedP == null) {
	final int n = householderVectors.length;
	final int high = n - 1;
	final double[][] pa = new double[n][n];

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			pa[i][j] = (i == j) ? 1 : 0;
		}
	}

	for (int m = high - 1; m >= 1; m--) {
		if (householderVectors[m][m - 1] != 0.0) {
			for (int i = m + 1; i <= high; i++) {
				ort[i] = householderVectors[i][m - 1];
			}

			for (int j = m; j <= high; j++) {
				double g = 0.0;

				for (int i = m; i <= high; i++) {
					g += ort[i] * pa[i][j];
				}


				g = (g / ort[m]) / householderVectors[m][m - 1];

				for (int i = m; i <= high; i++) {
					pa[i][j] += g * ort[i];
				}
			}
		}
	}

	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:25.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:25.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:25.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedPt == null) {
	cachedPt = getP().transpose();
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = getP().transpose(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:28.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:28.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:28.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return cachedPt,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedPt == null) {
	cachedPt = getP().transpose();
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:30.144 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:30.144 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:30.145 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] h = new double[m][m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedPt,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:32.544 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:32.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:32.545 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: h[i][i - 1] = householderVectors[i][i - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] h = new double[m][m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:34.866 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:34.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:34.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (i > 0) {

	h[i][i - 1] = householderVectors[i][i - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h[i][i - 1] = householderVectors[i][i - 1],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:37.272 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:37.272 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:37.273 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: h[i][j] = householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 0) {

	h[i][i - 1] = householderVectors[i][i - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:39.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:39.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:39.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = i; j < m; ++j) {
	h[i][j] = householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h[i][j] = householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:41.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:41.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:41.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < m; ++i) {
	if (i > 0) {

		h[i][i - 1] = householderVectors[i][i - 1];
	}


	for (int j = i; j < m; ++j) {
		h[i][j] = householderVectors[i][j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < m; ++j) {
	h[i][j] = householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:43.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:43.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:43.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(h),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < m; ++i) {
	if (i > 0) {

		h[i][i - 1] = householderVectors[i][i - 1];
	}


	for (int j = i; j < m; ++j) {
		h[i][j] = householderVectors[i][j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:46.118 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:46.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:46.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedH == null) {
	final int m = householderVectors.length;
	final double[][] h = new double[m][m];
	for (int i = 0; i < m; ++i) {
		if (i > 0) {

			h[i][i - 1] = householderVectors[i][i - 1];
		}


		for (int j = i; j < m; ++j) {
			h[i][j] = householderVectors[i][j];
		}
	}
	cachedH = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(h);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedH = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(h),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:48.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:48.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:48.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return cachedH,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedH == null) {
	final int m = householderVectors.length;
	final double[][] h = new double[m][m];
	for (int i = 0; i < m; ++i) {
		if (i > 0) {

			h[i][i - 1] = householderVectors[i][i - 1];
		}


		for (int j = i; j < m; ++j) {
			h[i][j] = householderVectors[i][j];
		}
	}
	cachedH = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(h);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:50.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:50.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:50.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double scale = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedH,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:53.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:53.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:53.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double scale = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:55.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:55.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:55.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m; i <= high; i++) {
	scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:34:57.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:57.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:57.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double h = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:00.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:00.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:00.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort[i] = householderVectors[i][m - 1] / scale,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double h = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:02.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:02.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:02.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: h += ort[i] * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[i] = householderVectors[i][m - 1] / scale,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:04.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:04.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:04.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = high; i >= m; i--) {
	ort[i] = householderVectors[i][m - 1] / scale;
	h += ort[i] * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h += ort[i] * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:07.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:07.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:07.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = high; i >= m; i--) {
	ort[i] = householderVectors[i][m - 1] / scale;
	h += ort[i] * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:09.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:09.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:09.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: h = h - (ort[m] * g),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:10.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:10.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:10.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort[m] = ort[m] - g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h = h - (ort[m] * g),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:12.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:12.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:12.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double f = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[m] = ort[m] - g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:15.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:15.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:15.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: f += ort[i] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double f = 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:17.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:17.511 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:17.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = high; i >= m; i--) {
	f += ort[i] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f += ort[i] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:19.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:19.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:19.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: f = f / h,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = high; i >= m; i--) {
	f += ort[i] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:22.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:22.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:22.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: householderVectors[i][j] -= f * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f = f / h,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:23.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:23.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:23.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m; i <= high; i++) {
	householderVectors[i][j] -= f * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[i][j] -= f * ort[i],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:25.809 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:25.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:25.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = m; j < n; j++) {
	double f = 0;
	for (int i = high; i >= m; i--) {
		f += ort[i] * householderVectors[i][j];
	}
	f = f / h;
	for (int i = m; i <= high; i++) {
		householderVectors[i][j] -= f * ort[i];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	householderVectors[i][j] -= f * ort[i];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:27.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:27.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:27.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: f += ort[j] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = m; j < n; j++) {
	double f = 0;
	for (int i = high; i >= m; i--) {
		f += ort[i] * householderVectors[i][j];
	}
	f = f / h;
	for (int i = m; i <= high; i++) {
		householderVectors[i][j] -= f * ort[i];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:29.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:29.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:29.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = high; j >= m; j--) {
	f += ort[j] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f += ort[j] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:32.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:32.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:32.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: householderVectors[i][j] -= f * ort[j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = high; j >= m; j--) {
	f += ort[j] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:34.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:34.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:34.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = m; j <= high; j++) {
	householderVectors[i][j] -= f * ort[j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[i][j] -= f * ort[j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:36.170 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:36.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:36.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= high; i++) {
	double f = 0;
	for (int j = high; j >= m; j--) {
		f += ort[j] * householderVectors[i][j];
	}
	f = f / h;
	for (int j = m; j <= high; j++) {
		householderVectors[i][j] -= f * ort[j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = m; j <= high; j++) {
	householderVectors[i][j] -= f * ort[j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:38.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:38.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:38.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ort[m] = scale * ort[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= high; i++) {
	double f = 0;
	for (int j = high; j >= m; j--) {
		f += ort[j] * householderVectors[i][j];
	}
	f = f / h;
	for (int j = m; j <= high; j++) {
		householderVectors[i][j] -= f * ort[j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:39.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:39.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:39.981 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: householderVectors[m][m - 1] = scale * g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[m] = scale * ort[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:42.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:42.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:42.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[m][m - 1] = scale * g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:44.215 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:44.215 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:44.216 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

00:35:46.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:46.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:46.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return x.ebeDivide(sqrtDiag),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

00:35:48.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:48.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:48.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return sqrtDiag.getDimension(),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return x.ebeDivide(sqrtDiag),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

00:35:50.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:50.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:50.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return sqrtDiag.getDimension(),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:52.622 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:52.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:52.624 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: transform(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:55.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:55.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:55.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[i][j] -= f * ort[j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:35:57.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:57.633 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:57.634 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedP == null) {
	final int n = householderVectors.length;
	final int high = n - 1;
	final double[][] pa = new double[n][n];

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			pa[i][j] = (i == j) ? 1 : 0;
		}
	}

	for (int m = high - 1; m >= 1; m--) {
		if (householderVectors[m][m - 1] != 0.0) {
			for (int i = m + 1; i <= high; i++) {
				ort[i] = householderVectors[i][m - 1];
			}

			for (int j = m; j <= high; j++) {
				double g = 0.0;

				for (int i = m; i <= high; i++) {
					g += ort[i] * pa[i][j];
				}


				g = (g / ort[m]) / householderVectors[m][m - 1];

				for (int i = m; i <= high; i++) {
					pa[i][j] += g * ort[i];
				}
			}
		}
	}

	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(pa);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:00.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:00.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:00.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double g = 0.0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:02.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:02.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:02.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: pa[i][j] = (i == j) ? 1 : 0,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:04.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:04.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:04.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int high = n - 1,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:06.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:06.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:06.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = householderVectors.length,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:08.033 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:08.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:08.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: transform(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:10.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:10.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:10.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:12.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:12.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:12.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:14.889 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:14.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:14.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:17.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:17.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:17.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:19.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:19.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:19.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:21.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:21.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:21.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:23.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:23.700 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:23.701 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
	matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
} else {
	matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: Use getter instead of direct array reference

00:36:25.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:25.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:25.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:28.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:28.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:28.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
(q * matrixT[i][idx - 1])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:30.510 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:30.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:30.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < n; j++) {
	matrixP[i][j] = matrixT[i][j];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:36:32.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:32.861 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:32.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = n - 1; j >= 0; j--) {
	for (int i = 0; i <= (n - 1); i++) {
		z = 0.0;
		for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
			z = z + (matrixP[i][k] * matrixT[k][j]);
		}
		matrixP[i][j] = z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:36:35.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:35.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:35.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:37.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:37.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:37.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:40.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:40.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:40.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: Use getter instead of direct array reference

00:36:42.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:42.444 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:42.445 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:44.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:44.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:44.933 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:47.482 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:47.482 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:47.483 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:49.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:49.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:49.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:52.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:52.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:52.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[m][m - 1] = scale * g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:54.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:54.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:54.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= high; i++) {
	double f = 0;
	for (int j = high; j >= m; j--) {
		f += ort[j] * householderVectors[i][j];
	}
	f = f / h;
	for (int j = m; j <= high; j++) {
		householderVectors[i][j] -= f * ort[j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:57.189 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:57.190 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:57.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f += ort[j] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:36:59.598 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:59.598 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:59.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[m] = ort[m] - g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:37:01.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:01.557 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:01.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 0) {

	h[i][i - 1] = householderVectors[i][i - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:37:03.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:03.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:03.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: g += ort[i] * pa[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:37:05.323 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:05.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:05.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] pa = new double[n][n],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

00:37:07.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:07.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:07.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:37:10.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:10.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:10.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = householderVectors.length,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:37:12.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:12.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:12.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedH = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: transform(),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:37:15.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:15.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:15.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:37:17.607 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:17.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:17.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:37:20.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:20.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:20.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
m.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:37:22.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:22.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:22.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m.getColumnDimension() != m.getRowDimension()) {
	throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
	m.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
m.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:37:24.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:24.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:24.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
a.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
m.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:37:26.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:26.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:26.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
a.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m.getColumnDimension() != m.getRowDimension()) {
	throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
	m.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:37:29.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:29.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:29.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m.getRowDimension() != a.getRowDimension()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
	a.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
a.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:37:31.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:31.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:31.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	if (m.getColumnDimension() != m.getRowDimension()) {
		throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
		m.getRowDimension());
	}
	if (m.getRowDimension() != a.getRowDimension()) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
		a.getRowDimension());
	}
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m.getRowDimension() != a.getRowDimension()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
	a.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:37:33.923 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:33.923 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:33.924 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m.getRowDimension() != a.getRowDimension()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
	a.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:37:36.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:36.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:36.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m != null) {
	if (m.getColumnDimension() != m.getRowDimension()) {
		throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
		m.getRowDimension());
	}
	if (m.getRowDimension() != a.getRowDimension()) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
		a.getRowDimension());
	}
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:37.947 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:37.947 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:37.948 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() - result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:40.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:40.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:40.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += e.getValue() * v.getEntry(e.getIndex());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() - result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:42.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:42.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:42.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final double diff = e.getValue() - v.getEntry(e.getIndex());
	d += diff * diff;
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() - result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:44.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:44.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:44.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final double diff = e.getValue() - v.getEntry(e.getIndex());
	d += diff * diff;
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += e.getValue() * v.getEntry(e.getIndex());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:47.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:47.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:47.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final double value = e.getValue();
	sum += value * value;
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += e.getValue() * v.getEntry(e.getIndex());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:49.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:49.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:49.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final double value = e.getValue();
	sum += value * value;
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final double diff = e.getValue() - v.getEntry(e.getIndex());
	d += diff * diff;
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:51.976 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:51.976 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:51.977 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm += org.apache.commons.math3.util.FastMath.abs(e.getValue());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final double value = e.getValue();
	sum += value * value;
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:54.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:54.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:54.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm = org.apache.commons.math3.util.FastMath.max(norm, org.apache.commons.math3.util.FastMath.abs(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm += org.apache.commons.math3.util.FastMath.abs(e.getValue());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:56.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:56.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:56.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += org.apache.commons.math3.util.FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm = org.apache.commons.math3.util.FastMath.max(norm, org.apache.commons.math3.util.FastMath.abs(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:37:59.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:59.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:59.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm = org.apache.commons.math3.util.FastMath.max(norm, org.apache.commons.math3.util.FastMath.abs(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:01.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:01.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:01.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += org.apache.commons.math3.util.FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:03.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:03.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:03.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:06.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:06.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:06.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (otherIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
	product.setEntry(thisE.getIndex(), otherE.getIndex(), 
	thisE.getValue() * otherE.getValue());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:08.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:08.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:08.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (thisIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
	java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
	while (otherIt.hasNext()) {
		final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
		product.setEntry(thisE.getIndex(), otherE.getIndex(), 
		thisE.getValue() * otherE.getValue());
	} 
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (otherIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
	product.setEntry(thisE.getIndex(), otherE.getIndex(), 
	thisE.getValue() * otherE.getValue());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:10.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:10.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:10.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(value);
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (otherIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
	product.setEntry(thisE.getIndex(), otherE.getIndex(), 
	thisE.getValue() * otherE.getValue());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:13.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:13.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:13.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(value);
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (thisIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
	java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
	while (otherIt.hasNext()) {
		final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
		product.setEntry(thisE.getIndex(), otherE.getIndex(), 
		thisE.getValue() * otherE.getValue());
	} 
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:15.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:15.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:15.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(function.value(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (thisIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
	java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
	while (otherIt.hasNext()) {
		final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
		product.setEntry(thisE.getIndex(), otherE.getIndex(), 
		thisE.getValue() * otherE.getValue());
	} 
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:17.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:17.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:17.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(function.value(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(value);
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:19.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:19.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:19.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:21.895 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:21.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:21.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() - result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:24.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:24.193 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:24.194 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final double diff = e.getValue() - v.getEntry(e.getIndex());
	d += diff * diff;
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:26.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:26.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:26.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += org.apache.commons.math3.util.FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:38:29.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:29.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:29.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:38:31.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:31.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:31.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:38:33.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:33.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:33.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
m.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:38:36.402 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:36.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:36.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
a.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:38:38.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:38.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:38.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m != null) {
	if (m.getColumnDimension() != m.getRowDimension()) {
		throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
		m.getRowDimension());
	}
	if (m.getRowDimension() != a.getRowDimension()) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
		a.getRowDimension());
	}
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:38:41.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:41.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:41.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:38:43.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:43.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:43.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT = transformer.getH().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:38:45.796 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:45.796 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:45.797 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP = transformer.getP().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT = transformer.getH().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:38:48.168 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:48.169 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:48.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedT = null,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP = transformer.getP().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:38:50.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:50.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:50.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedT = null,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:38:52.118 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:52.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:52.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedP == null) {
	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:38:53.961 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:53.961 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:53.962 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedP == null) {
	cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:38:55.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:55.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:55.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (cachedT == null) {
	cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:38:58.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:58.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:58.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return cachedT,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedT == null) {
	cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:00.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:00.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:00.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.SchurTransformer.ShiftInfo shift = new org.apache.commons.math3.linear.SchurTransformer.ShiftInfo(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedT,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:02.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:02.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:02.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer.ShiftInfo shift = new org.apache.commons.math3.linear.SchurTransformer.ShiftInfo(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:04.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:04.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:04.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int idx = n - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:06.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:06.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:06.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int l = findSmallSubDiagonalElement(idx, norm),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int idx = n - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:08.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:08.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:08.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int l = findSmallSubDiagonalElement(idx, norm),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:11.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:11.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:11.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:13.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:13.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:13.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:15.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:15.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:15.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:39:17.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:17.350 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:17.351 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:39:19.352 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:19.352 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:19.353 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:21.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:21.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:21.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer.ShiftInfo shift = new org.apache.commons.math3.linear.SchurTransformer.ShiftInfo(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:23.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:23.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:23.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:39:25.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:25.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:25.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:27.272 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:27.272 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:27.273 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:29.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:29.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:29.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer.ShiftInfo shift = new org.apache.commons.math3.linear.SchurTransformer.ShiftInfo(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:31.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:31.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:31.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:39:33.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:33.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:33.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:35.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:35.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:35.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:37.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:37.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:37.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:38.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:38.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:38.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:39:40.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:40.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:40.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:39:42.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:42.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:42.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:45.137 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:45.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:45.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:47.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:47.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:47.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:39:49.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:49.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:49.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:39:51.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:51.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:51.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:53.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:53.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:53.647 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:55.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:55.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:55.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int idx = n - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:39:57.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:57.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:57.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:39:59.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:59.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:59.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:01.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:01.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:01.705 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:03.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:03.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:03.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:05.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:05.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:05.624 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int idx = n - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:07.470 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:07.470 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:07.471 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:09.336 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:09.336 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:09.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:11.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:11.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:11.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:13.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:13.301 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:13.302 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int l = findSmallSubDiagonalElement(idx, norm),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:15.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:15.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:15.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:17.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:17.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:17.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:19.137 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:19.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:19.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:21.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:21.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:21.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int l = findSmallSubDiagonalElement(idx, norm),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:22.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:22.869 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:22.870 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p + z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:40:24.790 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:24.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:24.791 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:40:26.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:26.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:26.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:28.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:28.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:28.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:30.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:30.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:30.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:32.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:32.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:32.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:34.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:34.425 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:34.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:36.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:36.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:36.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:38.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:38.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:38.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:39.999 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:39.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:40.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:41.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:41.861 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:41.862 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:43.736 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:43.736 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:43.737 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:45.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:45.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:45.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:47.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:47.467 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:47.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:49.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:49.375 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:49.376 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (p >= 0) {
	z = p + z;
} else {
	z = p - z;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:51.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:51.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:51.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:53.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:53.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:53.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = shift.x / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:40:55.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:55.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:55.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:56.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:56.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:56.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:40:58.914 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:58.914 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:58.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:00.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:00.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:00.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:02.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:02.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:02.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:41:04.686 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:04.686 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:04.687 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:06.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:06.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:06.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:41:08.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:08.423 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:08.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:41:10.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:10.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:10.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:12.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:12.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:12.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:14.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:14.033 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:14.034 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:15.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:15.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:15.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:17.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:17.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:17.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:19.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:19.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:19.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:21.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:21.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:21.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:23.482 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:23.482 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:23.483 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:25.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:25.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:25.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:41:27.354 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:27.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:27.355 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:29.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:29.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:29.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:31.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:31.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:31.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:41:33.214 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:33.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:33.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:35.501 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:35.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:35.502 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:37.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:37.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:37.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:39.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:39.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:39.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:41.891 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:41.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:41.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:43.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:43.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:43.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:45.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:45.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:45.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:47.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:47.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:47.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:41:49.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:49.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:49.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:41:51.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:51.789 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:51.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:53.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:53.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:53.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:55.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:55.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:55.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:41:57.570 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:57.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:57.571 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:41:59.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:59.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:59.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:01.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:01.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:01.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:03.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:03.412 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:03.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:05.271 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:05.271 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:05.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:07.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:07.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:07.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:09.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:09.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:09.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:10.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:10.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:10.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:12.927 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:12.927 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:12.928 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:14.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:14.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:14.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:16.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:16.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:16.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:18.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:18.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:18.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:21.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:21.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:21.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:23.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:23.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:23.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:25.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:25.817 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:25.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:28.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:28.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:28.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:30.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:30.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:30.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:32.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:32.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:32.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: code style adaptations for SchurTransformer

00:42:34.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:34.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:34.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: code style adaptations for SchurTransformer

00:42:36.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:36.693 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:36.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: code style adaptations for SchurTransformer

00:42:38.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:38.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:38.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:40.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:40.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:40.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:42.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:42.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:42.696 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:44.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:44.780 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:44.781 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:46.927 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:46.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:46.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:49.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:49.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:49.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:51.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:51.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:51.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:53.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:53.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:53.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:55.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:55.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:55.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:42:57.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:57.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:57.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:42:59.573 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:59.574 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:59.575 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:01.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:01.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:01.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: computeShift(l, idx, iteration, shift),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:03.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:03.615 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:03.616 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:05.554 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:05.554 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:05.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:07.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:07.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:07.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:09.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:09.564 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:09.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:11.891 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:11.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:11.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:14.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:14.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:14.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:16.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:16.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:16.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:18.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:18.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:18.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:20.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:20.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:20.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:22.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:22.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:22.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:24.148 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:24.148 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:24.149 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:26.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:26.136 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:26.137 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:28.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:28.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:28.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:30.404 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:30.404 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:30.405 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:32.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:32.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:32.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:34.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:34.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:34.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:36.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:36.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:36.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:38.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:38.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:38.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int m = idx - 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:41.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:41.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:41.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:43.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:43.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:43.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = shift.y - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:45.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:45.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:45.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:47.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:47.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:47.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:49.976 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:49.976 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:49.977 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:52.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:52.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:52.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:53.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:53.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:53.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:55.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:55.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:55.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:43:57.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:57.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:57.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:43:59.510 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:59.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:59.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:01.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:01.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:01.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:03.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:03.480 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:03.481 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:05.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:05.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:05.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:07.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:07.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:07.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:09.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:09.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:09.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = matrixT[m][m],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:11.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:11.423 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:11.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:13.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:13.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:13.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:15.323 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:15.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:15.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:17.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:17.305 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:17.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:19.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:19.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:19.559 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:21.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:21.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:21.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT = transformer.getH().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:23.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:23.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:23.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedT = null,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:25.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:25.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:25.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedT == null) {
	cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:28.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:28.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:28.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: iteration = 0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:30.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:30.133 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:30.134 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:32.064 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:32.064 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:32.065 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:34.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:34.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:34.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:36.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:36.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:36.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

00:44:38.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:38.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:38.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:44:39.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:39.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:39.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:44:41.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:41.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:41.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: code style adaptations for SchurTransformer

00:44:43.796 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:43.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:43.797 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:45.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:45.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:45.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] hVec = new double[3],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:47.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:47.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:47.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:49.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:49.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:49.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:44:51.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:51.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:51.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:53.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:53.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:53.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:55.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:55.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:55.364 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / r,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:57.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:57.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:57.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:44:59.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:44:59.238 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:44:59.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:45:01.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:01.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:01.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	z = matrixT[i][idx - 1];
	matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
	matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:45:03.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:03.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:03.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:45:05.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:05.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:05.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:06.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:06.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:06.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (q >= 0) {
	if (p >= 0) {
		z = p + z;
	} else {
		z = p - z;
	}
	shift.x = matrixT[idx][idx - 1];
	double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
	p = shift.x / s;
	q = z / s;
	double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
	p = p / r;
	q = q / r;


	for (int j = idx - 1; j < n; j++) {
		z = matrixT[idx - 1][j];
		matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
		matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
	}


	for (int i = 0; i <= idx; i++) {
		z = matrixT[i][idx - 1];
		matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
		matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
	}


	for (int i = 0; i <= (n - 1); i++) {
		z = matrixP[i][idx - 1];
		matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
		matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:08.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:08.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:08.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: idx -= 2,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:10.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:10.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:10.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((++iteration) > maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
	maxIterations);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:12.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:12.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:12.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:14.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:14.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:14.605 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:16.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:16.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:16.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:18.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:18.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:18.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:21.284 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:21.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:21.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[i] /= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:23.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:23.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:23.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < hVec.length; i++) {
	hVec[i] /= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:25.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:25.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:25.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:27.525 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:27.525 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:27.526 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (lhs < (epsilon * rhs)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1])),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:29.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:29.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:29.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (lhs < (epsilon * rhs)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:32.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:32.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:32.342 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: m--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:34.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:34.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:34.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: performDoubleQRStep(l, m, idx, shift, hVec),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (m >= l) {
	double z = matrixT[m][m];
	hVec[2] = shift.x - z;
	double s = shift.y - z;
	hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
	hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
	hVec[2] = matrixT[m + 2][m + 1];
	s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

	if (m == l) {
		break;
	}

	for (int i = 0; i < hVec.length; i++) {
		hVec[i] /= s;
	}

	final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
	(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

	final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
	((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
	org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

	if (lhs < (epsilon * rhs)) {
		break;
	}
	m--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:36.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:36.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:36.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: performDoubleQRStep(l, m, idx, shift, hVec),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:39.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:39.144 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:39.145 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:41.346 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:41.346 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:41.347 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:43.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:43.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:43.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (idx >= 0) {


	final int l = findSmallSubDiagonalElement(idx, norm);


	if (l == idx) {

		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		idx--;
		iteration = 0;
	} else if (l == (idx - 1)) {

		shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
		double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
		double q = (p * p) + shift.w;
		double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
		matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
		matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
		shift.x = matrixT[idx][idx];

		if (q >= 0) {
			if (p >= 0) {
				z = p + z;
			} else {
				z = p - z;
			}
			shift.x = matrixT[idx][idx - 1];
			double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
			p = shift.x / s;
			q = z / s;
			double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
			p = p / r;
			q = q / r;


			for (int j = idx - 1; j < n; j++) {
				z = matrixT[idx - 1][j];
				matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
				matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
			}


			for (int i = 0; i <= idx; i++) {
				z = matrixT[i][idx - 1];
				matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
				matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
			}


			for (int i = 0; i <= (n - 1); i++) {
				z = matrixP[i][idx - 1];
				matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
				matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
			}
		}
		idx -= 2;
		iteration = 0;
	} else {


		computeShift(l, idx, iteration, shift);


		if ((++iteration) > maxIterations) {
			throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
			maxIterations);
		}


		int m = idx - 2;


		final double[] hVec = new double[3];

		while (m >= l) {
			double z = matrixT[m][m];
			hVec[2] = shift.x - z;
			double s = shift.y - z;
			hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
			hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
			hVec[2] = matrixT[m + 2][m + 1];
			s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

			if (m == l) {
				break;
			}

			for (int i = 0; i < hVec.length; i++) {
				hVec[i] /= s;
			}

			final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
			(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

			final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
			((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
			org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

			if (lhs < (epsilon * rhs)) {
				break;
			}
			m--;
		} 

		performDoubleQRStep(l, m, idx, shift, hVec);
	}
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:45.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:45.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:45.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:47.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:47.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:47.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
	norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:50.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:50.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:50.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < matrixT.length; i++) {

	for (int j = org.apache.commons.math3.util.FastMath.max(i - 1, 0); j < matrixT.length; j++) {
		norm += org.apache.commons.math3.util.FastMath.abs(matrixT[i][j]);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:52.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:52.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:52.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int l = startIdx,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:54.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:54.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:54.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:56.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:56.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:56.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = norm,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:45:58.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:58.708 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:58.709 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	s = norm;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:00.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:00.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:00.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: l--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:02.589 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:02.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:02.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (l > 0) {
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]);
	if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		s = norm;
	}
	if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
		break;
	}
	l--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: l--,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:04.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:04.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:04.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return l,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (l > 0) {
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[l - 1][l - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[l][l]);
	if (org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		s = norm;
	}
	if (org.apache.commons.math3.util.FastMath.abs(matrixT[l][l - 1]) < (epsilon * s)) {
		break;
	}
	l--;
} ,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:06.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:06.726 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:06.727 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.y = shift.w = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return l,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:08.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:08.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:08.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.y = matrixT[idx - 1][idx - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.y = shift.w = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:10.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:10.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:10.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l < idx) {
	shift.y = matrixT[idx - 1][idx - 1];
	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.y = matrixT[idx - 1][idx - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:12.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:12.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:12.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.exShift += shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l < idx) {
	shift.y = matrixT[idx - 1][idx - 1];
	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:14.846 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:14.847 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:14.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][i] -= shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.exShift += shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:17.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:17.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:17.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i] -= shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:19.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:19.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:19.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx - 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:21.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:21.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:21.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = shift.y = 0.75 * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx - 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:23.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:23.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:23.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.w = ((-0.4375) * s) * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = shift.y = 0.75 * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:26.136 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:26.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:26.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (iteration == 10) {
	shift.exShift += shift.x;
	for (int i = 0; i <= idx; i++) {
		matrixT[i][i] -= shift.x;
	}
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx - 2]);
	shift.x = shift.y = 0.75 * s;
	shift.w = ((-0.4375) * s) * s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = ((-0.4375) * s) * s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:28.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:28.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:28.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (shift.y - shift.x) / 2.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (iteration == 10) {
	shift.exShift += shift.x;
	for (int i = 0; i <= idx; i++) {
		matrixT[i][i] -= shift.x;
	}
	double s = org.apache.commons.math3.util.FastMath.abs(matrixT[idx][idx - 1]) + org.apache.commons.math3.util.FastMath.abs(matrixT[idx - 1][idx - 2]);
	shift.x = shift.y = 0.75 * s;
	shift.w = ((-0.4375) * s) * s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:30.565 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:30.566 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:30.567 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (s * s) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (shift.y - shift.x) / 2.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:32.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:32.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:32.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = org.apache.commons.math3.util.FastMath.sqrt(s),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (s * s) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:35.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:35.062 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:35.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = -s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = org.apache.commons.math3.util.FastMath.sqrt(s),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:37.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:37.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:37.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (shift.y < shift.x) {
	s = -s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = -s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:39.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:39.359 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:39.360 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (shift.y < shift.x) {
	s = -s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:41.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:41.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:41.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][i] -= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:43.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:43.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:43.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i] -= s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:45.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:45.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:45.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.exShift += s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= idx; i++) {
	matrixT[i][i] -= s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:47.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:47.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:47.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = shift.y = shift.w = 0.964,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.exShift += s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:49.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:49.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:49.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
	s = org.apache.commons.math3.util.FastMath.sqrt(s);
	if (shift.y < shift.x) {
		s = -s;
	}
	s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
	for (int i = 0; i <= idx; i++) {
		matrixT[i][i] -= s;
	}
	shift.exShift += s;
	shift.x = shift.y = shift.w = 0.964;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = shift.y = shift.w = 0.964,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:51.667 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:51.668 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:51.669 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (iteration == 30) {
	double s = (shift.y - shift.x) / 2.0;
	s = (s * s) + shift.w;
	if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
		s = org.apache.commons.math3.util.FastMath.sqrt(s);
		if (shift.y < shift.x) {
			s = -s;
		}
		s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
		for (int i = 0; i <= idx; i++) {
			matrixT[i][i] -= s;
		}
		shift.exShift += s;
		shift.x = shift.y = shift.w = 0.964;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
	s = org.apache.commons.math3.util.FastMath.sqrt(s);
	if (shift.y < shift.x) {
		s = -s;
	}
	s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
	for (int i = 0; i <= idx; i++) {
		matrixT[i][i] -= s;
	}
	shift.exShift += s;
	shift.x = shift.y = shift.w = 0.964;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:53.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:53.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:53.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double p = hVec[0],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (iteration == 30) {
	double s = (shift.y - shift.x) / 2.0;
	s = (s * s) + shift.w;
	if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
		s = org.apache.commons.math3.util.FastMath.sqrt(s);
		if (shift.y < shift.x) {
			s = -s;
		}
		s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
		for (int i = 0; i <= idx; i++) {
			matrixT[i][i] -= s;
		}
		shift.exShift += s;
		shift.x = shift.y = shift.w = 0.964;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:55.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:55.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:55.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double q = hVec[1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = hVec[0],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:57.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:57.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:57.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double r = hVec[2],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = hVec[1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:46:59.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:46:59.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:46:59.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean notlast = k != (idx - 1),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double r = hVec[2],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:01.350 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:01.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:01.351 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = matrixT[k][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean notlast = k != (idx - 1),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:03.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:03.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:03.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = matrixT[k + 1][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = matrixT[k][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:05.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:05.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:05.221 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = (notlast) ? matrixT[k + 2][k - 1] : 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = matrixT[k + 1][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:07.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:07.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:07.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = (notlast) ? matrixT[k + 2][k - 1] : 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:09.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:09.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:09.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:11.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:11.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:11.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:13.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:13.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:13.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = r / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:15.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:15.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:15.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	p = p / shift.x;
	q = q / shift.x;
	r = r / shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = r / shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:17.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:17.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:17.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k != m) {
	p = matrixT[k][k - 1];
	q = matrixT[k + 1][k - 1];
	r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
	shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
	if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		p = p / shift.x;
		q = q / shift.x;
		r = r / shift.x;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	p = p / shift.x;
	q = q / shift.x;
	r = r / shift.x;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:19.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:19.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:19.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k != m) {
	p = matrixT[k][k - 1];
	q = matrixT[k + 1][k - 1];
	r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
	shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
	if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		p = p / shift.x;
		q = q / shift.x;
		r = r / shift.x;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:21.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:21.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:21.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:23.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:23.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:23.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
	s = -s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:25.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:25.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:25.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k][k - 1] = (-s) * shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
	s = -s;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:28.030 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:28.030 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:28.031 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k][k - 1] = -matrixT[k][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k][k - 1] = (-s) * shift.x,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:30.192 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:30.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:30.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (l != m) {
	matrixT[k][k - 1] = -matrixT[k][k - 1];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k][k - 1] = -matrixT[k][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:32.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:32.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:32.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k != m) {
	matrixT[k][k - 1] = (-s) * shift.x;
} else if (l != m) {
	matrixT[k][k - 1] = -matrixT[k][k - 1];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l != m) {
	matrixT[k][k - 1] = -matrixT[k][k - 1];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:34.656 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:34.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:34.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p + s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k != m) {
	matrixT[k][k - 1] = (-s) * shift.x;
} else if (l != m) {
	matrixT[k][k - 1] = -matrixT[k][k - 1];
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:36.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:36.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:36.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.x = p / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p + s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:38.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:38.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:38.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: shift.y = q / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = p / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:40.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:40.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:40.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double z = r / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.y = q / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:42.920 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:42.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:42.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q = q / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double z = r / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:44.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:44.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:44.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: r = r / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = q / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:46.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:46.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:46.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = matrixT[k][j] + (q * matrixT[k + 1][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = r / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:48.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:48.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:48.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p + (r * matrixT[k + 2][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = matrixT[k][j] + (q * matrixT[k + 1][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:50.597 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:50.598 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:50.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p + (r * matrixT[k + 2][j]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:52.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:52.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:52.584 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (notlast) {
	p = p + (r * matrixT[k + 2][j]);
	matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:54.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:54.579 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:54.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k][j] = matrixT[k][j] - (p * shift.x),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (notlast) {
	p = p + (r * matrixT[k + 2][j]);
	matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:56.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:56.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:56.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k][j] = matrixT[k][j] - (p * shift.x),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:47:58.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:47:58.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:47:58.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = k; j < n; j++) {
	p = matrixT[k][j] + (q * matrixT[k + 1][j]);
	if (notlast) {
		p = p + (r * matrixT[k + 2][j]);
		matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
	}
	matrixT[k][j] = matrixT[k][j] - (p * shift.x);
	matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:00.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:00.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:00.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = k; j < n; j++) {
	p = matrixT[k][j] + (q * matrixT[k + 1][j]);
	if (notlast) {
		p = p + (r * matrixT[k + 2][j]);
		matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
	}
	matrixT[k][j] = matrixT[k][j] - (p * shift.x);
	matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:02.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:02.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:02.199 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p + (z * matrixT[i][k + 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:04.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:04.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:04.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p + (z * matrixT[i][k + 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:06.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:06.096 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:06.097 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (notlast) {
	p = p + (z * matrixT[i][k + 2]);
	matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:07.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:07.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:07.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][k] = matrixT[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (notlast) {
	p = p + (z * matrixT[i][k + 2]);
	matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:09.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:09.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:09.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][k] = matrixT[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:11.827 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:11.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:11.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
	p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixT[i][k + 2]);
		matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
	}
	matrixT[i][k] = matrixT[i][k] - p;
	matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:13.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:13.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:13.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int high = matrixT.length - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
	p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixT[i][k + 2]);
		matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
	}
	matrixT[i][k] = matrixT[i][k] - p;
	matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:15.655 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:15.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:15.656 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int high = matrixT.length - 1,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:17.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:17.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:17.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: p = p + (z * matrixP[i][k + 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:19.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:19.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:19.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = p + (z * matrixP[i][k + 2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:21.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:21.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:21.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (notlast) {
	p = p + (z * matrixP[i][k + 2]);
	matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:23.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:23.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:23.240 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][k] = matrixP[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (notlast) {
	p = p + (z * matrixP[i][k + 2]);
	matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:25.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:25.182 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:25.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][k] = matrixP[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:27.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:27.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:27.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i <= high; i++) {
	p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixP[i][k + 2]);
		matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
	}
	matrixP[i][k] = matrixP[i][k] - p;
	matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:29.172 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:29.172 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:29.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	if (k != m) {
		matrixT[k][k - 1] = (-s) * shift.x;
	} else if (l != m) {
		matrixT[k][k - 1] = -matrixT[k][k - 1];
	}
	p = p + s;
	shift.x = p / s;
	shift.y = q / s;
	double z = r / s;
	q = q / p;
	r = r / p;


	for (int j = k; j < n; j++) {
		p = matrixT[k][j] + (q * matrixT[k + 1][j]);
		if (notlast) {
			p = p + (r * matrixT[k + 2][j]);
			matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
		}
		matrixT[k][j] = matrixT[k][j] - (p * shift.x);
		matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
	}


	for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
		p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixT[i][k + 2]);
			matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
		}
		matrixT[i][k] = matrixT[i][k] - p;
		matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
	}


	final int high = matrixT.length - 1;
	for (int i = 0; i <= high; i++) {
		p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixP[i][k + 2]);
			matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
		}
		matrixP[i][k] = matrixP[i][k] - p;
		matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= high; i++) {
	p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixP[i][k + 2]);
		matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
	}
	matrixP[i][k] = matrixP[i][k] - p;
	matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:31.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:31.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:31.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int k = m; k <= (idx - 1); k++) {
	boolean notlast = k != (idx - 1);
	if (k != m) {
		p = matrixT[k][k - 1];
		q = matrixT[k + 1][k - 1];
		r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
		shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
		if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
			p = p / shift.x;
			q = q / shift.x;
			r = r / shift.x;
		}
	}
	if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		break;
	}
	double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r));
	if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
		s = -s;
	}
	if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		if (k != m) {
			matrixT[k][k - 1] = (-s) * shift.x;
		} else if (l != m) {
			matrixT[k][k - 1] = -matrixT[k][k - 1];
		}
		p = p + s;
		shift.x = p / s;
		shift.y = q / s;
		double z = r / s;
		q = q / p;
		r = r / p;


		for (int j = k; j < n; j++) {
			p = matrixT[k][j] + (q * matrixT[k + 1][j]);
			if (notlast) {
				p = p + (r * matrixT[k + 2][j]);
				matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
			}
			matrixT[k][j] = matrixT[k][j] - (p * shift.x);
			matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
		}


		for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
			p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixT[i][k + 2]);
				matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
			}
			matrixT[i][k] = matrixT[i][k] - p;
			matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
		}


		final int high = matrixT.length - 1;
		for (int i = 0; i <= high; i++) {
			p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixP[i][k + 2]);
				matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
			}
			matrixP[i][k] = matrixP[i][k] - p;
			matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
		}
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	if (k != m) {
		matrixT[k][k - 1] = (-s) * shift.x;
	} else if (l != m) {
		matrixT[k][k - 1] = -matrixT[k][k - 1];
	}
	p = p + s;
	shift.x = p / s;
	shift.y = q / s;
	double z = r / s;
	q = q / p;
	r = r / p;


	for (int j = k; j < n; j++) {
		p = matrixT[k][j] + (q * matrixT[k + 1][j]);
		if (notlast) {
			p = p + (r * matrixT[k + 2][j]);
			matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
		}
		matrixT[k][j] = matrixT[k][j] - (p * shift.x);
		matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
	}


	for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
		p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixT[i][k + 2]);
			matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
		}
		matrixT[i][k] = matrixT[i][k] - p;
		matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
	}


	final int high = matrixT.length - 1;
	for (int i = 0; i <= high; i++) {
		p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixP[i][k + 2]);
			matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
		}
		matrixP[i][k] = matrixP[i][k] - p;
		matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:33.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:33.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:33.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][i - 2] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = m; k <= (idx - 1); k++) {
	boolean notlast = k != (idx - 1);
	if (k != m) {
		p = matrixT[k][k - 1];
		q = matrixT[k + 1][k - 1];
		r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
		shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
		if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
			p = p / shift.x;
			q = q / shift.x;
			r = r / shift.x;
		}
	}
	if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		break;
	}
	double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r));
	if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
		s = -s;
	}
	if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		if (k != m) {
			matrixT[k][k - 1] = (-s) * shift.x;
		} else if (l != m) {
			matrixT[k][k - 1] = -matrixT[k][k - 1];
		}
		p = p + s;
		shift.x = p / s;
		shift.y = q / s;
		double z = r / s;
		q = q / p;
		r = r / p;


		for (int j = k; j < n; j++) {
			p = matrixT[k][j] + (q * matrixT[k + 1][j]);
			if (notlast) {
				p = p + (r * matrixT[k + 2][j]);
				matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
			}
			matrixT[k][j] = matrixT[k][j] - (p * shift.x);
			matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
		}


		for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
			p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixT[i][k + 2]);
				matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
			}
			matrixT[i][k] = matrixT[i][k] - p;
			matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
		}


		final int high = matrixT.length - 1;
		for (int i = 0; i <= high; i++) {
			p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixP[i][k + 2]);
				matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
			}
			matrixP[i][k] = matrixP[i][k] - p;
			matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
		}
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:34.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:34.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:34.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixT[i][i - 3] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i - 2] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:36.887 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:36.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:36.888 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (i > (m + 2)) {
	matrixT[i][i - 3] = 0.0;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i - 3] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:48:38.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:38.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:38.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > (m + 2)) {
	matrixT[i][i - 3] = 0.0;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:48:40.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:40.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:40.627 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:48:42.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:42.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:42.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
m.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:48:44.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:44.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:44.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
a.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:48:46.332 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:46.332 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:46.333 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:48:48.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:48.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:48.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m != null) {
	if (m.getColumnDimension() != m.getRowDimension()) {
		throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
		m.getRowDimension());
	}
	if (m.getRowDimension() != a.getRowDimension()) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
		a.getRowDimension());
	}
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:48:51.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:51.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:51.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:48:52.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:52.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:52.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:48:54.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:54.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:54.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm += org.apache.commons.math3.util.FastMath.abs(e.getValue());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:48:56.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:56.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:56.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += e.getValue() * v.getEntry(e.getIndex());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:48:58.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:48:58.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:48:58.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() - result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:49:00.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:00.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:00.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:49:02.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:02.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:02.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:49:04.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:04.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:04.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
m.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:49:07.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:07.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:07.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
a.getRowDimension()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:49:08.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:08.942 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:08.943 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:49:11.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:11.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:11.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedT,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:49:13.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:13.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:13.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:49:15.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:15.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:15.545 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:49:17.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:17.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:17.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = shift.x - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:49:20.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:20.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:20.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:49:22.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:22.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:22.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hVec[2] = matrixT[m + 2][m + 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:49:24.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:24.761 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:24.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:49:27.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:27.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:27.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m == l) {
	break;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:49:29.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:29.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:29.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final double diff = e.getValue() - v.getEntry(e.getIndex());
	d += diff * diff;
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:49:31.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:31.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:31.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:49:33.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:33.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:33.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = matrixT[idx][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:49:36.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:36.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:36.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: code style adaptations for SchurTransformer

00:49:38.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:38.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:38.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:49:40.491 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:40.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:40.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:49:42.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:42.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:42.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:49:45.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:45.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:45.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:49:47.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:47.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:47.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:49:49.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:49.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:49.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:49:51.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:51.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:51.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:49:53.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:53.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:53.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
	matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
} else {
	matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

00:49:55.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:55.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:55.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:49:58.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:49:58.119 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:49:58.120 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
(q * matrixT[i][idx - 1])) / x,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:50:00.420 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:00.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:00.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = i; j < n; j++) {
	matrixP[i][j] = matrixT[i][j];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:50:02.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:02.511 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:02.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = n - 1; j >= 0; j--) {
	for (int i = 0; i <= (n - 1); i++) {
		z = 0.0;
		for (int k = 0; k <= org.apache.commons.math3.util.FastMath.min(j, n - 1); k++) {
			z = z + (matrixP[i][k] * matrixT[k][j]);
		}
		matrixP[i][j] = z;
	}
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:50:04.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:04.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:04.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:50:06.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:06.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:06.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 0; j < n; j++) {
	tmp[j] = matrixP[j][i];
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:50:08.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:08.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:08.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		tmp[j] = matrixP[j][i];
	}
	eigenvectors[i] = new org.apache.commons.math3.linear.ArrayRealVector(tmp);
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:50:10.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:10.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:10.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(function.value(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedH,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:50:12.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:12.676 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:12.677 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(function.value(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[i][j] -= f * ort[j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:50:14.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:14.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:14.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(function.value(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: Use getter instead of direct array reference

00:50:17.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:17.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:17.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(function.value(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: Use the proper method to get the array length

00:50:18.963 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:18.963 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:18.964 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(function.value(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:50:21.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:21.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:21.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(value);
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:50:23.795 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:23.796 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:23.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (thisIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
	java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
	while (otherIt.hasNext()) {
		final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
		product.setEntry(thisE.getIndex(), otherE.getIndex(), 
		thisE.getValue() * otherE.getValue());
	} 
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:50:25.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:25.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:25.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:50:28.150 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:28.150 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:28.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm = org.apache.commons.math3.util.FastMath.max(norm, org.apache.commons.math3.util.FastMath.abs(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: code style adaptations for SchurTransformer

00:50:30.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:30.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:30.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:50:32.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:32.937 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:32.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += e.getValue() * v.getEntry(e.getIndex());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:50:34.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:34.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:34.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

00:50:37.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:37.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:37.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: Use getter instead of direct array reference

00:50:39.707 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:39.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:39.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: Use getter instead of direct array reference

00:50:42.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:42.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:42.175 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:50:44.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:44.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:44.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:50:46.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:46.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:46.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: code style adaptations for SchurTransformer

00:50:49.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:49.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:49.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: code style adaptations for SchurTransformer

00:50:51.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:51.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:51.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: code style adaptations for SchurTransformer

00:50:53.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:53.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:53.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: code style adaptations for SchurTransformer

00:50:55.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:55.912 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:55.913 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift,commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:50:58.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:50:58.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:50:58.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
	if (k != m) {
		matrixT[k][k - 1] = (-s) * shift.x;
	} else if (l != m) {
		matrixT[k][k - 1] = -matrixT[k][k - 1];
	}
	p = p + s;
	shift.x = p / s;
	shift.y = q / s;
	double z = r / s;
	q = q / p;
	r = r / p;


	for (int j = k; j < n; j++) {
		p = matrixT[k][j] + (q * matrixT[k + 1][j]);
		if (notlast) {
			p = p + (r * matrixT[k + 2][j]);
			matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
		}
		matrixT[k][j] = matrixT[k][j] - (p * shift.x);
		matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
	}


	for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
		p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixT[i][k + 2]);
			matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
		}
		matrixT[i][k] = matrixT[i][k] - p;
		matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
	}


	final int high = matrixT.length - 1;
	for (int i = 0; i <= high; i++) {
		p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
		if (notlast) {
			p = p + (z * matrixP[i][k + 2]);
			matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
		}
		matrixP[i][k] = matrixP[i][k] - p;
		matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:00.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:00.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:00.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > (m + 2)) {
	matrixT[i][i - 3] = 0.0;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: code style adaptations for SchurTransformer

00:51:02.645 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:02.645 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:02.646 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:04.661 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:04.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:04.662 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int m = 1; m <= (high - 1); m++) {

	double scale = 0;
	for (int i = m; i <= high; i++) {
		scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
	}

	if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

		double h = 0;
		for (int i = high; i >= m; i--) {
			ort[i] = householderVectors[i][m - 1] / scale;
			h += ort[i] * ort[i];
		}
		final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

		h = h - (ort[m] * g);
		ort[m] = ort[m] - g;




		for (int j = m; j < n; j++) {
			double f = 0;
			for (int i = high; i >= m; i--) {
				f += ort[i] * householderVectors[i][j];
			}
			f = f / h;
			for (int i = m; i <= high; i++) {
				householderVectors[i][j] -= f * ort[i];
			}
		}

		for (int i = 0; i <= high; i++) {
			double f = 0;
			for (int j = high; j >= m; j--) {
				f += ort[j] * householderVectors[i][j];
			}
			f = f / h;
			for (int j = m; j <= high; j++) {
				householderVectors[i][j] -= f * ort[j];
			}
		}

		ort[m] = scale * ort[m];
		householderVectors[m][m - 1] = scale * g;
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:51:06.887 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:06.887 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:06.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:51:08.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:08.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:08.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: householderVectors[m][m - 1] = scale * g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:51:10.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:10.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:10.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= high; i++) {
	double f = 0;
	for (int j = high; j >= m; j--) {
		f += ort[j] * householderVectors[i][j];
	}
	f = f / h;
	for (int j = m; j <= high; j++) {
		householderVectors[i][j] -= f * ort[j];
	}
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:51:12.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:12.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:12.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f += ort[j] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:51:15.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:15.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:15.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort[m] = ort[m] - g,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:51:17.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:17.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:17.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > 0) {

	h[i][i - 1] = householderVectors[i][i - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

00:51:19.545 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:19.545 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:19.546 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector sqrtDiag = diag.map(new org.apache.commons.math3.analysis.function.Sqrt()),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:51:21.589 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:21.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:21.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:23.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:23.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:23.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (i > (m + 2)) {
	matrixT[i][i - 3] = 0.0;
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:25.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:25.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:25.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][i - 3] = 0.0,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:27.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:27.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:27.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = m; k <= (idx - 1); k++) {
	boolean notlast = k != (idx - 1);
	if (k != m) {
		p = matrixT[k][k - 1];
		q = matrixT[k + 1][k - 1];
		r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
		shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
		if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
			p = p / shift.x;
			q = q / shift.x;
			r = r / shift.x;
		}
	}
	if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		break;
	}
	double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r));
	if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
		s = -s;
	}
	if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		if (k != m) {
			matrixT[k][k - 1] = (-s) * shift.x;
		} else if (l != m) {
			matrixT[k][k - 1] = -matrixT[k][k - 1];
		}
		p = p + s;
		shift.x = p / s;
		shift.y = q / s;
		double z = r / s;
		q = q / p;
		r = r / p;


		for (int j = k; j < n; j++) {
			p = matrixT[k][j] + (q * matrixT[k + 1][j]);
			if (notlast) {
				p = p + (r * matrixT[k + 2][j]);
				matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
			}
			matrixT[k][j] = matrixT[k][j] - (p * shift.x);
			matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
		}


		for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
			p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixT[i][k + 2]);
				matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
			}
			matrixT[i][k] = matrixT[i][k] - p;
			matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
		}


		final int high = matrixT.length - 1;
		for (int i = 0; i <= high; i++) {
			p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixP[i][k + 2]);
				matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
			}
			matrixP[i][k] = matrixP[i][k] - p;
			matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
		}
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:29.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:29.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:29.691 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][k] = matrixP[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:31.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:31.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:31.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][k] = matrixT[i][k] - p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:33.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:33.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:33.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.x = p / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:35.571 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:35.571 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:35.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (s * s) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:37.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:37.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:37.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double q = (p * p) + shift.w,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:39.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:39.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:39.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedP = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixP),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:51:41.313 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:41.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:41.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m != null) {
	if (m.getColumnDimension() != m.getRowDimension()) {
		throw new org.apache.commons.math3.linear.NonSquareOperatorException(m.getColumnDimension(), 
		m.getRowDimension());
	}
	if (m.getRowDimension() != a.getRowDimension()) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
		a.getRowDimension());
	}
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:43.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:43.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:43.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT = transformer.getH().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:51:45.137 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:45.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:45.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:51:47.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:47.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:47.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:51:49.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:49.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:49.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x0),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:51:50.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:50.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:50.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(function.value(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:51:53.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:53.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:53.194 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	e.setValue(value);
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:51:55.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:55.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:55.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (thisIt.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry thisE = thisIt.next();
	java.util.Iterator<org.apache.commons.math3.linear.RealVector.Entry> otherIt = v.sparseIterator();
	while (otherIt.hasNext()) {
		final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next();
		product.setEntry(thisE.getIndex(), otherE.getIndex(), 
		thisE.getValue() * otherE.getValue());
	} 
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:51:57.566 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:57.566 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:57.567 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.RealVector.Entry otherE = otherIt.next(),commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:51:59.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:51:59.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:51:59.985 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm = org.apache.commons.math3.util.FastMath.max(norm, org.apache.commons.math3.util.FastMath.abs(e.getValue()));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: Use the proper method to get the array length

00:52:02.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:02.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:02.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:52:04.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:04.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:04.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	d += e.getValue() * v.getEntry(e.getIndex());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:52:06.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:06.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:06.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	final int index = e.getIndex();
	result.setEntry(index, e.getValue() + result.getEntry(index));
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

00:52:09.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:09.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:09.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	dot += data[e.getIndex()] * e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:52:11.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:11.222 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:11.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] -= e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

00:52:13.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:13.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:13.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	out[e.getIndex()] += e.getValue();
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: Redundant check for null; null is not an instanceof any Object

00:52:15.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:15.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:15.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!(other instanceof org.apache.commons.math3.linear.RealVector)) {
	return false;
},commit: Redundant check for null; null is not an instanceof any Object
}, sim: -0.208075
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:52:17.350 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:17.350 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:17.351 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x0),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:52:19.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:19.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:19.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = m.operate(r),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:52:21.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:21.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:21.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Use the proper method to get the array length

00:52:23.256 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:23.256 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:23.257 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Use getter instead of direct array reference

00:52:25.306 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:25.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:25.307 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: code style adaptations for SchurTransformer

00:52:27.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:27.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:27.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: code style adaptations for SchurTransformer

00:52:29.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:29.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:29.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:52:31.144 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:31.144 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:31.145 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!org.apache.commons.math3.util.Precision.equals(scale, 0)) {

	double h = 0;
	for (int i = high; i >= m; i--) {
		ort[i] = householderVectors[i][m - 1] / scale;
		h += ort[i] * ort[i];
	}
	final double g = (ort[m] > 0) ? -org.apache.commons.math3.util.FastMath.sqrt(h) : org.apache.commons.math3.util.FastMath.sqrt(h);

	h = h - (ort[m] * g);
	ort[m] = ort[m] - g;




	for (int j = m; j < n; j++) {
		double f = 0;
		for (int i = high; i >= m; i--) {
			f += ort[i] * householderVectors[i][j];
		}
		f = f / h;
		for (int i = m; i <= high; i++) {
			householderVectors[i][j] -= f * ort[i];
		}
	}

	for (int i = 0; i <= high; i++) {
		double f = 0;
		for (int j = high; j >= m; j--) {
			f += ort[j] * householderVectors[i][j];
		}
		f = f / h;
		for (int j = m; j <= high; j++) {
			householderVectors[i][j] -= f * ort[j];
		}
	}

	ort[m] = scale * ort[m];
	householderVectors[m][m - 1] = scale * g;
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:52:33.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:33.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:33.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: h = h - (ort[m] * g),commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

00:52:34.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:34.875 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:34.876 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m + 1; i <= high; i++) {
	ort[i] = householderVectors[i][m - 1];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:52:36.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:36.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:36.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = matrixT[k + 1][k - 1],commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:52:38.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:38.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:38.799 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > (org.apache.commons.math3.util.FastMath.abs(z) + org.apache.commons.math3.util.FastMath.abs(q))) {
	matrixT[i + 1][idx - 1] = (((-ra) - (w * matrixT[i][idx - 1])) + 
	(q * matrixT[i][idx])) / x;
	matrixT[i + 1][idx] = (((-sa) - (w * matrixT[i][idx])) - 
	(q * matrixT[i][idx - 1])) / x;
} else {
	final org.apache.commons.math3.complex.Complex c2 = cdiv((-r) - (y * matrixT[i][idx - 1]), 
	(-s) - (y * matrixT[i][idx]), z, q);
	matrixT[i + 1][idx - 1] = c2.getReal();
	matrixT[i + 1][idx] = c2.getImaginary();
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:52:40.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:40.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:40.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= (n - 1); i++) {
	z = matrixP[i][idx - 1];
	matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
	matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

00:52:42.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:42.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:42.647 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

00:52:44.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:44.615 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:44.616 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = z + (matrixP[i][k] * matrixT[k][j]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:52:46.493 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:46.493 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:46.494 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x0.copy()),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:52:48.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:48.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:48.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m.getRowDimension() != a.getRowDimension()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
	a.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

00:52:50.238 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:50.238 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:50.239 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:52:52.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:52.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:52.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:52:54.189 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:54.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:54.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = m.operate(r),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:52:56.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:56.511 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:56.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == null) {
	z = r;
} else {
	z = null;
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

00:52:58.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:52:58.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:52:58.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x0),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Math with FastMath.
, ingredientB: Replaced Math with FastMath.

00:53:01.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:01.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:01.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Replaced Math with FastMath.

00:53:03.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:03.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:03.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:53:05.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:05.046 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:05.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:53:07.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:07.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:07.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Replaced Math with FastMath.

00:53:09.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:09.431 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:09.432 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:53:11.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:11.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:11.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:53:13.957 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:13.957 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:13.958 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:53:16.074 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:16.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:16.075 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:53:18.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:18.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:18.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:53:20.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:20.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:20.183 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:53:22.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:22.319 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:22.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:24.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:24.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:24.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:26.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:26.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:26.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:53:28.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:28.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:28.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Replaced Math with FastMath.

00:53:30.264 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:30.264 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:30.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Replaced Math with FastMath.

00:53:32.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:32.295 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:32.296 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:34.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:34.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:34.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:53:36.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:36.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:36.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:39.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:39.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:39.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:53:41.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:41.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:41.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:43.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:43.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:43.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:45.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:45.467 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:45.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:53:47.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:47.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:47.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:49.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:49.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:49.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:51.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:51.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:51.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:53.664 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:53.664 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:53.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:53:55.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:55.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:55.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:53:58.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:53:58.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:53:58.075 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:00.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:00.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:00.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:54:02.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:02.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:02.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:04.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:04.729 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:04.730 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:07.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:07.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:07.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:54:09.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:09.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:09.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:11.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:11.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:11.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:13.928 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:13.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:13.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:54:16.170 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:16.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:16.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:18.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:18.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:18.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR, v),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:54:20.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:20.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:20.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR, v),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:22.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:22.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:22.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR, v),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:25.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:25.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:25.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR, v),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:27.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:27.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:27.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:54:29.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:29.276 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:29.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:31.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:31.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:31.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:33.172 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:33.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:33.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = x.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR, v),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:35.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:35.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:35.306 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:54:37.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:37.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:37.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:39.354 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:39.354 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:39.355 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:41.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:41.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:41.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = x.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:43.274 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:43.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:43.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:54:45.404 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:45.404 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:45.405 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:47.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:47.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:47.822 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR, v),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:50.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:50.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:50.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:52.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:52.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:52.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = z.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:54.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:54.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:54.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = z.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:54:56.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:56.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:56.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = z.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:54:58.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:54:58.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:54:58.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zi,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:01.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:01.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:01.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zi,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = z.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:03.249 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:03.249 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:03.250 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zi,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:05.386 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:05.386 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:05.387 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:07.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:07.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:07.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zi,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:09.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:09.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:09.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:11.075 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:11.075 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:11.076 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z.setEntry(i, zi),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:13.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:13.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:13.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z.setEntry(i, zi),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:15.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:15.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:15.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: z.setEntry(i, zi),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:17.306 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:17.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:17.307 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:19.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:19.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:19.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:21.169 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:21.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:21.170 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:23.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:23.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:23.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z.setEntry(i, zi),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:25.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:25.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:25.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR, v),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:27.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:27.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:27.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:55:29.106 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:29.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:29.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:55:30.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:30.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:30.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:55:33.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:33.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:33.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:35.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:35.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:35.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double bi = mb.getEntry(i),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:37.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:37.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:37.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:55:39.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:39.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:39.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double bi = mb.getEntry(i),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:41.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:41.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:41.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, xi + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:43.479 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:43.479 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:43.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, xi + (zbar * wi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:45.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:45.431 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:45.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:47.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:47.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:47.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (zbar * wi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:49.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:49.535 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:49.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (zbar * wi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:51.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:51.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:51.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:55:53.369 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:53.369 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:53.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:55:55.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:55.535 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:55.536 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = (this.m == null) ? this.b.copy() : this.m.operate(this.r1),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (zbar * wi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:55:57.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:55:57.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:55:57.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = (this.m == null) ? this.b.copy() : this.m.operate(this.r1),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:00.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:00.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:00.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = (this.m == null) ? this.b.copy() : this.m.operate(this.r1),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:02.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:02.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:02.268 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = (this.m == null) ? this.b.copy() : this.m.operate(this.r1),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double bi = mb.getEntry(i),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:56:04.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:04.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:04.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:06.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:06.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:06.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:08.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:08.559 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:08.560 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.y = (this.m == null) ? this.b.copy() : this.m.operate(this.r1),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:56:10.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:10.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:10.985 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:13.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:13.435 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:13.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:15.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:15.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:15.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:18.206 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:18.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:18.207 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:56:20.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:20.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:20.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(this.m, this.y),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:22.518 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:22.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:22.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(this.m, this.y),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:24.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:24.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:24.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(this.m, this.y),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:26.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:26.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:26.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(this.m, this.y),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:29.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:29.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:29.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:31.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:31.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:31.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:33.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:33.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:33.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.y = (this.m == null) ? this.b.copy() : this.m.operate(this.r1),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:35.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:35.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:35.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double bi = mb.getEntry(i),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:37.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:37.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:37.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:39.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:39.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:39.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:56:41.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:41.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:41.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double bi = mb.getEntry(i),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:56:43.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:43.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:43.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:56:45.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:45.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:45.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Replaced Math with FastMath.

00:56:48.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:48.051 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:48.052 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:56:50.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:50.146 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:50.147 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:56:52.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:52.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:52.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (zbar * wi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:56:54.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:54.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:54.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:56:56.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:56.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:56.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:56:58.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:56:58.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:56:58.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:00.507 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:00.507 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:00.508 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:02.566 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:02.566 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:02.567 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z.setEntry(i, zi),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:04.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:04.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:04.472 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:06.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:06.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:06.396 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zi,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:08.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:08.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:08.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = z.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:10.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:10.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:10.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:12.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:12.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:12.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:57:14.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:14.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:14.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:16.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:16.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:16.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:18.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:18.108 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:18.109 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:20.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:20.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:20.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:57:21.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:21.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:21.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:23.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:23.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:23.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(this.m, this.y),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:26.264 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:26.264 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:26.265 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(this.m, this.y),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:28.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:28.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:28.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:30.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:30.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:30.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:32.952 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:32.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:32.953 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double bi = mb.getEntry(i),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:57:35.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:35.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:35.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.mb = (m == null) ? b : m.operate(b),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:37.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:37.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:37.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Replaced Math with FastMath.

00:57:39.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:39.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:39.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Replaced Math with FastMath.

00:57:41.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:41.133 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:41.134 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:43.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:43.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:43.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:45.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:45.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:45.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:47.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:47.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:47.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:49.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:49.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:49.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:57:51.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:51.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:51.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:57:53.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:53.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:53.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:57:55.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:55.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:55.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:57:57.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:57.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:57.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Replaced Math with FastMath.

00:57:59.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:57:59.060 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:57:59.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:58:00.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:00.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:00.930 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double bi = mb.getEntry(i),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:02.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:02.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:02.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:58:04.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:04.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:04.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(this.m, this.y),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:06.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:06.613 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:06.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:08.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:08.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:08.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:10.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:10.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:10.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa)),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:12.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:12.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:12.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:58:14.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:14.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:14.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:16.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:16.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:16.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:58:18.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:18.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:18.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:20.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:20.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:20.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:21.992 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:21.993 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:21.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z.setEntry(i, zi),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:23.847 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:23.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:23.848 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:25.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:25.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:25.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = z.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:27.603 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:27.603 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:27.604 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR, v),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:29.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:29.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:29.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = x.dotProduct(z),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:31.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:31.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:31.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

00:58:33.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:33.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:33.333 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:58:35.233 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:35.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:35.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:37.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:37.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:37.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:39.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:39.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:39.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:41.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:41.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:41.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: rnorm = org.apache.commons.math3.util.FastMath.min(cgnorm, lqnorm),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.

00:58:43.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:43.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:43.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return bIsNull,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:44.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:44.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:44.882 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return bIsNull,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: rnorm = org.apache.commons.math3.util.FastMath.min(cgnorm, lqnorm),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:46.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:46.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:46.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return beta < org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: rnorm = org.apache.commons.math3.util.FastMath.min(cgnorm, lqnorm),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:58:48.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:48.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:48.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return beta < org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return bIsNull,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.

00:58:50.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:50.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:50.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:58:52.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:52.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:52.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return beta < org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:58:54.334 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:54.334 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:54.335 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: rnorm = org.apache.commons.math3.util.FastMath.min(cgnorm, lqnorm),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).

00:58:56.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:56.681 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:56.682 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:58:58.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:58:58.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:58:58.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return beta < org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:59:00.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:00.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:00.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: rnorm = org.apache.commons.math3.util.FastMath.min(cgnorm, lqnorm),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

00:59:03.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:03.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:03.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: rnorm = org.apache.commons.math3.util.FastMath.min(cgnorm, lqnorm),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:59:05.091 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:05.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:05.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return beta < org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:07.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:07.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:07.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:08.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:08.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:08.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.linear.SymmLQ.State state,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:11.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:11.047 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:11.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SymmLQ.State state,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:13.005 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:13.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:13.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:14.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:14.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:14.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state.init(),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:16.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:16.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:16.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state.init(),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SymmLQ.State state,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:18.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:18.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:18.726 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state.refineSolution(x),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state.init(),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:20.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:20.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:20.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.IterativeLinearSolverEvent event,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state.refineSolution(x),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:22.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:22.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:22.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state.refineSolution(x),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:24.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:24.929 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:24.930 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.IterativeLinearSolverEvent event,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:26.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:26.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:26.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.IterativeLinearSolverEvent event,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:28.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:28.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:28.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SymmLQ.State state,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:30.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:30.674 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:30.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:32.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:32.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:32.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:34.496 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:34.496 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:34.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.IterativeLinearSolverEvent event,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:36.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:36.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:36.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SymmLQ.State state,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:38.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:38.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:38.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:59:40.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:40.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:40.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:59:42.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:42.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:42.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return bIsNull,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:59:44.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:44.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:44.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return beta < org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:45.974 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:45.974 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:45.975 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:47.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:47.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:47.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.

00:59:49.707 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:49.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:49.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:51.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:51.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:51.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.IterativeLinearSolverEvent event,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:53.544 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:53.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:53.545 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state.refineSolution(x),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

00:59:55.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:55.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:55.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SymmLQ.State state,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

00:59:57.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:57.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:57.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

00:59:59.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:59:59.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:59:59.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:00:01.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:01.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:01.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).

01:00:03.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:03.726 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:03.727 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:00:06.064 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:06.064 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:06.065 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: rnorm = org.apache.commons.math3.util.FastMath.min(cgnorm, lqnorm),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:00:08.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:08.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:08.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:00:10.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:10.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:10.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:00:12.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:12.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:12.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

01:00:14.137 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:14.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:14.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:00:16.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:16.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:16.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

01:00:18.193 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:18.193 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:18.194 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return bIsNull,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

01:00:20.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:20.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:20.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return bIsNull,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bIsNull = true,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Replaced Math with FastMath.

01:00:22.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:22.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:22.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return bIsNull,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

01:00:25.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:25.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:25.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return bIsNull,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.bIsNull = false,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:00:27.169 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:27.169 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:27.170 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:00:29.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:29.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:29.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:00:31.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:31.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:31.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:00:33.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:33.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:33.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.IterativeLinearSolverEvent event,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:00:35.496 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:35.496 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:35.497 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state.refineSolution(x),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:00:37.469 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:37.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:37.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SymmLQ.State state,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:00:39.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:39.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:39.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).

01:00:41.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:41.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:41.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.

01:00:43.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:43.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:43.485 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: x.setEntry(i, (xi + (zbar * wi)) + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:00:45.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:45.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:45.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (zbar * wi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:00:47.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:47.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:47.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setEntry(i, xi + (step * bi)),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:00:49.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:49.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:49.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:00:51.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:51.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:51.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:00:53.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:53.845 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:53.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:00:56.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:56.140 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:56.141 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).

01:00:58.100 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:00:58.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:00:58.101 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:01:00.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:00.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:00.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:01:02.573 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:02.573 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:02.574 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z.setEntry(i, zi),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:01:04.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:04.912 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:04.913 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:01:07.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:07.212 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:07.213 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zi,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:01:09.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:09.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:09.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	y.setEntry(i, (a * x.getEntry(i)) + y.getEntry(i));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:01:11.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:11.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:11.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(s - t) > epsa) {
	final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e;
	e = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException();
	final org.apache.commons.math3.exception.util.ExceptionContext context = e.getContext();
	context.setValue(org.apache.commons.math3.linear.SymmLQ.OPERATOR, l);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR1, x);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.VECTOR2, y);
	context.setValue(org.apache.commons.math3.linear.SymmLQ.THRESHOLD, java.lang.Double.valueOf(epsa));
	throw e;
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:01:13.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:13.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:13.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double s = y.dotProduct(y),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:15.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:15.435 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:15.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:01:17.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:17.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:17.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:01:19.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:19.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:19.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:01:21.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:21.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:21.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return solveInPlace(a, m, b, x, false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771 (bis).
}, sim: 0.030659
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:01:23.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:23.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:23.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: rnorm = org.apache.commons.math3.util.FastMath.min(cgnorm, lqnorm),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:25.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:25.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:25.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: xL.setEntry(i, (xi + (wi * zetaC)) + (vi * zetaS)),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:01:27.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:27.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:27.298 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL.set(0.0),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:01:29.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:29.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:29.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xi = this.xL.getEntry(i),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:31.093 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:31.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:31.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:01:32.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:32.955 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:32.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:34.809 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:34.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:34.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:36.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:36.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:36.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

01:01:38.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:38.835 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:38.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:40.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:40.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:40.830 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:42.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:42.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:42.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.y = this.m.operate(this.r2),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:45.095 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:45.096 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:45.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(this.m, this.y),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:47.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:47.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:47.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:49.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:49.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:49.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:01:51.481 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:51.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:51.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double bi = mb.getEntry(i),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Replaced Math with FastMath.

01:01:53.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:53.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:53.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: earlyStop = state.betaEqualsZero() || state.hasConverged(),commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

01:01:55.618 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:55.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:55.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SchurTransformer t = transformToSchur(matrix),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

01:01:57.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:57.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:57.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: findEigenVectorsFromSchur(t),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

01:01:59.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:01:59.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:01:59.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int size = main.length,commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

01:02:01.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:01.674 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:01.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedD.setEntry(i, i + 1, imagEigenvalues[i]),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

01:02:03.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:03.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:03.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: realEigenvalues = new double[matT.length],commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

01:02:05.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:05.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:05.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] matrixP = schur.getP().getData(),commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.

01:02:07.510 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:07.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:07.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(x) > org.apache.commons.math3.util.FastMath.abs(z)) {
	matrixT[i + 1][idx] = ((-r) - (w * t)) / x;
} else {
	matrixT[i + 1][idx] = ((-s) - (y * t)) / z;
},commit: [MATH-235] add support for non-symmetric matrices in EigenvalueDecomposition.
}, sim: 0.146013
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

01:02:09.558 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:09.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:09.559 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m.getRowDimension() != a.getRowDimension()) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), 
	a.getRowDimension());
},commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:02:11.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:11.504 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:11.505 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (notlast) {
	p = p + (r * matrixT[k + 2][j]);
	matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:02:13.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:13.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:13.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (l == idx) {

	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	idx--;
	iteration = 0;
} else if (l == (idx - 1)) {

	shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
	double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
	double q = (p * p) + shift.w;
	double z = org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(q));
	matrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
	matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
	shift.x = matrixT[idx][idx];

	if (q >= 0) {
		if (p >= 0) {
			z = p + z;
		} else {
			z = p - z;
		}
		shift.x = matrixT[idx][idx - 1];
		double s = org.apache.commons.math3.util.FastMath.abs(shift.x) + org.apache.commons.math3.util.FastMath.abs(z);
		p = shift.x / s;
		q = z / s;
		double r = org.apache.commons.math3.util.FastMath.sqrt((p * p) + (q * q));
		p = p / r;
		q = q / r;


		for (int j = idx - 1; j < n; j++) {
			z = matrixT[idx - 1][j];
			matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
			matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
		}


		for (int i = 0; i <= idx; i++) {
			z = matrixT[i][idx - 1];
			matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]);
			matrixT[i][idx] = (q * matrixT[i][idx]) - (p * z);
		}


		for (int i = 0; i <= (n - 1); i++) {
			z = matrixP[i][idx - 1];
			matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]);
			matrixP[i][idx] = (q * matrixP[i][idx]) - (p * z);
		}
	}
	idx -= 2;
	iteration = 0;
} else {


	computeShift(l, idx, iteration, shift);


	if ((++iteration) > maxIterations) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
		maxIterations);
	}


	int m = idx - 2;


	final double[] hVec = new double[3];

	while (m >= l) {
		double z = matrixT[m][m];
		hVec[2] = shift.x - z;
		double s = shift.y - z;
		hVec[0] = (((hVec[2] * s) - shift.w) / matrixT[m + 1][m]) + matrixT[m][m + 1];
		hVec[1] = ((matrixT[m + 1][m + 1] - z) - hVec[2]) - s;
		hVec[2] = matrixT[m + 2][m + 1];
		s = (org.apache.commons.math3.util.FastMath.abs(hVec[0]) + org.apache.commons.math3.util.FastMath.abs(hVec[1])) + org.apache.commons.math3.util.FastMath.abs(hVec[2]);

		if (m == l) {
			break;
		}

		for (int i = 0; i < hVec.length; i++) {
			hVec[i] /= s;
		}

		final double lhs = org.apache.commons.math3.util.FastMath.abs(matrixT[m][m - 1]) * 
		(org.apache.commons.math3.util.FastMath.abs(hVec[1]) + org.apache.commons.math3.util.FastMath.abs(hVec[2]));

		final double rhs = org.apache.commons.math3.util.FastMath.abs(hVec[0]) * 
		((org.apache.commons.math3.util.FastMath.abs(matrixT[m - 1][m - 1]) + org.apache.commons.math3.util.FastMath.abs(z)) + 
		org.apache.commons.math3.util.FastMath.abs(matrixT[m + 1][m + 1]));

		if (lhs < (epsilon * rhs)) {
			break;
		}
		m--;
	} 

	performDoubleQRStep(l, m, idx, shift, hVec);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:02:15.473 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:15.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:15.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q = z / s,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:02:17.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:17.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:17.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return cachedT,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:02:19.265 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:19.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:19.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

01:02:21.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:21.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:21.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m == null) {
	z = r;
} else {
	z = null;
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.

01:02:23.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:23.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:23.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x),commit: Changed o.a.c.m3.linear.PreconditionedIterativeLinearSolver according to MATH-771.
}, sim: 0.109989
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

01:02:25.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:25.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:25.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsa = (s + org.apache.commons.math3.linear.SymmLQ.State.MACH_PREC) * org.apache.commons.math3.linear.SymmLQ.State.CBRT_MACH_PREC,commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x0),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

01:02:26.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:26.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:26.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] pa = new double[n][n],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.

01:02:28.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:28.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:28.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (it.hasNext()) {
	final org.apache.commons.math3.linear.RealVector.Entry e = it.next();
	norm += org.apache.commons.math3.util.FastMath.abs(e.getValue());
} ,commit: [MATH-627] avoid superfluous null checks in (Array)RealVector, thanks to Arno Ploese.
}, sim: -0.212036
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

01:02:30.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:30.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:30.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: f += ort[i] * householderVectors[i][j],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: code style adaptations for SchurTransformer

01:02:32.616 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:32.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:32.617 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: Redundant check for null; null is not an instanceof any Object

01:02:34.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:34.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:34.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!(other instanceof org.apache.commons.math3.linear.RealVector)) {
	return false;
},commit: Redundant check for null; null is not an instanceof any Object
}, sim: -0.208075
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: code style adaptations for SchurTransformer

01:02:36.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:36.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:36.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: Use the proper method to get the array length

01:02:38.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:38.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:38.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
, ingredientB: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.

01:02:40.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:40.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:40.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: event = new org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent(this, 
manager.getIterations(), 
x, 
b, 
state.getNormOfResidual()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED, 
maxIterations),commit: use different exception to be consistent with EigenDecomposition, use Precision.EPSILON for comparison instead of 2^-52 as in JAMA.
}, sim: -0.148501
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:02:42.331 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:42.331 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:42.331 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.IterativeLinearSolverEvent event,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:02:44.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:44.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:44.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state.refineSolution(x),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:02:46.403 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:46.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:46.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.SymmLQ.State state,commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:02:48.703 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:48.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:48.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: x.setSubVector(0, this.xL),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:02:50.808 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:50.808 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:50.809 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = z.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:02:52.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:52.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:52.953 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.

01:02:54.965 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:54.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:54.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use the proper method to get the array length
, ingredientB: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.

01:02:57.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:57.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:57.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int length = b.getDimension(),commit: Use the proper method to get the array length
}, sim: -0.120736
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.xL = new org.apache.commons.math3.linear.ArrayRealVector(b.getDimension()),commit: In o.a.c.m3.SymmLQ.State   - the current solution is now refined at each iteration, as the overhead is negligible   - SymmLQ.State.xL is no longer a reference to the parameter x passed to its constructor. This way, all transparent updates of the vector x are removed.   - SymmLQ.State.moveToCG(RealVector) is renamed SymmLQ.State.refineSolution(RealVector). In o.a.c.m3.SymmLQ.solveInPlace()   - SymmLQ.State.init() is now called explicitly   - a new DefaultIterativeLinearSolverEvent is created each time it is needed (no "clever" object reuse)   - SymmLQ.State.refineSolution(RealVector) is called explicitly See MATH-761.
}, sim: -0.131965
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: Use getter instead of direct array reference

01:02:59.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:02:59.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:02:59.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (length != m) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m);
},commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: Use getter instead of direct array reference

01:03:00.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:00.921 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:00.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(length, m),commit: Use getter instead of direct array reference
}, sim: -0.081968
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: code style adaptations for SchurTransformer

01:03:02.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:02.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:02.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
, ingredientB: code style adaptations for SchurTransformer

01:03:04.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:04.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:04.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hasConverged,commit: In o.a.c.m3.linear.SymmLQ.State, implemented hasConverged() so as to avoid access to private field State.hasConverged through synthetic getters.
}, sim: -0.056640
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: code style adaptations for SchurTransformer
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:03:06.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:06.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:06.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: matrixP[i][idx - 1] = (q * z) + (p * matrixP[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: code style adaptations for SchurTransformer

01:03:08.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:08.817 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:08.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixP[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: code style adaptations for SchurTransformer

01:03:10.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:10.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:10.709 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[i][idx - 1] = (q * z) + (p * matrixT[i][idx]),commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: code style adaptations for SchurTransformer

01:03:12.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:12.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:12.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[i][idx - 1],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: code style adaptations for SchurTransformer

01:03:14.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:14.674 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:14.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = idx - 1; j < n; j++) {
	z = matrixT[idx - 1][j];
	matrixT[idx - 1][j] = (q * z) + (p * matrixT[idx][j]);
	matrixT[idx][j] = (q * matrixT[idx][j]) - (p * z);
},commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: code style adaptations for SchurTransformer

01:03:16.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:16.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:16.726 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = matrixT[idx - 1][j],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: code style adaptations for SchurTransformer

01:03:18.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:18.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:18.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx],commit: code style adaptations for SchurTransformer
}, sim: -0.030769
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

01:03:20.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:20.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:20.605 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = high; j >= m; j--) {
	f += ort[j] * householderVectors[i][j];
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

01:03:22.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:22.489 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:22.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m; i <= high; i++) {
	scale += org.apache.commons.math3.util.FastMath.abs(householderVectors[i][m - 1]);
},commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

01:03:24.376 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:24.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:24.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int high = n - 1,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:03:26.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:26.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:26.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (iteration == 30) {
	double s = (shift.y - shift.x) / 2.0;
	s = (s * s) + shift.w;
	if (org.apache.commons.math3.util.Precision.compareTo(s, 0.0, epsilon) > 0) {
		s = org.apache.commons.math3.util.FastMath.sqrt(s);
		if (shift.y < shift.x) {
			s = -s;
		}
		s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s));
		for (int i = 0; i <= idx; i++) {
			matrixT[i][i] -= s;
		}
		shift.exShift += s;
		shift.x = shift.y = shift.w = 0.964;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:03:28.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:28.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:28.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:03:30.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:30.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:30.216 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i <= high; i++) {
	p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
	if (notlast) {
		p = p + (z * matrixP[i][k + 2]);
		matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
	}
	matrixP[i][k] = matrixP[i][k] - p;
	matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

01:03:32.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:32.176 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:32.177 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return x.ebeDivide(sqrtDiag),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

01:03:34.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:34.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:34.159 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cachedPt = null,commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

01:03:36.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:36.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:36.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
, ingredientB: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.

01:03:38.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:38.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:38.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.a, v, this.y, this.a.operate(this.y));
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ort = new double[m],commit: [MATH-235] add HessenbergTransformer to transform a general real matrix to Hessenberg form. This is a first step for the eigenvalue decomposition of a non-symmetric matrix.
}, sim: 0.001588
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:03:39.969 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:39.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:39.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; i++) {
	final double zi;
	zi = ((a * x.getEntry(i)) + (b * y.getEntry(i))) + z.getEntry(i);
	z.setEntry(i, zi);
},commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:03:41.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:41.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:41.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z.setEntry(i, zi),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:03:43.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:43.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:43.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zi,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:03:45.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:45.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:45.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = x.getDimension(),commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.

01:03:48.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:48.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:48.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.linear.NonSelfAdjointOperatorException e,commit: In class o.a.c.math3.linear.SymmLQ   - Changed parameter order for the constructor of nested class State (for consistency with the constructor of SymmLQ).   - Moved some static helper methods from SymmLQ to nested class State   - Changed visibility of some static fields from private to protected in order to avoid the use of synthetic getters. See MATH-761.
}, sim: 0.028726
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:03:50.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:50.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:50.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((this.m != null) && this.check) {
	org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y));
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.

01:03:53.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:53.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:53.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = this.xL.getDimension(),commit: In o.a.c.m3.SymmLQ.State, created accessors   - RealVector getRightHandSideVector(),   - RealVector getSolution(),   - double getNormOfResidual(), see MATH-761.
}, sim: 0.033336
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:03:55.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:55.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:55.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x, goodb, shift),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:03:57.656 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:57.656 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:57.657 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:03:59.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:03:59.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:03:59.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.linear.RealLinearOperator() {

	@java.lang.Override
	public org.apache.commons.math3.linear.RealVector operate(final org.apache.commons.math3.linear.RealVector x) {
		return x.ebeDivide(sqrtDiag);
	}


	@java.lang.Override
	public int getRowDimension() {
		return sqrtDiag.getDimension();
	}


	@java.lang.Override
	public int getColumnDimension() {
		return sqrtDiag.getDimension();
	}
},commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

01:04:01.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:01.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:01.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return sqrtDiag.getDimension(),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.

01:04:03.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:03.729 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:03.730 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return x.ebeDivide(sqrtDiag),commit: In SymmLQTest, testPreconditionedNormOfResidual() now passes. Previous failure was due to the test itself, not to the implementation of SymmLQ. See MATH-770.
}, sim: 0.035826
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:05.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:05.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:05.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = m + 2; i <= idx; i++) {
	matrixT[i][i - 2] = 0.0;
	if (i > (m + 2)) {
		matrixT[i][i - 3] = 0.0;
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:07.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:07.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:07.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int k = m; k <= (idx - 1); k++) {
	boolean notlast = k != (idx - 1);
	if (k != m) {
		p = matrixT[k][k - 1];
		q = matrixT[k + 1][k - 1];
		r = (notlast) ? matrixT[k + 2][k - 1] : 0.0;
		shift.x = (org.apache.commons.math3.util.FastMath.abs(p) + org.apache.commons.math3.util.FastMath.abs(q)) + org.apache.commons.math3.util.FastMath.abs(r);
		if (!org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
			p = p / shift.x;
			q = q / shift.x;
			r = r / shift.x;
		}
	}
	if (org.apache.commons.math3.util.Precision.equals(shift.x, 0.0, epsilon)) {
		break;
	}
	double s = org.apache.commons.math3.util.FastMath.sqrt(((p * p) + (q * q)) + (r * r));
	if (org.apache.commons.math3.util.Precision.compareTo(p, 0.0, epsilon) < 0) {
		s = -s;
	}
	if (!org.apache.commons.math3.util.Precision.equals(s, 0.0, epsilon)) {
		if (k != m) {
			matrixT[k][k - 1] = (-s) * shift.x;
		} else if (l != m) {
			matrixT[k][k - 1] = -matrixT[k][k - 1];
		}
		p = p + s;
		shift.x = p / s;
		shift.y = q / s;
		double z = r / s;
		q = q / p;
		r = r / p;


		for (int j = k; j < n; j++) {
			p = matrixT[k][j] + (q * matrixT[k + 1][j]);
			if (notlast) {
				p = p + (r * matrixT[k + 2][j]);
				matrixT[k + 2][j] = matrixT[k + 2][j] - (p * z);
			}
			matrixT[k][j] = matrixT[k][j] - (p * shift.x);
			matrixT[k + 1][j] = matrixT[k + 1][j] - (p * shift.y);
		}


		for (int i = 0; i <= org.apache.commons.math3.util.FastMath.min(idx, k + 3); i++) {
			p = (shift.x * matrixT[i][k]) + (shift.y * matrixT[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixT[i][k + 2]);
				matrixT[i][k + 2] = matrixT[i][k + 2] - (p * r);
			}
			matrixT[i][k] = matrixT[i][k] - p;
			matrixT[i][k + 1] = matrixT[i][k + 1] - (p * q);
		}


		final int high = matrixT.length - 1;
		for (int i = 0; i <= high; i++) {
			p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]);
			if (notlast) {
				p = p + (z * matrixP[i][k + 2]);
				matrixP[i][k + 2] = matrixP[i][k + 2] - (p * r);
			}
			matrixP[i][k] = matrixP[i][k] - p;
			matrixP[i][k + 1] = matrixP[i][k + 1] - (p * q);
		}
	}
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:10.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:10.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:10.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: p = (shift.x * matrixP[i][k]) + (shift.y * matrixP[i][k + 1]),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:12.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:12.629 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:12.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: r = r / p,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:14.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:14.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:14.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = shift.x - (shift.w / (((shift.y - shift.x) / 2.0) + s)),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:16.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:16.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:16.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = p - z,commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:18.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:18.980 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:18.981 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (cachedT == null) {
	cachedT = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(matrixT);
},commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:21.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:21.312 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:21.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: matrixT = transformer.getH().getData(),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

01:04:23.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:23.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:23.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.

01:04:25.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:25.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:25.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.HessenbergTransformer transformer = new org.apache.commons.math3.linear.HessenbergTransformer(matrix),commit: [MATH-235] add SchurTransformer to transform a general real matrix to Schur form.
}, sim: 0.079921
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

01:04:28.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:28.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:28.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: state = new org.apache.commons.math3.linear.SymmLQ.State(a, m, b, goodb, shift, delta, check),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:04:30.555 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:30.555 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:30.556 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:04:32.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:32.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:32.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return solveInPlace(a, m, b, x.copy(), false, 0.0),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:04:35.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:35.370 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:35.371 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (this.m != null) {
	this.y = this.m.operate(this.r2);
},commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:04:37.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:37.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:37.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(this.m, this.r1, this.y, this.m.operate(this.y)),commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).

01:04:39.148 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:39.148 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:39.149 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (state.bEqualsNullVector()) {

	manager.fireTerminationEvent(event);
	return x;
},commit: In org.apache.commons.math3.linear.SymmLQ.State, created   - boolean bEqualsNullVector()   - boolean betaIsZero() to improve data encapsulation (see MATH-761).
}, sim: 0.107958
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.

01:04:41.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:41.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:41.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.m = m,commit: Changed o.a.c.m3.linear.SymmLQ according to MATH-771.
}, sim: 0.098131
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Replaced Math with FastMath.

01:04:43.481 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:43.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:43.483 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: MACH_PREC = org.apache.commons.math3.util.FastMath.ulp(1.0),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
, ingredientB: Replaced Math with FastMath.

01:04:45.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:45.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:45.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: context.setValue(org.apache.commons.math3.linear.ConjugateGradient.OPERATOR, m),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Math with FastMath.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

01:04:47.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:47.551 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:47.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (m != null) {
	z = m.operate(r);
},commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Math with FastMath.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

01:04:49.655 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:49.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:49.656 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: z = m.operate(r),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Math with FastMath.
, ingredientB: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.

01:04:51.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
01:04:51.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
01:04:51.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: CBRT_MACH_PREC = org.apache.commons.math3.util.FastMath.cbrt(MACH_PREC),commit: Replaced Math with FastMath.
}, sim: 0.105500
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: if (i > 0) {
	toAppendTo.append(separator);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(a, m, b, x0),commit: Changed o.a.c.m3.linear.ConjugateGradient according to MATH-771.
}, sim: 0.098242
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.belowMaxTime(AstorCoreEngine.java:278) - 
 No more time for operating
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 7200.678
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 847
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 9903.254


Node: b9d7f4571f21



Date: Tue Nov 26 02:16:18 EST 2019

cd /script/jGenProg_Defects4J_Math_32;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-32 \
	-failing org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_32/target/classes/:/script/jGenProg_Defects4J_Math_32/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

